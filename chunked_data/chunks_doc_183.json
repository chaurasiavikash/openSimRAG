[
  {
    "id": "9a784e0c-64ab-47f2-9372-16bd45ff5713",
    "document_id": "doc_183",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Public Attributes | Protected Attributes OpenSim::Analysis Class Reference abstract An abstract class for specifying the interface for an analysis plugin. More... Inheritance diagram for OpenSim::Analysis: Public Member Functions Analysis ( Model *aModel=0) Default constructor. More... Analysis (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct an object from file. More... Analysis (const Analysis &aAnalysis) Copy constructor. More... virtual ~Analysis () Analysis & operator= (const Analysis &aAnalysis) Assignment operator. More... virtual int begin (const SimTK::State &s) virtual int step (const SimTK::State &s, int stepNumber) virtual int end (const SimTK::State &s) virtual void setModel ( Model &aModel) set pointer to model to be analyzed. More... virtual void setStatesStore (const Storage &aStatesStore) set states storage for analysis. More... void setOn (bool aTrueFalse) bool getOn () const void setStartTime (double aStartTime) double getStartTime () const void setEndTime (double aEndTime) double getEndTime () const void setInDegrees (bool aTrueFalse) Set whether or not to write the output of angles in degrees. More... bool getInDegrees () const virtual bool proceed (int aStep=0) void setStepInterval (int aStepInterval) int getStepInterval () const void setColumnLabels (const Array < std::string > &aLabels) Set the column labels for this analysis. More... const Array < std::string > & getColumnLabels () const void setStorageInterval (int aInterval) int getStorageInterval () const virtual ArrayPtrs < Storage > & getStorageList () void setPrintResultFiles (bool aToWrite) bool getPrintResultFiles () const virtual int printResults (const std::string &aBaseName, const std::string &aDir=\"\", double aDT=-1.0, const std::string &aExtension=\".sto\") Print the results of the analysis. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "8af30d91-b254-48a6-a099-2f339e5f88a9",
    "document_id": "doc_183",
    "content": "this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... virtual void updateFromXMLNode (SimTK::Xml::Element &objectElement, int versionNumber) Use this method to deserialize an object from a SimTK::Xml::Element. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion ()",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "cb878341-1784-47ed-b8bc-aba63eef3696",
    "document_id": "doc_183",
    "content": "deserialize an object from a SimTK::Xml::Element. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef Analysis Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... Public Attributes Model * _model const Storage * _statesStore Protected Attributes PropertyInt _stepIntervalProp Step interval. More... int & _stepInterval PropertyBool _onProp On, off flag. More... bool & _on PropertyDbl _startTimeProp Start time for the callback in normalized time. More... double & _startTime PropertyDbl _endTimeProp End time for the callback in normalized time. More... double & _endTime ArrayPtrs < Storage > _storageList bool _printResultFiles Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Auto-generated functions static Analysis * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Analysis\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Analysis * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "a17843b8-8c54-4fce-a3cf-a53576cd6763",
    "document_id": "doc_183",
    "content": "the Java GUI. More... Analysis * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "7bce102b-b491-4c1c-bb6c-5101518bc983",
    "document_id": "doc_183",
    "content": "which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "037ab5b6-d904-497c-a65a-5b41afbc35cb",
    "document_id": "doc_183",
    "content": "std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description An abstract class for specifying the interface for an analysis plugin. Author Frank C. Anderson, Ajay Seth Version 1.0 Member Typedef Documentation ◆ Self typedef Analysis OpenSim::Analysis::Self This typedef might be useful within the member functions of this class. This",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "b09ac9d7-1b0e-45c4-ba6c-03afc190d4af",
    "document_id": "doc_183",
    "content": "OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description An abstract class for specifying the interface for an analysis plugin. Author Frank C. Anderson, Ajay Seth Version 1.0 Member Typedef Documentation ◆ Self typedef Analysis OpenSim::Analysis::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Object OpenSim::Analysis::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ Analysis() [1/3] OpenSim::Analysis::Analysis ( Model * aModel = 0 ) explicit Default constructor. Parameters aModel Model on which the analysis is to be performed. ◆ Analysis() [2/3] OpenSim::Analysis::Analysis ( const std::string & aFileName , bool aUpdateFromXMLNode = true ) Construct an object from file. The object is constructed from the root element of the XML document. The type of object is the tag name of the XML root element. Parameters aFileName File name of the document. aUpdateFromXMLNode ◆ Analysis() [3/3] OpenSim::Analysis::Analysis ( const Analysis & aAnalysis ) Copy constructor. Parameters aAnalysis Object to be copied. See also Analysis(const XMLDocument *aDocument) Analysis(const char *aFileName) generateXMLDocument() ◆ ~Analysis() virtual OpenSim::Analysis::~Analysis ( ) virtual Member Function Documentation ◆ assign() void OpenSim::Analysis::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Analysis . ◆ begin() virtual int OpenSim::Analysis::begin ( const SimTK::State & s ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ clone() Analysis * OpenSim::Analysis::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Object . Implemented in OpenSim::ProbeReporter , OpenSim::IMUDataReporter , OpenSim::OutputReporter , OpenSim::InducedAccelerations , OpenSim::PointKinematics , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::Actuation , OpenSim::StatesReporter , OpenSim::StaticOptimization , OpenSim::ForceReporter , OpenSim::BodyKinematics , and OpenSim::Kinematics . ◆ end() virtual int OpenSim::Analysis::end ( const SimTK::State & s ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "9a1fc948-78d6-4412-bc01-2024725b07c8",
    "document_id": "doc_183",
    "content": "the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Object . Implemented in OpenSim::ProbeReporter , OpenSim::IMUDataReporter , OpenSim::OutputReporter , OpenSim::InducedAccelerations , OpenSim::PointKinematics , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::Actuation , OpenSim::StatesReporter , OpenSim::StaticOptimization , OpenSim::ForceReporter , OpenSim::BodyKinematics , and OpenSim::Kinematics . ◆ end() virtual int OpenSim::Analysis::end ( const SimTK::State & s ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ getClassName() static const std::string& OpenSim::Analysis::getClassName ( ) inline static This returns \"Analysis\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getColumnLabels() const Array <std::string>& OpenSim::Analysis::getColumnLabels ( ) const ◆ getConcreteClassName() const std::string& OpenSim::Analysis::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::Object . Implemented in OpenSim::ProbeReporter , OpenSim::IMUDataReporter , OpenSim::OutputReporter , OpenSim::InducedAccelerations , OpenSim::PointKinematics , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::Actuation , OpenSim::StatesReporter , OpenSim::StaticOptimization , OpenSim::ForceReporter , OpenSim::BodyKinematics , and OpenSim::Kinematics . ◆ getEndTime() double OpenSim::Analysis::getEndTime ( ) const ◆ getInDegrees() bool OpenSim::Analysis::getInDegrees ( ) const ◆ getOn() bool OpenSim::Analysis::getOn ( ) const ◆ getPrintResultFiles() bool OpenSim::Analysis::getPrintResultFiles ( ) const inline ◆ getStartTime() double OpenSim::Analysis::getStartTime ( ) const ◆ getStepInterval() int OpenSim::Analysis::getStepInterval ( ) const ◆ getStorageInterval() int OpenSim::Analysis::getStorageInterval ( ) const ◆ getStorageList() virtual ArrayPtrs < Storage >& OpenSim::Analysis::getStorageList ( ) virtual ◆ operator=() Analysis & OpenSim::Analysis::operator= ( const Analysis & aAnalysis ) Assignment operator. Returns Reference to this object. ◆ printResults() virtual int OpenSim::Analysis::printResults ( const std::string & aBaseName , const std::string & aDir = \"\" , double aDT = -1.0 , const std::string & aExtension = \".sto\" ) virtual Print the results of the analysis. Parameters aBaseName Base name of file to which to print the data. aDir Directory name. aDT Time interval between results (linear interpolation is used). If not supplied as an argument or negative, all time steps are printed without interpolation. aExtension File extension if not the default \".sto\". Returns -1 on error, 0 otherwise. Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::ProbeReporter , OpenSim::PointKinematics , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ proceed() virtual bool OpenSim::Analysis::proceed ( int aStep = 0 ) virtual ◆ safeDownCast() static Analysis * OpenSim::Analysis::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "d8bdf52b-040f-445d-ac56-59bb5668c4db",
    "document_id": "doc_183",
    "content": "aDT Time interval between results (linear interpolation is used). If not supplied as an argument or negative, all time steps are printed without interpolation. aExtension File extension if not the default \".sto\". Returns -1 on error, 0 otherwise. Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::ProbeReporter , OpenSim::PointKinematics , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ proceed() virtual bool OpenSim::Analysis::proceed ( int aStep = 0 ) virtual ◆ safeDownCast() static Analysis * OpenSim::Analysis::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Analysis.safeDownCast(obj) . This is equivalent to dynamic_cast<Analysis*>(obj) in C++. ◆ setColumnLabels() void OpenSim::Analysis::setColumnLabels ( const Array < std::string > & aLabels ) Set the column labels for this analysis. Parameters aLabels an Array of strings (labels). ◆ setEndTime() void OpenSim::Analysis::setEndTime ( double aEndTime ) ◆ setInDegrees() void OpenSim::Analysis::setInDegrees ( bool aTrueFalse ) Set whether or not to write the output of angles in degrees. This flag must be set before an analysis is performed to ensure that the results are in the proper format. Parameters aTrueFalse Output will be in degrees if \"true\" and in radians if \"false\". ◆ setModel() virtual void OpenSim::Analysis::setModel ( Model & aModel ) virtual set pointer to model to be analyzed. Parameters aModel Reimplemented in OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::ProbeReporter , OpenSim::PointKinematics , OpenSim::StaticOptimization , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , and OpenSim::Kinematics . ◆ setOn() void OpenSim::Analysis::setOn ( bool aTrueFalse ) ◆ setPrintResultFiles() void OpenSim::Analysis::setPrintResultFiles ( bool aToWrite ) inline ◆ setStartTime() void OpenSim::Analysis::setStartTime ( double aStartTime ) ◆ setStatesStore() virtual void OpenSim::Analysis::setStatesStore ( const Storage & aStatesStore ) virtual set states storage for analysis. Parameters aStatesStore ◆ setStepInterval() void OpenSim::Analysis::setStepInterval ( int aStepInterval ) ◆ setStorageInterval() void OpenSim::Analysis::setStorageInterval ( int aInterval ) ◆ step() virtual int OpenSim::Analysis::step ( const SimTK::State & s , int stepNumber ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . Member Data Documentation ◆ _endTime double& OpenSim::Analysis::_endTime protected ◆ _endTimeProp PropertyDbl OpenSim::Analysis::_endTimeProp protected End time for the callback in normalized time. ◆ _model Model * OpenSim::Analysis::_model ◆ _on bool& OpenSim::Analysis::_on protected ◆ _onProp PropertyBool OpenSim::Analysis::_onProp protected On, off flag. ◆ _printResultFiles bool OpenSim::Analysis::_printResultFiles protected ◆ _startTime double& OpenSim::Analysis::_startTime protected ◆ _startTimeProp PropertyDbl OpenSim::Analysis::_startTimeProp protected Start time for the callback in normalized time. ◆ _statesStore const Storage * OpenSim::Analysis::_statesStore ◆ _stepInterval int& OpenSim::Analysis::_stepInterval protected ◆ _stepIntervalProp PropertyInt OpenSim::Analysis::_stepIntervalProp protected Step interval. ◆ _storageList ArrayPtrs < Storage > OpenSim::Analysis::_storageList protected The documentation for this class was generated from the following file: OpenSim/Simulation/Model/Analysis.h OpenSim Analysis Generated on Thu Mar 21 2024 15:02:49 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "4f906197-38aa-4143-ac6d-d295cdfc5e9e",
    "document_id": "doc_183",
    "content": "◆ _startTimeProp PropertyDbl OpenSim::Analysis::_startTimeProp protected Start time for the callback in normalized time. ◆ _statesStore const Storage * OpenSim::Analysis::_statesStore ◆ _stepInterval int& OpenSim::Analysis::_stepInterval protected ◆ _stepIntervalProp PropertyInt OpenSim::Analysis::_stepIntervalProp protected Step interval. ◆ _storageList ArrayPtrs < Storage > OpenSim::Analysis::_storageList protected The documentation for this class was generated from the following file: OpenSim/Simulation/Model/Analysis.h OpenSim Analysis Generated on Thu Mar 21 2024 15:02:49 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  }
]