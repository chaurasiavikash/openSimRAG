[
  {
    "id": "ed94aa95-0c0f-4303-b76b-2560a7ee88b1",
    "document_id": "doc_89",
    "content": "Volumetric & Time Series Models of Muscle Deformation Share Follow Project Follow publicly Follow privately Unfollow See followers (15) List Map More info 1617 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News The OpenArm data sets are designed to enable study of force- and kinematic-induced muscle deformation for applications in biomechanics research, computer graphics, and assistive device development. **NEW:** The OpenArm Multisensor 2.0 data set contains new time series of ultrasound-measured brachioradialis deformation, surface electromyography (sEMG)-measured activation, force, and goal trajectory data, for various force-, deformation-, and activation-based trajectory tracking tasks, under refined conditions from those of the 1.0 data set. Also included are all analysis, real-time muscle deformation tracking, and display code. The OpenArm Multisensor 1.0 data set contains time series cross-sectional ultrasound scans of the brachioradialis muscle under variable elbow loading, alongside corresponding surface electromyography (sEMG), acoustic myography (AMG), and force data. The OpenArm 1.0 and 2.0 data sets encompass factorial sets of volumetric scans of the arm, generated using ultrasound and motion capture, that allow for analysis of both force- and configuration-associated muscle deformation. We invite anyone in the research community to use the OpenArm and OpenArm Multisensor data sets to validate existing muscle deformation models or to devise new ones. Full details can be found in the following papers: Laura A. Hallock, Bhavna Sud, Chris Mitchell, Eric Hu, Fayyaz Ahamed, Akash Velu, Amanda Schwartz, and Ruzena Bajcsy. \"Toward Real-Time Muscle Force Inference and Device Control via Optical-Flow-Tracked Muscle Deformation.\" In IEEE Transactions on Neural Systems and Rehabilitation Engineering (TNSRE). IEEE, 2021. (Under review.) Laura Hallock, Akash Velu, Amanda Schwartz, and Ruzena Bajcsy. \"Muscle deformation correlates with output force during isometric contraction.\" In IEEE RAS/EMBS International Conference on Biomedical Robotics & Biomechatronics (BioRob). IEEE, 2020. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/hallock2020biorob .) Yonatan Nozik*, Laura A. Hallock*, Daniel Ho, Sai Mandava, Chris Mitchell, Thomas Hui Li, and Ruzena Bajcsy, \"OpenArm 2.0: Automated Segmentation of 3D Tissue Structures for Multi-Subject Study of Muscle Deformation Dynamics,\" in International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC), IEEE, 2019. *Equal contribution. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/nozikhallock2019embc .) Laura Hallock, Akira Kato, and Ruzena Bajcsy. \"Empirical quantification and modeling of muscle deformation: Toward ultrasound-driven assistive device control.\" In IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2018. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/hallock2018icra .) This project is currently in development in the Human-Assistive Robotic Technologies (HART) Lab at the University of California, Berkeley ( http://hart.berkeley.edu ). 16,401 downloads 2 forum posts 15 followers Last updated Mar 28, 2025 Project Statistics Suggest Idea Laura Hallock Christopher",
    "metadata": {
      "source": "https://simtk.org/projects/openarm",
      "title": "SimTK: OpenArm: Volumetric & Time Series Models of Muscle Deformation: Project Home",
      "section": "OpenArm:",
      "hierarchy": [
        "projects",
        "openarm"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "33a02bac-b99d-4cfa-a6cb-2bff9166d0e8",
    "document_id": "doc_89",
    "content": "of Muscle Deformation Dynamics,\" in International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC), IEEE, 2019. *Equal contribution. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/nozikhallock2019embc .) Laura Hallock, Akira Kato, and Ruzena Bajcsy. \"Empirical quantification and modeling of muscle deformation: Toward ultrasound-driven assistive device control.\" In IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2018. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/hallock2018icra .) This project is currently in development in the Human-Assistive Robotic Technologies (HART) Lab at the University of California, Berkeley ( http://hart.berkeley.edu ). 16,401 downloads 2 forum posts 15 followers Last updated Mar 28, 2025 Project Statistics Suggest Idea Laura Hallock Christopher Mitchell Bhavna Sud Akash Velu Eric Hu Fayyaz Ahamed Yonatan Nozik Akira Kato Gregorij Kurillo Jaeyun Seo Daniel Ho News Links updated/fixed for all data downloads! Jan 23, 2023 We apologize to those having download issues over the last few weeks — our old Box hosting solution was no longer viable, so files have been moved to Google Drive. OpenArm Multisensor data set and muscle contour tracking code released + slated for presentation at ASB & BioRob! Jul 24, 2020 Our new time series muscle force/deformation/sEMG data set, OpenArm Multisensor, has now been released to the OpenArm database! OpenArm 2.0 data set released + scheduled for presentation at EMBC Berlin! Jul 16, 2019 The OpenArm 2.0 muscle deformation data set has now been released to SimTK, and is scheduled for presentation at EMBC 2019 in Berlin! First OpenArm 3D muscle deformation data set released! Nov 29, 2018 The first generation of the OpenArm data set has now been ported from our lab website to the SimTK community! See all News Downloads Download our time series and volumetric muscle deformation data sets here, as well as tracking and segmentation code! See all Downloads Related Projects The project owner recommends the following other projects: OpenRobotRehab: Data Sets & Platforms for Robot-Mediated Rehabilitation People also viewed Calibrated EMG-Informed Neuromusculoskeletal... Muscle Wrapping Over Multiple Smooth Surfaces OpenSim plugin to extract the muscle lines of action Fiber Tractography for Finite-Element Modeling of... Neuromusculoskeletal Modeling (NMSM) Pipeline Grand Challenge Competition to Predict In Vivo... Lower Limb Model 2010 OpenSim plugin to optimize musculotendon... See all Multidimensional Cubic B-Spline Muscle contributions to mass center... Muscle-actuated Simulation of Human Running How much muscle strength is required to walk in... Model of the Scapulothoracic Joint Hip Musculoskeletal Model London Lower Limb Model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/openarm",
      "title": "SimTK: OpenArm: Volumetric & Time Series Models of Muscle Deformation: Project Home",
      "section": "OpenArm:",
      "hierarchy": [
        "projects",
        "openarm"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ca9e7d22-4af9-4d63-bc50-6a7da73f36d7",
    "document_id": "doc_89",
    "content": "from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/openarm",
      "title": "SimTK: OpenArm: Volumetric & Time Series Models of Muscle Deformation: Project Home",
      "section": "OpenArm:",
      "hierarchy": [
        "projects",
        "openarm"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "efb1ad07-87e3-482b-9f5b-0fb5daf627a9",
    "document_id": "doc_145",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53088695/Examples+and+Tutorials",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53088695",
        "Examples+and+Tutorials"
      ],
      "content_type": "tutorial",
      "position": 0,
      "tags": [
        "tutorial",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a6b4df8c-690b-4410-ac7f-889230bb5961",
    "document_id": "doc_133",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089669/Residual+Reduction+Algorithm",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089669",
        "Residual+Reduction+Algorithm"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "abef3e11-476f-43f8-ac73-590fb8845d0e",
    "document_id": "doc_98",
    "content": "Multidimensional Cubic B-Spline Share Follow Project Follow publicly Follow privately Unfollow See followers (3) List Map More info 891 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provide a software for fast estimation of lengths and three-dimensional moment arms for musculotendon actuators. Download Latest Releases mcbs: .zip This project presents a C++ implementation of multidimensional cubic B-spline for the fast estimation of lengths and three-dimensional moment arms for musculotendon actuators. At first, an OpenSim musculoskeletal model is used to establish the length of each musculotendon actuator for different generalized coordinates (joint angles). Then, multidimensional spline function is computed to fit the previous data. Muscle moment arms are obtained by differentiating the musculotendon length spline function with respect to the generalized coordinate of interest. 77 downloads 1 forum posts 3 followers Last updated Jul 1, 2019 Project Statistics Join Mailing Lists Suggest Idea Monica Reggiani Massimo Sartori People also viewed OpenArm: Volumetric & Time Series Models of Muscle... Muscle contributions to mass center... Are subject-specific musculoskeletal... Simulations of Crouch Gait Spasticity model in OpenSim Evertor and invertor muscle co-activation... Grand Challenge Competition to Predict In Vivo... An OpenSim plugin to minimize joint reaction forces and... See all Model of the Scapulothoracic Joint Below-Knee Amputee Model 3-D Musculoskeletal Model of the Chimpanzee Pelvis... Efficient Methods for Multi-Domain Biomechanical... Drop Landing Model MB Knee: Multibody Models of the Human Knee Optimal Control of Musculoskeletal Movement Using... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/mcbs/",
      "title": "SimTK: Multidimensional Cubic B-Spline: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "mcbs"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "513edbcb-b33a-4f2d-a888-9ec10c534c48",
    "document_id": "doc_25",
    "content": "SimTK Communities Communities are collections of projects that automatically display the latest news, publications, and discussions happening among those projects. Explore communities Request a community SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/aboutCommunities.php",
      "title": "SimTK",
      "section": "",
      "hierarchy": [
        "aboutCommunities.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5534de16-4e82-4f85-ab49-da45e000bdbf",
    "document_id": "doc_14",
    "content": "Network Modeling and Analysis Network models capture the relationship between different components, proving useful in a range of applications including systems biology and molecular dynamics simulation analysis. Featured projects Recently updated projects total projects 15 projects with downloads Search projects in this category News New file added: Emma-1.4.zip EMMA - Markov Model Algorithms Jun 11, 2013 MSMBuilder 1.0 released MSMBuilder Dec 14, 2010 Greg Bowman awarded the 2010 Kuhn Paradigm Shift Award MSMBuilder Mar 29, 2010 Publications Predicting walking response to ankle exoskeletons using data-driven models Catherine A. Rivet , Ariel S. Kniss-James , Margaret A. Gran, Anish Potnis, Abby Hill, Hang Lu, Melissa L. Kemp. \"Calcium Dynamics of Ex Vivo Long-Term Cultured CD8+ T Cells Are Regulated by Changes in Redox Metabolism\". PLoS One: e0159248, 2016. HTMD: High-Throughput Molecular Dynamics for Molecular Discovery Discussion Data-driven prediction of gait with ankle exoskeletons Public Forum Data-driven prediction of gait with ankle exoskeletons Dec 12, 2020 Usings STAMS on RNA-seq data genes with log fold change values and p values STAMS: STRING-Assisted Module Search for Genome Wide Association Studies Jul 10, 2019 Issue with msmbuilder Cluster.py MSMBuilder Feb 11, 2019 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=426&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "698bd753-ce72-4fb4-8ff1-cc1c8de4a324",
    "document_id": "doc_32",
    "content": "Reset your password Create new account Resend confirmation email to a pending account SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/account/login.php?return_to=%2Fprojects%2Fopensim",
      "title": "SimTK: Login",
      "section": "Login Name: Password:",
      "hierarchy": [
        "account",
        "login.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0da46f02-d617-4b89-8c95-eb509979bcb1",
    "document_id": "doc_118",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090101/Navigator+Window",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090101",
        "Navigator+Window"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "94a10b96-cb85-4a1a-bfca-815cb0c1455d",
    "document_id": "doc_109",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Downloads Follow OpenSim OpenSim is a freely available software system that allows you to build, exchange, and analyze musuloskeletal models and dynamic simulations of movement. OpenSim 4.5 Jan 10, 2024 We are pleased to announce the following new features, bug fixes, and other improvements in OpenSim 4.5. The new software includes improvements to the look and feel of the GUI, published Conda and Docker packages, additional Moco functionality, and the introduction of FunctionBasedPath for function-based muscle wrapping. We also now distribute a version of the Rajagopal model with the OpenSim resources folder included in the OpenSim application. Release notes are provided below along with links to full change logs for more detail. Notes View License Download Links OpenSim-4.5-win64.exe Mar 29, 2024 283 MB Windows Application/binary Installer for OpenSim 4.5 application on Windows (Only x64 Windows machines are supported) OpenSim-4.5-Mac.pkg Mar 29, 2024 290 MB Mac OS X Application/binary Installer for OpenSim 4.5 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 26, 2024 Brief summary of new features available in 4.5 and notes on how to upgrade Support Site (URL) Mar 26, 2024 Browse and search all OpenSim resources User's Guide (URL) Mar 26, 2024 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Mar 26, 2024 Quick link to the Online Examples and Tutorials Page PLEASE CITE THESE PAPERS Delp, S.L., Anderson, F.C., Arnold, A.S., Loan, P., Habib, A., John, C.T., Guendelman, E., Thelen, D.G. OpenSim: Open-source software to create and analyze dynamic simulations of movement. IEEE Transactions on Biomedical Engineering, 54(11), pp 1940-1950. (2007) View Seth, A., Hicks J.L., Uchida, T.K., Habib, A., Dembia, C.L., Dunne, J.J., Ong, C.F., DeMers, M.S., Rajagopal, A., Millard, M., Hamner, S.R., Arnold, E.M., Yong, J.R., Lakshmikanth, S.K., Sherman, M.A., Ku, J.P., Delp, S.L. OpenSim: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement. PLoS Computational Biology, 14(7). (2018) View ADDITIONAL PAPERS Christopher L Dembia, Nicholas A Bianco, Antoine Falisse, Jennifer L Hicks, Scott L Delp. OpenSim Moco: Musculoskeletal optimal control. PLoS Computational Biology 16(12): e1008493 (2020) View Previous Releases OpenSim 4.4 Jul 24, 2022 Update to OpenSim and Moco software including improvements to the look and feel of the GUI visualizer, additional Moco functionality with MocoOutputGoals, and performance improvements for models with muscle wrapping and important bug fixes.",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b13cdf06-f9d6-40dc-a64d-89cbe046d135",
    "document_id": "doc_109",
    "content": "Arnold, E.M., Yong, J.R., Lakshmikanth, S.K., Sherman, M.A., Ku, J.P., Delp, S.L. OpenSim: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement. PLoS Computational Biology, 14(7). (2018) View ADDITIONAL PAPERS Christopher L Dembia, Nicholas A Bianco, Antoine Falisse, Jennifer L Hicks, Scott L Delp. OpenSim Moco: Musculoskeletal optimal control. PLoS Computational Biology 16(12): e1008493 (2020) View Previous Releases OpenSim 4.4 Jul 24, 2022 Update to OpenSim and Moco software including improvements to the look and feel of the GUI visualizer, additional Moco functionality with MocoOutputGoals, and performance improvements for models with muscle wrapping and important bug fixes. New Conda and Docker packages are made available as well. Notes View License Download Links OpenSim-4.4-win64.exe Jul 28, 2022 278 MB Windows Application/binary Installer for OpenSim 4.4 application on Windows (Only x64 Windows machines are supported) OpenSim-4.4-Mac.pkg Jul 28, 2022 277 MB Mac OS X Application/binary Installer for OpenSim 4.4 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Jul 24, 2022 Brief summary of new features available in 4.4 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Jul 24, 2022 Quick link to the Online Examples and Tutorials Page OpenSim 4.3 Aug 22, 2021 Release 4.3 of OpenSim software, including latest functionality and examples from Moco for performing IMU and EMG tracking, introduction of the IMU Component and IMUDataReporter, along with a variety of bug-fixes and upgrades. Notes View License Download Links OpenSim-4.3-win64.exe Aug 31, 2021 251 MB Windows Application/binary Installer for OpenSim 4.3 application on Windows (Only x64 Windows machines are supported) OpenSim-4.3-Mac.pkg Aug 31, 2021 274 MB Mac OS X Application/binary Installer for OpenSim 4.3 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 14, 2021 Brief summary of new features available in 4.2 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Feb 07, 2020 Quick link to the Online Examples and Tutorials Page OpenSim 4.2 Mar 14, 2021 An upgrade with new features for working with Inertial Measurement Unit (IMU) Data, integration and cross-compatibility with OpenSim-Moco, along with several bug fixes and enhancements. Notes View License Download Links OpenSim-4.2-win64.exe Mar 16, 2021 201 MB Windows Application/binary Installer for OpenSim 4.2 application on Windows (Only x64 Windows machines are supported) OpenSim-4.2-mac.pkg Mar 18, 2021 251 MB Mac OS X Application/binary Installer for OpenSim 4.2 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 14, 2021 Brief summary of new features available in 4.2 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9225ffaf-c03b-4570-9c94-af7c52451d07",
    "document_id": "doc_109",
    "content": "with several bug fixes and enhancements. Notes View License Download Links OpenSim-4.2-win64.exe Mar 16, 2021 201 MB Windows Application/binary Installer for OpenSim 4.2 application on Windows (Only x64 Windows machines are supported) OpenSim-4.2-mac.pkg Mar 18, 2021 251 MB Mac OS X Application/binary Installer for OpenSim 4.2 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 14, 2021 Brief summary of new features available in 4.2 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Feb 07, 2020 Quick link to the Online Examples and Tutorials Page OpenSim 4.1 Feb 07, 2020 An upgrade with support for inverse kinematics from IMU data, along with several bug fixes and enhancements. Notes View License Download Links OpenSim-4.1-win64.exe Feb 04, 2020 223 MB Windows Application/binary Installer for OpenSim 4.1 application on Windows (Only x64 Windows machines are supported) OpenSim-4.1-mac.pkg Feb 04, 2020 244 MB Mac OS X Application/binary Installer for OpenSim 4.1 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Feb 07, 2020 Brief summary of new features available in 4.0 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Feb 07, 2020 Quick link to the Online Examples and Tutorials Page OpenSim 4.0 Nov 13, 2018 OpenSim 4.0 includes a brand new visualizer, compatibility with both Mac and Windows, and improvements to the scripting and API interfaces for users designing their own biomechanics studies. We've also added support for reading in C3D data. View License Download Links Windows Installer (64-bit) OpenSim-4.0-win64.exe Nov 13, 2018 220 MB Windows Application/binary Installer for OpenSim 4.0 application on Windows. Only x64 Windows machines are supported. Mac OS X Installer OpenSim-4.0-mac.pkg Nov 13, 2018 269 MB Mac OS X Application/binary Installer for OpenSim 4.0 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features and Upgrade Notes New Features List (URL) Nov 13, 2018 Brief summary of new features available in 4.0 OpenSim 4.0 Release Notes (URL) Nov 13, 2018 Summary of how to upgrade to 4.0 Support Site Support Site (URL) Nov 13, 2018 Browse and search all OpenSim resources Quick Links User's Guide (URL) Nov 13, 2018 Quick link to the Online OpenSim 4.0 User's Guide. Note we are still making updates for 4.0. Examples and Tutorials (URL) Nov 13, 2018 Quick link to the Online Examples and Tutorials Page OpenSim 3.3 Jul 02, 2015 This release includes new examples and scripts and addresses several bugs and issues reported by our users, particularly in Static Optimization and Scaling. Notes View License Download Links Windows Installer (64-bit) OpenSim-3.3.0-win64VC13P.exe Jan 22, 2016 142 MB Windows Application/binary Installer for OpenSim 3.3 application on Windows. Use on x64 Windows",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b1945c61-fdc6-46cb-b17d-1f628bcdfbc0",
    "document_id": "doc_109",
    "content": "search all OpenSim resources Quick Links User's Guide (URL) Nov 13, 2018 Quick link to the Online OpenSim 4.0 User's Guide. Note we are still making updates for 4.0. Examples and Tutorials (URL) Nov 13, 2018 Quick link to the Online Examples and Tutorials Page OpenSim 3.3 Jul 02, 2015 This release includes new examples and scripts and addresses several bugs and issues reported by our users, particularly in Static Optimization and Scaling. Notes View License Download Links Windows Installer (64-bit) OpenSim-3.3.0-win64VC13P.exe Jan 22, 2016 142 MB Windows Application/binary Installer for OpenSim 3.3 application on Windows. Use on x64 Windows machines by default Windows Installer (32-bit) OpenSim-3.3.0-win32VC13P.exe Aug 24, 2015 130 MB Windows Application/binary Installer for OpenSim 3.3 application on Windows (built with VS2013 Pro, 32 bit) Documentation Links New Features and Upgrade Notes New Features List (URL) Jul 09, 2015 List of new features available in 3.3 OpenSim 3.3 Release Notes (URL) Jul 09, 2015 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) May 22, 2014 Browse and search all OpenSim resources Quick Links User's Guide (URL) Jul 10, 2015 Quick link to the Online OpenSim User''s Guide Developer's Guide (URL) Jul 10, 2015 Quick link to the Online OpenSim Developer''s Guide Examples and Tutorials (URL) Mar 03, 2014 Quick link to the Online Examples and Tutorials Page OpenSim 3.2 Feb 16, 2014 OpenSim 3.2 includes an improved scripting interface, accessible through the Graphical User Interface (GUI), Matlab, and now Python. We also added new visualization capabilities and usability improvements in the OpenSim application. As with every release, we've also implemented performance improvements and bug fixes. Notes View License Download Links Windows Installer OpenSim-3.2.0-win32VC10P.exe Mar 07, 2014 108 MB Windows Application/binary Default installer for OpenSim 3.2 application on Windows (built with VS2010 Pro, 32 bit) Advanced: Windows Installer (64-bit) OpenSim-3.2.0-win64VC10P.exe Apr 29, 2014 126 MB Windows Application/binary Alternate installer for OpenSim 3.2 (built with VS2010 Pro, 64 bit). Generally recommended only for 64-bit Matlab Users OpenSim-3.2.0-win64VC13P.exe May 15, 2014 133 MB Windows Application/binary Installer built with VisualStudio 2013, x64 use only to do API programming in VS 2013 Advanced: Windows Installer (32-bit) OpenSim-3.2.0-win32VC13P.exe Jun 11, 2014 109 MB Windows Application/binary OpenSim 3.2 32-bit built with VisualStudio 2013 Pro Documentation Links New Features and Upgrade Notes New Features List (URL) Mar 04, 2014 List of new features available in 3.2 OpenSim 3.2 Release Notes (URL) Mar 03, 2014 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) May 22, 2014 Browse and search all OpenSim resources Quick Links User's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 03, 2014 Quick link to the Online Examples and Tutorials Page OpenSim 3.1 Jul 22, 2013 OpenSim 3.1 includes expanded scripting capabilities, enhancements to the graphical user interface, many new modeling components, new examples, and important bug fixes. View License",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 3,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "59f91445-4f27-4fe6-8214-d1e6aab769b6",
    "document_id": "doc_109",
    "content": "Mar 03, 2014 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) May 22, 2014 Browse and search all OpenSim resources Quick Links User's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 03, 2014 Quick link to the Online Examples and Tutorials Page OpenSim 3.1 Jul 22, 2013 OpenSim 3.1 includes expanded scripting capabilities, enhancements to the graphical user interface, many new modeling components, new examples, and important bug fixes. View License Download Links Windows Installers (32-bit) OpenSim-3.1.0-win32-VC10.exe Jul 23, 2013 133 MB Windows Application/binary Default installer for OpenSim application on Windows. (Developers and Plugin Users - this release includes libraries built with VC10 Pro) OpenSim-3.1.0-win32-VC8.exe Jul 23, 2013 131 MB Windows Application/binary Alternate installer for OpenSim application on Windows, geared for developers and plugin users with VC8 Pro. Windows Installer (64-bit) OpenSim-3.1.0-win64-VC10.exe Jul 23, 2013 158 MB Windows Application/binary OpenSim 3.1.0 64-bit application installer (built with VC10P) Linux Binaries (64-bit) OpenSim-3.1-Linux-x64.tar.gz Jul 25, 2013 52 MB Linux Application/binary OpenSim 3.1 Linux distribution/binaries (No GUI) Models and Examples Models.zip Jul 26, 2013 36 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.1, in case you've overwritten any of the files in your installation. Documentation Links New Features and Upgrade Notes OpenSim 3.1 Release Notes (URL) Jul 22, 2013 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) Jul 22, 2013 Browse and search all OpenSim resources Quick Links User's Guide (URL) Jul 22, 2013 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Jul 22, 2013 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Jul 22, 2013 Quick link to the Online Examples and Tutorials Page OpenSim 3.0.1 Mar 27, 2013 OpenSim 3.0.1 includes improved scripting functionality, new examples, and several bug fixes, in addition to all of the new features of OpenSim 3.0. View License Download Links Windows OpenSim-3.0.1-win32VC10P.exe Mar 27, 2013 126 MB Windows Application/binary Default installer for OpenSim application on Windows. (Developers and Plugin Users - this release includes libraries built with VC10 Pro) OpenSim-3.0.1-win32VC8P.exe Mar 27, 2013 124 MB Windows Application/binary Alternate installer for OpenSim application on Windows, geared for developers and plugin users with VC8 Pro. OpenSim-3.0.1-Linux64.tar.gz Mar 28, 2013 53 MB Linux Application/binary OpenSim 3.0 Linux distribution/binaries (No GUI) Documentation Links Support and Documentation Support Site (URL) Mar 27, 2013 Browse and search all OpenSim Resources OpenSim 3.0.1 Release Notes (URL) Mar 27, 2013 List of new examples, enhancements, and bug fixes. Quick Links User's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 27, 2013 Quick link to the Online Examples and Tutorials Page OpenSim 3.0 Oct 18, 2012 OpenSim 3.0 is our biggest upgrade to-date. We've",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 4,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c522190f-7260-4bcf-a4aa-c273aaef3746",
    "document_id": "doc_109",
    "content": "Linux Application/binary OpenSim 3.0 Linux distribution/binaries (No GUI) Documentation Links Support and Documentation Support Site (URL) Mar 27, 2013 Browse and search all OpenSim Resources OpenSim 3.0.1 Release Notes (URL) Mar 27, 2013 List of new examples, enhancements, and bug fixes. Quick Links User's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 27, 2013 Quick link to the Online Examples and Tutorials Page OpenSim 3.0 Oct 18, 2012 OpenSim 3.0 is our biggest upgrade to-date. We've added new features, including live model editing and scripting in Matlab and the GUI. We've enhanced some of the core existing OpenSim functionality, including our muscle models and tools for visualizing forces and other motion data. OpenSim 3.0 also includes a host of usability improvements for beginning GUI users and advanced API developers. See the New Features link below for a full list of the improvements. View License Download Links Windows OpenSim-3.0.0-win32VC10P_u1.exe Feb 26, 2013 126 MB Windows Application/binary Default installer for OpenSim application on Windows. (Developers and Plugin Users - this release includes libraries built with VC10 Pro) OpenSim-3.0.0-win32VC8P_u1.exe Feb 26, 2013 123 MB Windows Application/binary Alternate installer for OpenSim application on Windows, geared for developers and plugin users with VC8 Pro. Linux OpenSim-3.0.0-Linux64.tar.gz Jan 15, 2013 62 MB Linux Application/binary OpenSim 3.0 Linux distribution/binaries (No GUI) Documentation Links Support and Documentation Support Site (URL) Apr 09, 2012 Browse and search all OpenSim Resources Quick Links New Features and Upgrade Notes (URL) Oct 18, 2012 New features and notes for upgrading to OpenSim 3.0 User's Guide (URL) Oct 18, 2012 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Apr 09, 2012 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Apr 09, 2012 Quick link to the Online Examples and Tutorials Page Bugs and Updates (URL) Oct 25, 2012 A list of any known bugs and any software, model, or example updates since release. OpenSim 2.4 Oct 07, 2011 OpenSim 2.4 includes faster and more robust tools for Inverse Dynamics and Inverse Kinematics, new visualization tools, enhanced access for API users, and several usability improvements. In addition, we’ve verified that the results of Computed Muscle Control now match or exceed the quality of those achieved in OpenSim version 1.9.1. We've added documentation of Induced Acceleration Analysis, application of external loads and several examples. Please see the release notes for more details. Notes View License Download Links Windows OpenSim-2.4.0-win32VC9P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all non-API users and API users with VC9 Pro OpenSim-2.4.0-win32VC10E.exe Oct 10, 2011 77 MB Windows Application/binary Installer for API users with VC10 Express. OpenSim-2.4.0-win32VC8P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all API users with VC8 Pro. Linux OpenSim240-Linux32.tar.gz Nov 01, 2011 64 MB Linux Application/binary API distribution on Linux (32 bit) (No GUI) Mac OS X OpenSim240-Mac32.tar.gz Nov 01, 2011 70 MB",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 5,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f1e63bd0-88a1-41d2-b18a-83bbf68ee9cb",
    "document_id": "doc_109",
    "content": "Induced Acceleration Analysis, application of external loads and several examples. Please see the release notes for more details. Notes View License Download Links Windows OpenSim-2.4.0-win32VC9P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all non-API users and API users with VC9 Pro OpenSim-2.4.0-win32VC10E.exe Oct 10, 2011 77 MB Windows Application/binary Installer for API users with VC10 Express. OpenSim-2.4.0-win32VC8P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all API users with VC8 Pro. Linux OpenSim240-Linux32.tar.gz Nov 01, 2011 64 MB Linux Application/binary API distribution on Linux (32 bit) (No GUI) Mac OS X OpenSim240-Mac32.tar.gz Nov 01, 2011 70 MB Mac OS X Application/binary API distribution on Mac OS X (No GUI) OpenSim240-Mac32_WithSimtkLapack.tar.gz Jan 18, 2012 70 MB Mac OS X Application/binary OpenSim2.4 Build on Mac with simtkLapack (for use with osx 10.7) Documentation Links Support and Documentation Support Site (URL) Apr 09, 2012 Browse and search all OpenSim Resources Quick Links New Features and Upgrade Notes (URL) Oct 18, 2012 New features and notes for upgrading to OpenSim 2.4 User's Guide (URL) Oct 18, 2012 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Oct 18, 2012 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Oct 18, 2012 Quick link to the Online Examples and Tutorials Page Example and Tutorial Files subject01_walk1_grf.xml Nov 21, 2011 Missing file from Tutorial 3 (VC8Pro, VC10E installers) StaticOpt_JointReactExample.zip Oct 28, 2011 Files for an example using Static Optimization and Joint Reaction Analysis OpenSim 2.2.1 Apr 03, 2011 A new release of the OpenSim software, includes many enhancements, fixes and example setup files for Static Optimization and Joint Reaction analyses Notes View License Download Links Release 2.2.1 OpenSim-2.2.1-win32-VC8P.exe Apr 18, 2011 69 MB Windows Application/binary Release 2.2.1 (VC8 Pro Windows Libraries) - Use this installer unless you a) have VC9Pro & b) use the API OpenSim-2.2.1-win32-VC9P.exe Apr 08, 2011 68 MB Windows Application/binary Release 2.2.1 (VC9 Pro Windows Libraries) opensim-2.2.1-Linux32-API.tar.gz Apr 08, 2011 39 MB Linux Application/binary Release 2.2.1 (API distribution on Linux) opensim-2.2.1-Mac32-API.tar.gz Apr 12, 2011 42 MB Mac OS X Application/binary OpenSim 2.2.1 headers and libraries Mac32 bit (API only) SO_JR_example.zip Apr 08, 2011 1 MB Any Data/images/video Setup and data files for StaticOptimization, JointReaction Demo Documentation Links OpenSim_UsersGuide2.2.pdf Nov 25, 2010 Updated User Guide for release 2.2 OpenSimTutorial1.pdf Nov 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Nov 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Nov 10, 2010 Tutorial 3 OpenSim_DevelopersGuide.pdf Nov 14, 2010 Developers Guide updated for version 2.2 OpenSim 2.2 Dec 01, 2010 An upgrade to OpenSim that includes many enhancements to the GUI, improvements to the API and several bug fixes. Please see release notes for details. Notes View License Download Links Release 2.2.0 OpenSim-2.2.0-win32-VC8P.exe Dec 01, 2010 64 MB Windows Application/binary Release 2.2.0 (VC8 Pro Windows Libraries) - If not API user, use this installer OpenSim-2.2.0-win32-VC9E.exe Nov 10, 2010 64 MB Windows Application/binary Distribution including (Release) libraries for VC9 Express opensim-2.2.0-Mac32-API.tar.gz Dec 01, 2010 42 MB Mac OS X Application/binary OpenSim 2.2.0 headers and libraries Mac32",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 6,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8303544c-99e7-4dcb-91b3-303c26489bf5",
    "document_id": "doc_109",
    "content": "OpenSim_DevelopersGuide.pdf Nov 14, 2010 Developers Guide updated for version 2.2 OpenSim 2.2 Dec 01, 2010 An upgrade to OpenSim that includes many enhancements to the GUI, improvements to the API and several bug fixes. Please see release notes for details. Notes View License Download Links Release 2.2.0 OpenSim-2.2.0-win32-VC8P.exe Dec 01, 2010 64 MB Windows Application/binary Release 2.2.0 (VC8 Pro Windows Libraries) - If not API user, use this installer OpenSim-2.2.0-win32-VC9E.exe Nov 10, 2010 64 MB Windows Application/binary Distribution including (Release) libraries for VC9 Express opensim-2.2.0-Mac32-API.tar.gz Dec 01, 2010 42 MB Mac OS X Application/binary OpenSim 2.2.0 headers and libraries Mac32 bit (API only) opensim-2.2.0-Linux32-API.tar.zip Dec 01, 2010 39 MB Linux Application/binary OpenSim 2.2 headers and 32 bit libs built on linux (API only) k12example.zip Dec 13, 2010 13 KB Any Data/images/video Example .oscript file to create a simplified GUI panel Documentation Links OpenSim_UsersGuide2.2.pdf Nov 25, 2010 Updated User Guide for release 2.2 OpenSimTutorial1.pdf Nov 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Nov 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Nov 10, 2010 Tutorial 3 OpenSim_DevelopersGuide.pdf Nov 14, 2010 Developers Guide updated for version 2.2 K12InstallInstructions.txt Dec 13, 2010 Installation instructions for the K12 module OpenSim 2.0.2 Apr 23, 2010 An update to version 2.0.1 that includes some important bug-fixes, updated models for the tutorials and new Model Components including a Bushing-Force and Spring-GeneralizedForce. Notes View License Download Links OpenSim-2.0.2-win32-VC8P02.exe Apr 27, 2010 64 MB Windows Application/binary Build 2.0.2 (includes libraries built using VC8) Documentation Links GettingDataIntoOpenSim.mov May 21, 2010 Getting 3D motion capture data into OpenSim OpenSimTutorial1.pdf Feb 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Feb 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Feb 10, 2010 Tutorial 3 OpenSimWindows7Instructions.pdf Feb 10, 2010 Instructions for users on Windows7 OpenSim_UsersGuide.pdf Feb 11, 2010 Updated User's Guide for the OpenSim Application GUI OpenSim_DevelopersGuide.pdf Apr 23, 2010 Developers' Guide for writing code that uses OpenSim API OpenSim 2.0.1 Feb 09, 2010 First public release of the OpenSim modeling API. OpenSim is now fully compliant with the SimTK architecture. Contact functionality has been introduced as well as a faster and more robust integrator from SimTK. A set of programming examples utilizing the API, a Developers' Guide, and Doxygen documentation are also included. The API allows users to create their own modeling components programmatically including Actuators, Controllers and Analyses, perform Optimization studies and embed OpenSim into their own environment. This release also includes enhancements to support multiple external forces, and an updated User's Guide. Notes View License Download Links OpenSim-2.0.1-win32-VC8P.exe Feb 09, 2010 64 MB Windows Application/binary Build 2.0.1 (using VC8, relevent only to API) Documentation Links OpenSimWindows7Instructions.pdf Feb 10, 2010 Instructions for users on Windows7 OpenSimTutorial1.pdf Feb 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Feb 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Feb 10, 2010 Tutorial 3 OpenSim_UsersGuide.pdf Feb 11, 2010 Updated User's Guide for the OpenSim Application GUI OpenSim_DevelopersGuide.pdf Feb 11, 2010 Developers' Guide for writing code that uses OpenSim API OpenSim 2.0 Dec 31, 2009 First public release of the OpenSim modeling API. OpenSim is now fully compliant with the SimTK architecture. Contact functionality has",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 7,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "651ca572-fa22-4790-8979-ded38bdcc8ac",
    "document_id": "doc_109",
    "content": "Notes View License Download Links OpenSim-2.0.1-win32-VC8P.exe Feb 09, 2010 64 MB Windows Application/binary Build 2.0.1 (using VC8, relevent only to API) Documentation Links OpenSimWindows7Instructions.pdf Feb 10, 2010 Instructions for users on Windows7 OpenSimTutorial1.pdf Feb 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Feb 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Feb 10, 2010 Tutorial 3 OpenSim_UsersGuide.pdf Feb 11, 2010 Updated User's Guide for the OpenSim Application GUI OpenSim_DevelopersGuide.pdf Feb 11, 2010 Developers' Guide for writing code that uses OpenSim API OpenSim 2.0 Dec 31, 2009 First public release of the OpenSim modeling API. OpenSim is now fully compliant with the SimTK architecture. Contact functionality has been introduced as well as a faster and more robust integrator from SimTK. A set of programming examples utilizing the API, a Developers' Guide, and Doxygen documentation are also included. The API allows users to create their own modeling components programmatically including Actuators, Controllers and Analyses, perform Optimization studies and embed OpenSim into their own environment. No GUI changes in this release. Notes View License Download Links OpenSim-2.0.0-win32_VC8.exe Dec 31, 2009 64 MB Windows Application/binary Distribution including headers and libs built with VisualStudio 8 Documentation Links OpenSimTutorial1.pdf Dec 31, 2009 Tutorial 1 OpenSimTutorial3.pdf Dec 31, 2009 Tutorial 3 OpenSimTutorial2.pdf Dec 31, 2009 Tutorial 2 OpenSim_DevelopersGuide.pdf Dec 31, 2009 Developers' Guide for writing code that uses OpenSim API OpenSimWindows7Instructions.pdf Jan 28, 2010 Instructions for users on Windows 7 OpenSim 1.9.1 Sep 01, 2009 OpenSim release that includes a previewer of motion capture data that allows individually visualizing, labeling and transforming motion data acquired from motion caption systems. It also adds a new analysis to compute Joint Reactions, and includes many other enhancements. Notes View License Download Links MotionDataPreviewerDemo.mov Sep 02, 2009 20 MB Any Data/images/video Demo of motion data previewer functionality (AdvanedUserWorkshop Aug '09) OpenSim-1.9.1-win32.exe Sep 01, 2009 66 MB Windows Application/binary Windows Installer of OpenSim 1.9.1 Documentation Links OpenSim_UsersGuide.pdf Sep 11, 2009 Users guide OpenSim Tutorial 1.pdf Sep 02, 2009 Tutorial 1 OpenSim Tutorial 2.pdf Sep 02, 2009 OpenSim Tutorial 3.pdf Sep 02, 2009 OpenSim 1.8.1 Mar 04, 2009 Enhancements to OpenSim 1.8 to support the tutorial presented along with GCMAS, Mar. 09. Also includes required models, setup and data files for the tutorial. Notes View License Download Links OpenSim-1.8.1-win32.exe Mar 04, 2009 63 MB Windows Application/binary Windows Installer of OpenSim 1.8.1 Documentation Links OpenSim Tutorial 2.pdf Mar 04, 2009 Tutorial 2 OpenSim Tutorial 1.pdf Mar 04, 2009 Tutorial 1 OpenSim Tutorial 3.pdf Mar 04, 2009 Tutorial 3 OpenSimUserGuide.pdf Mar 04, 2009 User Guide OpenSim 1.8 Jan 22, 2009 An upgrade of OpenSim that uses the latest functionality from Simbody (constraints, custom joints, welds). A new marker editor and an API for adding plugins to the OpenSim framework is published with examples. Notes View License Download Links OpenSim-1.8.0-win32.exe Jan 21, 2009 61 MB Windows Application/binary OpenSim 1.8 Windows Installer Documentation Links OpenSim Tutorial 1.pdf Jan 22, 2009 Tutorial 1 OpenSim Tutorial 2.pdf Jan 22, 2009 Tutorial 2 OpenSim Tutorial 3.pdf Jan 22, 2009 Tutorial 3 OpenSimUserGuide.pdf Jan 21, 2009 User",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 8,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "dbba732b-5d1a-40cf-930a-af45af6e5837",
    "document_id": "doc_109",
    "content": "OpenSim Tutorial 3.pdf Mar 04, 2009 Tutorial 3 OpenSimUserGuide.pdf Mar 04, 2009 User Guide OpenSim 1.8 Jan 22, 2009 An upgrade of OpenSim that uses the latest functionality from Simbody (constraints, custom joints, welds). A new marker editor and an API for adding plugins to the OpenSim framework is published with examples. Notes View License Download Links OpenSim-1.8.0-win32.exe Jan 21, 2009 61 MB Windows Application/binary OpenSim 1.8 Windows Installer Documentation Links OpenSim Tutorial 1.pdf Jan 22, 2009 Tutorial 1 OpenSim Tutorial 2.pdf Jan 22, 2009 Tutorial 2 OpenSim Tutorial 3.pdf Jan 22, 2009 Tutorial 3 OpenSimUserGuide.pdf Jan 21, 2009 User Guide OpenSim 1.5.5 Jul 31, 2008 This OpenSim release adds Static Optimization to the rich set of tools offered to OpenSim users. In addition an extensive user guide provides detailed documentation of the OpenSim application and tools. Notes View License Download Links Binaries for windows platform OpenSim-1.5.5-win32.exe Jul 31, 2008 53 MB Windows Application/binary OpenSim 1.5.5 release Documentation Links Tutorials and Examples OpenSim_Tutorial1_15.pdf Jul 31, 2008 Tutorial 1 Read this first OpenSim_InstallationInstructions_11.pdf Jul 31, 2008 Installation instructions OpenSim_Tutorial2_15.pdf Jul 31, 2008 Tutorial 2 OpenSim User's Guide (URL) Aug 21, 2008 User's manual and reference OpenSim_QuickReference_15.pdf Jul 31, 2008 Quick Reference OpenSim_Tutorial3_15.pdf Jul 31, 2008 Tutorial 3 OpenSim 1.5 May 05, 2008 View License Download Links OpenSim-1.5.0-win32.exe May 05, 2008 48 MB Windows Application/binary Executable for OpenSim 1.5 Documentation Links OpenSim_GeneratingMuscleActuatedSimulation_11.pdf May 05, 2008 Tutorial on generating muscle actuated forward simulation OpenSim_Tutorial1_11.pdf May 05, 2008 Tutorial 1 OpenSim_Tutorial2_11.pdf May 05, 2008 Tutorial 2 OpenSim_Tutorial3_11.pdf May 05, 2008 Tutorial 3 OpenSim_InstallationInstructions_11.pdf May 05, 2008 Installation Instructions OpenSim_QuickReference_11.pdf May 05, 2008 Quick Reference for the GUI (Draft) OpenSim 1.1 Dec 04, 2007 Release of OpenSim that contains substantial enhancements to OpenSim 1.0. Please read \"Release Notes\" for details. Notes View License Download Links OpenSim-1.1.0-win32_110.exe Dec 04, 2007 48 MB Windows Application/binary OpenSim 1.1 release OpenSim-1.1.1-win32.exe Jan 20, 2008 48 MB Windows Application/binary OpenSim 1.1.01 Documentation Links OpenSim_HowToBuildSDFastModel_11.pdf Dec 05, 2007 How to create an OpenSim model based on SDFast dynamics engine OpenSim_Tutorial1_11.pdf Dec 05, 2007 Tutorial 1 OpenSim_Tutorial2_11.pdf Dec 05, 2007 Tutorial 2 OpenSim_Tutorial3_11.pdf Dec 05, 2007 Tutorial 3 OpenSim_GeneratingMuscleActuatedSimulation_11.pdf Dec 05, 2007 Tutorial of generating muscle actuated forward simulation OpenSim_QuickReference_11.pdf Dec 05, 2007 OpenSim GUI QuickReference OpenSim_InstallationInstructions_11.pdf Dec 11, 2007 Installation Instructions OpenSim 1.0 Aug 09, 2007 Notes View License Download Links OutputReference.zip Aug 20, 2007 43 MB Any Data/images/video Optional reference output from Gait2392_Simbody gait simulation. OpenSim-1.0.0-win32.exe Aug 20, 2007 47 MB Windows Application/binary OpenSim 1.0 release. Windows Only. Documentation Links QuickReference10.pdf Sep 08, 2007 GUI Quick Reference OpenSim_GeneratingMuscleActuatedSimulation.pdf Sep 04, 2007 Tutorial 3 OpenSim Workshop, Generating Muscle Actuated Simulation OpenSimBrochure01.pdf Aug 20, 2007 OpenSim Brochure OpenSimTutorial2.pdf Aug 20, 2007 OpenSim Workshop Tutorial #2 OpenSimTutorial1.pdf Aug 20, 2007 OpenSim Workshop Tutorial #1 Follow OpenSim Models and Examples A set of OpenSim models and associated simulation data, scripts, and set-up files actively maintained by the OpenSim project. OpenSim 4.0 Nov 19, 2018 A set of OpenSim models and associated simulation data, for",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 9,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ce76b8d1-1012-499f-9a1d-e00feeded06b",
    "document_id": "doc_109",
    "content": "output from Gait2392_Simbody gait simulation. OpenSim-1.0.0-win32.exe Aug 20, 2007 47 MB Windows Application/binary OpenSim 1.0 release. Windows Only. Documentation Links QuickReference10.pdf Sep 08, 2007 GUI Quick Reference OpenSim_GeneratingMuscleActuatedSimulation.pdf Sep 04, 2007 Tutorial 3 OpenSim Workshop, Generating Muscle Actuated Simulation OpenSimBrochure01.pdf Aug 20, 2007 OpenSim Brochure OpenSimTutorial2.pdf Aug 20, 2007 OpenSim Workshop Tutorial #2 OpenSimTutorial1.pdf Aug 20, 2007 OpenSim Workshop Tutorial #1 Follow OpenSim Models and Examples A set of OpenSim models and associated simulation data, scripts, and set-up files actively maintained by the OpenSim project. OpenSim 4.0 Nov 19, 2018 A set of OpenSim models and associated simulation data, for some of the OpenSim 4.0 Tutorials and Examples. Files for the other examples are provided with your installation of the GUI. To obtain a fresh copy of the example files in the GUI, type \"installResources()\" in the GUI scripting shell. View License Download Package Download Links OptimalJump.zip Nov 19, 2018 1 MB Any Data/images/video StaticOpt_JointReaction.zip Nov 19, 2018 2 MB Any Data/images/video WorkingWithStaticOptimization.zip Nov 19, 2018 295 KB Any Data/images/video Documentation Links New Features List (URL) Feb 07, 2020 Brief summary of new features available in 4.0 and notes on how to upgrade Previous Releases OpenSim Models 3.3 Jul 10, 2015 Models and associated files updated for OpenSim 3.3, see the \"Model Documentation\" link for more details and follow the \"Examples and Tutorials\" link for additional examples. Includes a new Static Optimization example. View License Download Package Download Links Models Distributed with OpenSim 3.3 Software Models.zip Mar 20, 2014 13 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.2, in case you''ve overwritten any of the files in your installation. Additional Example Models MetabolicsExample.zip Jun 11, 2014 9 MB Any Data/images/video Model and other files for the example \"Simulation based design to reduce metabolic cost\" DynamicWalkingStarter.zip Jan 21, 2014 385 KB Any Data/images/video Model and other files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" StaticOpt_JointReaction.zip Oct 09, 2013 1 MB Any Data/images/video Example Joint reaction analysis New Static Optimization Example WorkingWithStaticOptimization.zip Jul 10, 2015 295 KB Any Data/images/video File for the example \"Working with Static Optimization\" Documentation Links Model Documentation (URL) Mar 04, 2014 Find out more about the models included with OpenSim Examples and Tutorials (URL) Mar 04, 2014 Link to find example and tutorial instructions. OpenSim Models 3.2 Mar 04, 2014 Models and associated files updated for OpenSim version 3.2. See the \"Model Documentation\" link for more information about distributed models. See the \"Examples and Tutorials\" link for more information about the additional example models. View License Download Package Download Links Models Distributed with OpenSim 3.2 Software Models.zip Mar 20, 2014 13 MB Any Data/images/video A clean",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 10,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "27e9d84d-95cc-4305-ad80-883f1de595bb",
    "document_id": "doc_109",
    "content": "for the example \"Working with Static Optimization\" Documentation Links Model Documentation (URL) Mar 04, 2014 Find out more about the models included with OpenSim Examples and Tutorials (URL) Mar 04, 2014 Link to find example and tutorial instructions. OpenSim Models 3.2 Mar 04, 2014 Models and associated files updated for OpenSim version 3.2. See the \"Model Documentation\" link for more information about distributed models. See the \"Examples and Tutorials\" link for more information about the additional example models. View License Download Package Download Links Models Distributed with OpenSim 3.2 Software Models.zip Mar 20, 2014 13 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.2, in case you've overwritten any of the files in your installation. Additional Example Models MetabolicsExample.zip Jun 11, 2014 9 MB Any Data/images/video Model and other files for the example \"Simulation based design to reduce metabolic cost\" DynamicWalkingStarter.zip Jan 21, 2014 385 KB Any Data/images/video Model and other files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" StaticOpt_JointReaction.zip Oct 09, 2013 1 MB Any Data/images/video Example Joint reaction analysis Documentation Links Model Documentation (URL) Mar 04, 2014 Find out more about the models included with OpenSim Examples and Tutorials (URL) Mar 04, 2014 Link to find example and tutorial instructions. OpenSim Models 3.1 Aug 07, 2013 Models and associated files updated for OpenSim version 3.1. See the \"Model Documentation\" link for more information about distributed models. See the \"Examples and Tutorials\" link for more information about the additional example models. View License Download Package Download Links Models Distributed with OpenSim Software Models.zip Aug 09, 2013 36 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.1, in case you've overwritten any of the files in your installation. Additional Example Models MetabolicsExample.zip Aug 09, 2013 11 MB Any Data/images/video Model and other files for the example \"Simulation based design to reduce metabolic cost\" ActiveAFO.zip Aug 09, 2013 21 KB Any Data/images/video Additional files for the example \"Simulation Based Design to Prevent Ankle Injury\" DynamicWalkingStarter.zip Jan 21, 2014 385 KB Any Data/images/video Model and other files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" TugOfWarMillard.zip Aug 09, 2013 7 KB Any Data/images/video Files for the example \"Designing a Muscle for a Tug-of-War Competition\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" Leg69data Aug 09, 2013 1 KB Any Data/images/video Leg Muscle Force Estimation in Swing StaticOpt_JointReaction.zip Oct 09,",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 11,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7c52e0e0-c7e8-4db6-9387-fa61d7ae49bd",
    "document_id": "doc_109",
    "content": "files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" TugOfWarMillard.zip Aug 09, 2013 7 KB Any Data/images/video Files for the example \"Designing a Muscle for a Tug-of-War Competition\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" Leg69data Aug 09, 2013 1 KB Any Data/images/video Leg Muscle Force Estimation in Swing StaticOpt_JointReaction.zip Oct 09, 2013 1 MB Any Data/images/video Example Joint reaction analysis Documentation Links Model Documentation (URL) Aug 07, 2013 Find out more about the models included with OpenSim Examples and Tutorials (URL) Aug 07, 2013 Link to find example and tutorial instructions. Follow OpenSim Source Code This package contains the source code for the libraries in the OpenSim API. Downloading and building the source are NOT necessary to run either the OpenSim Applications (GUI, Scripting) or the OpenSim API. Building from source is challenging and, as a non-commercial entity, we have limited resources to provide support for the build process. OpenSmi 4.1+ Jul 05, 2022 Source code is available through the github system here https://github.com/opensim-org/opensim-core/tags Browse for the version of your choice, download and follow the instructions on github View License PLEASE CITE THESE PAPERS Delp SL, Anderson FC, Arnold AS, Loan P, Habib A, John CT, Guendelman E, Thelen DG. OpenSim: Open-source Software to Create and Analyze Dynamic Simulations of Movement. IEEE Transactions on Biomedical Engineering. (2007) View Previous Releases OpenSim 4.0 Nov 19, 2018 Source release for OpenSim 4.0. This release includes multiple significant updates. For more information and build instructions see: https://github.com/opensim-org/opensim-core/blob/master/README.md View License Download Package Download Links OpenSim-4.0.zip Nov 19, 2018 89 MB Any Data/images/video OpenSim 4.0 source distribution OpenSim 3.3 Jul 02, 2015 Source release for OpenSim 3.3. This release includes multiple bug fixes, upgrade to Simbody 3.5.3 and is compatible with VisualStudio 2013, 2015. View License Download Package Download Links OpenSim-3.3-source.zip Jul 14, 2015 27 MB Any Source code OpenSim 3.3 source distribution Simbody-3.5.3-source.zip Jul 02, 2015 29 MB Any Source code Source code to build Simbody version 3.5.3 (needed by OpenSim 3.3 source) Documentation Links Build Instructions (URL) Mar 05, 2014 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.2 Mar 05, 2014 Source code for OpenSim 3.2 Notes View License Download Package Download Links OpenSim-3.2-source.zip Jun 27, 2014 33 MB Any Source code OpenSim 3.2 source distribution (with Python fix) Simbody-3.3.1-source.zip Mar 25, 2015 34 MB Any Source code Source code to build Simbody version 3.3.1 (needed by OpenSim 3.2 source) Documentation Links Build Instructions (URL) Mar 05, 2014 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.1 May 28, 2013 Source code for OpenSim 3.1 View License Download Package Download Links",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 12,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a5b8130e-d7b0-42f2-89a0-8dc7c9f25b88",
    "document_id": "doc_109",
    "content": "configuration of your system. OpenSim 3.2 Mar 05, 2014 Source code for OpenSim 3.2 Notes View License Download Package Download Links OpenSim-3.2-source.zip Jun 27, 2014 33 MB Any Source code OpenSim 3.2 source distribution (with Python fix) Simbody-3.3.1-source.zip Mar 25, 2015 34 MB Any Source code Source code to build Simbody version 3.3.1 (needed by OpenSim 3.2 source) Documentation Links Build Instructions (URL) Mar 05, 2014 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.1 May 28, 2013 Source code for OpenSim 3.1 View License Download Package Download Links OpenSim-3.1-source.zip Jul 26, 2013 29 MB Any Source code OpenSim 3.1 source distribution Simbody-3.1-source.zip Jul 25, 2013 32 MB Any Source code Source code to build Simbody version 3.1 (needed by OpenSim source) Documentation Links Build Instructions (URL) Aug 05, 2013 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.0.1 Apr 15, 2013 Source code for OpenSim 3.0.1. Follow link under \"Documentation Links\" below for build instructions See http://simtk-confluence.stanford.edu:8080/display/OpenSim/OpenSim+3.0.1+Release+Notes for more information about what's new and how to upgrade. View License Download Package Download Links Simbody-3.0-source.zip Apr 15, 2013 48 MB Any Source code Source code to build Simbody version 3.0 needed by OpenSim source OpenSim-3.0.1-source.zip Apr 15, 2013 27 MB Any Source code OpenSim 3.0.1 source code Documentation Links Build Instructions (URL) Apr 15, 2013 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.0 Oct 24, 2012 Source code for OpenSim 3.0. Follow link under \"Documentation Links\" below for build instructions See http://simtk-confluence.stanford.edu:8080/pages/viewpage.action?pageId=3376126 for more information about what's new and how to upgrade. View License Download Package Download Links OpenSim-3.0-source.zip Nov 16, 2012 33 MB Any Source code OpenSim 3.0 source zip Simbody-3.0-source.zip Oct 29, 2012 48 MB Any Source code Source code to build Simbody version 3.0 needed by OpenSim source Documentation Links Build Instructions (URL) Oct 24, 2012 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. Follow Github Source Code Repository The Github repository contains the development version source code for the libraries in the OpenSim API. This version of the source code is under active development and is intended for C++ developers wishing to contribute to the OpenSim source code. This repository does not include source code for the OpenSim GUI. Github Master Branch Sep 19, 2016 Current OpenSim development branch View License Download Links OpenSim Master Branch (URL) Sep 19, 2016 0 Any Data/images/video 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 13,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4a16fc2f-7a06-4cb2-9db5-116d4b68b443",
    "document_id": "doc_109",
    "content": "include source code for the OpenSim GUI. Github Master Branch Sep 19, 2016 Current OpenSim development branch View License Download Links OpenSim Master Branch (URL) Sep 19, 2016 0 Any Data/images/video 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/frs/index.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs",
        "index.php"
      ],
      "content_type": "reference",
      "position": 14,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "aa18489d-ef36-4aaa-abb0-ca4d6076e8c3",
    "document_id": "doc_75",
    "content": "Analysis of arm swing during human walking Share Follow Project Follow publicly Follow privately Unfollow See followers (4) List Map More info 899 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provides a simplified total body model for simulation of musculoskeletal movements. Download Latest Releases Arm swing data: Arm swing simulation data License: Arm swing data This project provides a simplified version of the UpperLowerBodySimple model from the ULB-project, which was adjusted with the purpose to decrease the run time of the simulations. The adjusted model was used to determine arm swing kinematics (with and without muscle excitations) during human walking, with arm movements not exceeding 70 degrees of anteflexion or abduction. However, the adjusted_ULB model can be used for modeling and simulating kinematics and kinetics of all neuromusculoskeletal systems. For an example of an arm swing simulation without muscle excitation we refer to the video below. 1,079 downloads 1 forum posts 4 followers Last updated Jun 3, 2014 Project Statistics Join Mailing Lists Suggest Idea Marije Goudriaan Ilse Jonkers Sjoerd Bruijn Jaap van Dieen Downloads The download 'arm swing simulation data' contains the adjusted UpperLowerBodySimple model(Adjusted_ULBmodel.osim) and all files needed to run forward simulations of two arm swing conditions (normal walking and walking with the arms swinging in-phase with legs) at three different walking speeds(2, 4 and 6 km/h). The files for the intermediary steps are included as well. See all Downloads People also viewed OpenSim Muscle contributions to mass center... Sam's Simulations Examining Muscle Forces during Sit to Stand Transfer... Evertor and invertor muscle co-activation... Chand's Simulations Full Body Model for use in Dynamic Simulations of... OpenSim Moco See all Dynamic Simulation of Movement Based on OpenSim and... EMG-informed Computed Muscle Control for Dynamic... Upper and Lower Body Model How much muscle strength is required to walk in... Dynamic Arm Simulator Multiple Speed Walking Simulations A three-dimensional musculoskeletal model of the dog SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/arm_swing",
      "title": "SimTK: Analysis of arm swing during human walking: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "arm_swing"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "7b4e38ee-2105-446a-b386-d50760ad133b",
    "document_id": "doc_93",
    "content": "Dynamic Simulation of Movement Based on OpenSim and MATLAB®/Simulink® Share 470 This is a private project. You must be a member to view its contents. This project overcomes neuromusculoskeletal systems limitations of MATLAB®/Simulink® and robust design & control limitations of OpenSim through an interface between these two software packages that combines relevant strengths of each individual package. Numerical simulations are playing an increasingly important role in solving complex engineering problems, and have the potential to revolutionize medical decision making and treatment design. Musculoskeletal diseases cost the United States economy an estimated $849 billion a year (equal to 7.7% of the gross domestic product) and place great demands on the healthcare system. This research area could greatly benefit from computational tools that offer greater understanding of neuromuscular biomechanics, and predictive capabilities for optimal surgical and rehabilitation treatment planning. The MATLAB®/Simulink® package is the world’s leading mathematical computing software for engineers and scientists in industry, government, and education. Although Simulink® extends MATLAB® with a graphical environment for rapid design, control, and simulation of complex dynamic systems, this powerful package has limited resources for simulations of neuromusculoskeletal systems. On the contrary, OpenSim is a popular open-source platform for modeling, simulating, and analyzing neuromusculoskeletal systems, but it is lacks the robust design and control tools of Simulink®. This project is an interface between OpenSim and MATLAB®/Simulink® that combines relevant strengths (e.g., neuromusculoskeletal dynamics, rapid model-based design, control systems, and numerical simulation) of each individual software package. The foundation of this interface is a MATLAB® S-function (system-function) based on an OpenSim model as a Simulink® block written in C++ and compiled as a MEX-file using the MATLAB® mex utility. Misagh Mansouri Jeff Reinbolt People also viewed Platform for Dynamic Simulation and Control of... EMG-informed Computed Muscle Control for Dynamic... Batch OpenSim Processing Scripts (BOPS) OpenSim Simulations Library OpenSim Motion and Simulation Data Sam's Simulations Neuromusculoskeletal Modeling (NMSM) Pipeline How much muscle strength is required to walk in... See all Convert .c3d and .csv files to OpenSim files... Dynamic Arm Simulator Upper and Lower Body Model A Visualization Tool for OpenSim Tim's OpenSim Utilities London Lower Limb Model Marker registration method informed by anatomical... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/opensim_matlab",
      "title": "SimTK: Dynamic Simulation of Movement\r\nBased on OpenSim and MATLAB®/Simulink®: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "opensim_matlab"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "2ec6815f-1b5a-45c3-b136-b145d9d17774",
    "document_id": "doc_113",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089849/User+s+Guide",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089849",
        "User+s+Guide"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f4136500-d3f7-4667-b189-3736211d38af",
    "document_id": "doc_37",
    "content": "Downloads Summary Summary Statistics Unique Users 1 Total Downloads File Downloads Links Unique Downloads 2 103,213 836,655 392,826 443,829 303,578 Unique Users 1 Total 3 Downloads 3 (non-documentation) Documentation 3 Links * OpenSim 100700 100141 4495 7342 OpenSim 4.5 17183 17122 710 OpenSim 4.4 18811 18750 782 OpenSim 4.3 11569 11529 586 OpenSim 4.2 5118 5092 294 OpenSim 4.1 14475 14428 652 OpenSim 4.0 15187 14271 1945 OpenSim 3.3 21343 21262 1788 OpenSim 3.2 6778 6734 828 OpenSim 3.1 3734 3703 491 OpenSim 3.0.1 1484 1440 312 OpenSim 3.0 2339 2297 487 OpenSim 2.4 4165 4116 562 493 OpenSim 2.2.1 1578 1439 702 OpenSim 2.2 1637 1444 794 OpenSim 2.1.0 0 0 OpenSim 2.0.2 1387 1191 825 OpenSim 2.0.1 948 877 504 OpenSim 2.0 513 481 184 OpenSim 1.9.1 1257 1217 453 OpenSim 1.8.1 1004 937 505 OpenSim 1.8 572 541 235 OpenSim 1.5.5 1834 1117 1248 7 OpenSim 1.5 478 462 226 OpenSim 1.1 742 709 355 OpenSim 1.0 453 420 226 OpenSim Source Code 6571 6444 2854 OpenSim 4.0 2303 2303 OpenSim 3.3 3301 3235 2274 OpenSim 3.2 931 885 369 OpenSim 3.1 499 466 205 OpenSim 3.0.1 212 189 80 OpenSim 3.0 428 402 194 OpenSim Models and Examples 23597 23138 11251 OpenSim 4.0 11270 11175 6188 OpenSim Models 3.3 7105 6811 4738 OpenSim Models 3.2 8300 8138 647 OpenSim Models 3.1 2587 2491 331 Github Source Code Repository 1053 1053 Github Master Branch 1053 1053 1 Downloads where user information was not gathered count as one user. May include hidden packages. 2 Includes both files and links. A file downloaded multiple times by the same user counts as one 3 Number of users that downloaded a file in this category * Number of users that clicked on a link (only tracked since June 2010) SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/reports/index.php?type=group&reports=reports&group_id=91",
      "title": "SimTK: OpenSim: Downloads Summary",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "plugins",
        "reports",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e539d0aa-153e-4e4a-a9b0-1abd6cca15d1",
    "document_id": "doc_168",
    "content": "projects 162849 people Primary Content All ( ) Applications ( 0 ) Data Sets ( 0 ) Developer Tools ( 0 ) Educational and Training Material ( 0 ) Miscellaneous ( 0 ) Models ( 0 ) Scripts, Plug-Ins, and Other Utilities ( 0 ) Software Libraries ( 0 ) Web Site ( 0 ) Biocomputational Focus All ( ) Experimental Analysis ( 0 ) Image Processing ( 0 ) Network Modeling and Analysis ( 0 ) Physics-Based Simulation ( 0 ) Statistical Analysis ( 0 ) Visualization ( 0 ) Biological Applications All ( ) Cardiovascular System ( 0 ) Cell ( 0 ) Myosin ( 0 ) Neuromuscular System ( 0 ) Protein ( 0 ) RNA ( 0 ) Tissue ( 0 ) Primary Content All ( ) Applications ( 0 ) Data Sets ( 0 ) Developer Tools ( 0 ) Educational and Training Material ( 0 ) Miscellaneous ( 0 ) Models ( 0 ) Scripts, Plug-Ins, and Other Utilities ( 0 ) Software Libraries ( 0 ) Web Site ( 0 ) Biocomputational Focus All ( ) Experimental Analysis ( 0 ) Image Processing ( 0 ) Network Modeling and Analysis ( 0 ) Physics-Based Simulation ( 0 ) Statistical Analysis ( 0 ) Visualization ( 0 ) Biological Applications All ( ) Cardiovascular System ( 0 ) Cell ( 0 ) Myosin ( 0 ) Neuromuscular System ( 0 ) Protein ( 0 ) RNA ( 0 ) Tissue ( 0 ) SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/search/search.php?srch=neuromuscular&type_of_search=soft",
      "title": "SimTK: Search",
      "section": "Narrow search results SimTK is home to: 1914 projects 162849 people Project search results: neuromuscular Sort by: Most relevant Most downloads Date updated Title SimTK is home to:",
      "hierarchy": [
        "search",
        "search.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f08303db-7f68-4418-8753-0c629009cdec",
    "document_id": "doc_43",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Downloads Follow OpenSim OpenSim is a freely available software system that allows you to build, exchange, and analyze musuloskeletal models and dynamic simulations of movement. OpenSim 4.5 Jan 10, 2024 We are pleased to announce the following new features, bug fixes, and other improvements in OpenSim 4.5. The new software includes improvements to the look and feel of the GUI, published Conda and Docker packages, additional Moco functionality, and the introduction of FunctionBasedPath for function-based muscle wrapping. We also now distribute a version of the Rajagopal model with the OpenSim resources folder included in the OpenSim application. Release notes are provided below along with links to full change logs for more detail. Notes View License Download Links OpenSim-4.5-win64.exe Mar 29, 2024 283 MB Windows Application/binary Installer for OpenSim 4.5 application on Windows (Only x64 Windows machines are supported) OpenSim-4.5-Mac.pkg Mar 29, 2024 290 MB Mac OS X Application/binary Installer for OpenSim 4.5 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 26, 2024 Brief summary of new features available in 4.5 and notes on how to upgrade Support Site (URL) Mar 26, 2024 Browse and search all OpenSim resources User's Guide (URL) Mar 26, 2024 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Mar 26, 2024 Quick link to the Online Examples and Tutorials Page PLEASE CITE THESE PAPERS Delp, S.L., Anderson, F.C., Arnold, A.S., Loan, P., Habib, A., John, C.T., Guendelman, E., Thelen, D.G. OpenSim: Open-source software to create and analyze dynamic simulations of movement. IEEE Transactions on Biomedical Engineering, 54(11), pp 1940-1950. (2007) View Seth, A., Hicks J.L., Uchida, T.K., Habib, A., Dembia, C.L., Dunne, J.J., Ong, C.F., DeMers, M.S., Rajagopal, A., Millard, M., Hamner, S.R., Arnold, E.M., Yong, J.R., Lakshmikanth, S.K., Sherman, M.A., Ku, J.P., Delp, S.L. OpenSim: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement. PLoS Computational Biology, 14(7). (2018) View ADDITIONAL PAPERS Christopher L Dembia, Nicholas A Bianco, Antoine Falisse, Jennifer L Hicks, Scott L Delp. OpenSim Moco: Musculoskeletal optimal control. PLoS Computational Biology 16(12): e1008493 (2020) View Previous Releases OpenSim 4.4 Jul 24, 2022 Update to OpenSim and Moco software including improvements to the look and feel of the GUI visualizer, additional Moco functionality with MocoOutputGoals, and performance improvements for models with muscle wrapping and important bug fixes.",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3405984d-161d-4fcc-908d-0f0899e4dfb7",
    "document_id": "doc_43",
    "content": "Arnold, E.M., Yong, J.R., Lakshmikanth, S.K., Sherman, M.A., Ku, J.P., Delp, S.L. OpenSim: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement. PLoS Computational Biology, 14(7). (2018) View ADDITIONAL PAPERS Christopher L Dembia, Nicholas A Bianco, Antoine Falisse, Jennifer L Hicks, Scott L Delp. OpenSim Moco: Musculoskeletal optimal control. PLoS Computational Biology 16(12): e1008493 (2020) View Previous Releases OpenSim 4.4 Jul 24, 2022 Update to OpenSim and Moco software including improvements to the look and feel of the GUI visualizer, additional Moco functionality with MocoOutputGoals, and performance improvements for models with muscle wrapping and important bug fixes. New Conda and Docker packages are made available as well. Notes View License Download Links OpenSim-4.4-win64.exe Jul 28, 2022 278 MB Windows Application/binary Installer for OpenSim 4.4 application on Windows (Only x64 Windows machines are supported) OpenSim-4.4-Mac.pkg Jul 28, 2022 277 MB Mac OS X Application/binary Installer for OpenSim 4.4 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Jul 24, 2022 Brief summary of new features available in 4.4 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Jul 24, 2022 Quick link to the Online Examples and Tutorials Page OpenSim 4.3 Aug 22, 2021 Release 4.3 of OpenSim software, including latest functionality and examples from Moco for performing IMU and EMG tracking, introduction of the IMU Component and IMUDataReporter, along with a variety of bug-fixes and upgrades. Notes View License Download Links OpenSim-4.3-win64.exe Aug 31, 2021 251 MB Windows Application/binary Installer for OpenSim 4.3 application on Windows (Only x64 Windows machines are supported) OpenSim-4.3-Mac.pkg Aug 31, 2021 274 MB Mac OS X Application/binary Installer for OpenSim 4.3 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 14, 2021 Brief summary of new features available in 4.2 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Feb 07, 2020 Quick link to the Online Examples and Tutorials Page OpenSim 4.2 Mar 14, 2021 An upgrade with new features for working with Inertial Measurement Unit (IMU) Data, integration and cross-compatibility with OpenSim-Moco, along with several bug fixes and enhancements. Notes View License Download Links OpenSim-4.2-win64.exe Mar 16, 2021 201 MB Windows Application/binary Installer for OpenSim 4.2 application on Windows (Only x64 Windows machines are supported) OpenSim-4.2-mac.pkg Mar 18, 2021 251 MB Mac OS X Application/binary Installer for OpenSim 4.2 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 14, 2021 Brief summary of new features available in 4.2 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "dec8f030-bf10-46f4-ac73-fe06e09ef77d",
    "document_id": "doc_43",
    "content": "with several bug fixes and enhancements. Notes View License Download Links OpenSim-4.2-win64.exe Mar 16, 2021 201 MB Windows Application/binary Installer for OpenSim 4.2 application on Windows (Only x64 Windows machines are supported) OpenSim-4.2-mac.pkg Mar 18, 2021 251 MB Mac OS X Application/binary Installer for OpenSim 4.2 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Mar 14, 2021 Brief summary of new features available in 4.2 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Feb 07, 2020 Quick link to the Online Examples and Tutorials Page OpenSim 4.1 Feb 07, 2020 An upgrade with support for inverse kinematics from IMU data, along with several bug fixes and enhancements. Notes View License Download Links OpenSim-4.1-win64.exe Feb 04, 2020 223 MB Windows Application/binary Installer for OpenSim 4.1 application on Windows (Only x64 Windows machines are supported) OpenSim-4.1-mac.pkg Feb 04, 2020 244 MB Mac OS X Application/binary Installer for OpenSim 4.1 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features List (URL) Feb 07, 2020 Brief summary of new features available in 4.0 and notes on how to upgrade Support Site (URL) Feb 07, 2020 Browse and search all OpenSim resources User's Guide (URL) Feb 07, 2020 Quick link to the Online OpenSim User's Guide. Examples and Tutorials (URL) Feb 07, 2020 Quick link to the Online Examples and Tutorials Page OpenSim 4.0 Nov 13, 2018 OpenSim 4.0 includes a brand new visualizer, compatibility with both Mac and Windows, and improvements to the scripting and API interfaces for users designing their own biomechanics studies. We've also added support for reading in C3D data. View License Download Links Windows Installer (64-bit) OpenSim-4.0-win64.exe Nov 13, 2018 220 MB Windows Application/binary Installer for OpenSim 4.0 application on Windows. Only x64 Windows machines are supported. Mac OS X Installer OpenSim-4.0-mac.pkg Nov 13, 2018 269 MB Mac OS X Application/binary Installer for OpenSim 4.0 application on Mac OSX (Use Ctrl+Click to launch installer) Documentation Links New Features and Upgrade Notes New Features List (URL) Nov 13, 2018 Brief summary of new features available in 4.0 OpenSim 4.0 Release Notes (URL) Nov 13, 2018 Summary of how to upgrade to 4.0 Support Site Support Site (URL) Nov 13, 2018 Browse and search all OpenSim resources Quick Links User's Guide (URL) Nov 13, 2018 Quick link to the Online OpenSim 4.0 User's Guide. Note we are still making updates for 4.0. Examples and Tutorials (URL) Nov 13, 2018 Quick link to the Online Examples and Tutorials Page OpenSim 3.3 Jul 02, 2015 This release includes new examples and scripts and addresses several bugs and issues reported by our users, particularly in Static Optimization and Scaling. Notes View License Download Links Windows Installer (64-bit) OpenSim-3.3.0-win64VC13P.exe Jan 22, 2016 142 MB Windows Application/binary Installer for OpenSim 3.3 application on Windows. Use on x64 Windows",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a81dacae-67d8-4a2e-a7e7-fbaa369cb623",
    "document_id": "doc_43",
    "content": "search all OpenSim resources Quick Links User's Guide (URL) Nov 13, 2018 Quick link to the Online OpenSim 4.0 User's Guide. Note we are still making updates for 4.0. Examples and Tutorials (URL) Nov 13, 2018 Quick link to the Online Examples and Tutorials Page OpenSim 3.3 Jul 02, 2015 This release includes new examples and scripts and addresses several bugs and issues reported by our users, particularly in Static Optimization and Scaling. Notes View License Download Links Windows Installer (64-bit) OpenSim-3.3.0-win64VC13P.exe Jan 22, 2016 142 MB Windows Application/binary Installer for OpenSim 3.3 application on Windows. Use on x64 Windows machines by default Windows Installer (32-bit) OpenSim-3.3.0-win32VC13P.exe Aug 24, 2015 130 MB Windows Application/binary Installer for OpenSim 3.3 application on Windows (built with VS2013 Pro, 32 bit) Documentation Links New Features and Upgrade Notes New Features List (URL) Jul 09, 2015 List of new features available in 3.3 OpenSim 3.3 Release Notes (URL) Jul 09, 2015 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) May 22, 2014 Browse and search all OpenSim resources Quick Links User's Guide (URL) Jul 10, 2015 Quick link to the Online OpenSim User''s Guide Developer's Guide (URL) Jul 10, 2015 Quick link to the Online OpenSim Developer''s Guide Examples and Tutorials (URL) Mar 03, 2014 Quick link to the Online Examples and Tutorials Page OpenSim 3.2 Feb 16, 2014 OpenSim 3.2 includes an improved scripting interface, accessible through the Graphical User Interface (GUI), Matlab, and now Python. We also added new visualization capabilities and usability improvements in the OpenSim application. As with every release, we've also implemented performance improvements and bug fixes. Notes View License Download Links Windows Installer OpenSim-3.2.0-win32VC10P.exe Mar 07, 2014 108 MB Windows Application/binary Default installer for OpenSim 3.2 application on Windows (built with VS2010 Pro, 32 bit) Advanced: Windows Installer (64-bit) OpenSim-3.2.0-win64VC10P.exe Apr 29, 2014 126 MB Windows Application/binary Alternate installer for OpenSim 3.2 (built with VS2010 Pro, 64 bit). Generally recommended only for 64-bit Matlab Users OpenSim-3.2.0-win64VC13P.exe May 15, 2014 133 MB Windows Application/binary Installer built with VisualStudio 2013, x64 use only to do API programming in VS 2013 Advanced: Windows Installer (32-bit) OpenSim-3.2.0-win32VC13P.exe Jun 11, 2014 109 MB Windows Application/binary OpenSim 3.2 32-bit built with VisualStudio 2013 Pro Documentation Links New Features and Upgrade Notes New Features List (URL) Mar 04, 2014 List of new features available in 3.2 OpenSim 3.2 Release Notes (URL) Mar 03, 2014 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) May 22, 2014 Browse and search all OpenSim resources Quick Links User's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 03, 2014 Quick link to the Online Examples and Tutorials Page OpenSim 3.1 Jul 22, 2013 OpenSim 3.1 includes expanded scripting capabilities, enhancements to the graphical user interface, many new modeling components, new examples, and important bug fixes. View License",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 3,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6e77ae34-0f4e-4bce-bd22-79a7bb96087f",
    "document_id": "doc_43",
    "content": "Mar 03, 2014 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) May 22, 2014 Browse and search all OpenSim resources Quick Links User's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 03, 2014 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 03, 2014 Quick link to the Online Examples and Tutorials Page OpenSim 3.1 Jul 22, 2013 OpenSim 3.1 includes expanded scripting capabilities, enhancements to the graphical user interface, many new modeling components, new examples, and important bug fixes. View License Download Links Windows Installers (32-bit) OpenSim-3.1.0-win32-VC10.exe Jul 23, 2013 133 MB Windows Application/binary Default installer for OpenSim application on Windows. (Developers and Plugin Users - this release includes libraries built with VC10 Pro) OpenSim-3.1.0-win32-VC8.exe Jul 23, 2013 131 MB Windows Application/binary Alternate installer for OpenSim application on Windows, geared for developers and plugin users with VC8 Pro. Windows Installer (64-bit) OpenSim-3.1.0-win64-VC10.exe Jul 23, 2013 158 MB Windows Application/binary OpenSim 3.1.0 64-bit application installer (built with VC10P) Linux Binaries (64-bit) OpenSim-3.1-Linux-x64.tar.gz Jul 25, 2013 52 MB Linux Application/binary OpenSim 3.1 Linux distribution/binaries (No GUI) Models and Examples Models.zip Jul 26, 2013 36 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.1, in case you've overwritten any of the files in your installation. Documentation Links New Features and Upgrade Notes OpenSim 3.1 Release Notes (URL) Jul 22, 2013 List of new examples, enhancements, and bug fixes Support Site Support Site (URL) Jul 22, 2013 Browse and search all OpenSim resources Quick Links User's Guide (URL) Jul 22, 2013 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Jul 22, 2013 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Jul 22, 2013 Quick link to the Online Examples and Tutorials Page OpenSim 3.0.1 Mar 27, 2013 OpenSim 3.0.1 includes improved scripting functionality, new examples, and several bug fixes, in addition to all of the new features of OpenSim 3.0. View License Download Links Windows OpenSim-3.0.1-win32VC10P.exe Mar 27, 2013 126 MB Windows Application/binary Default installer for OpenSim application on Windows. (Developers and Plugin Users - this release includes libraries built with VC10 Pro) OpenSim-3.0.1-win32VC8P.exe Mar 27, 2013 124 MB Windows Application/binary Alternate installer for OpenSim application on Windows, geared for developers and plugin users with VC8 Pro. OpenSim-3.0.1-Linux64.tar.gz Mar 28, 2013 53 MB Linux Application/binary OpenSim 3.0 Linux distribution/binaries (No GUI) Documentation Links Support and Documentation Support Site (URL) Mar 27, 2013 Browse and search all OpenSim Resources OpenSim 3.0.1 Release Notes (URL) Mar 27, 2013 List of new examples, enhancements, and bug fixes. Quick Links User's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 27, 2013 Quick link to the Online Examples and Tutorials Page OpenSim 3.0 Oct 18, 2012 OpenSim 3.0 is our biggest upgrade to-date. We've",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 4,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "962cc83d-37ca-4fa5-9387-f8875c4c0e53",
    "document_id": "doc_43",
    "content": "Linux Application/binary OpenSim 3.0 Linux distribution/binaries (No GUI) Documentation Links Support and Documentation Support Site (URL) Mar 27, 2013 Browse and search all OpenSim Resources OpenSim 3.0.1 Release Notes (URL) Mar 27, 2013 List of new examples, enhancements, and bug fixes. Quick Links User's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Mar 27, 2013 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Mar 27, 2013 Quick link to the Online Examples and Tutorials Page OpenSim 3.0 Oct 18, 2012 OpenSim 3.0 is our biggest upgrade to-date. We've added new features, including live model editing and scripting in Matlab and the GUI. We've enhanced some of the core existing OpenSim functionality, including our muscle models and tools for visualizing forces and other motion data. OpenSim 3.0 also includes a host of usability improvements for beginning GUI users and advanced API developers. See the New Features link below for a full list of the improvements. View License Download Links Windows OpenSim-3.0.0-win32VC10P_u1.exe Feb 26, 2013 126 MB Windows Application/binary Default installer for OpenSim application on Windows. (Developers and Plugin Users - this release includes libraries built with VC10 Pro) OpenSim-3.0.0-win32VC8P_u1.exe Feb 26, 2013 123 MB Windows Application/binary Alternate installer for OpenSim application on Windows, geared for developers and plugin users with VC8 Pro. Linux OpenSim-3.0.0-Linux64.tar.gz Jan 15, 2013 62 MB Linux Application/binary OpenSim 3.0 Linux distribution/binaries (No GUI) Documentation Links Support and Documentation Support Site (URL) Apr 09, 2012 Browse and search all OpenSim Resources Quick Links New Features and Upgrade Notes (URL) Oct 18, 2012 New features and notes for upgrading to OpenSim 3.0 User's Guide (URL) Oct 18, 2012 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Apr 09, 2012 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Apr 09, 2012 Quick link to the Online Examples and Tutorials Page Bugs and Updates (URL) Oct 25, 2012 A list of any known bugs and any software, model, or example updates since release. OpenSim 2.4 Oct 07, 2011 OpenSim 2.4 includes faster and more robust tools for Inverse Dynamics and Inverse Kinematics, new visualization tools, enhanced access for API users, and several usability improvements. In addition, we’ve verified that the results of Computed Muscle Control now match or exceed the quality of those achieved in OpenSim version 1.9.1. We've added documentation of Induced Acceleration Analysis, application of external loads and several examples. Please see the release notes for more details. Notes View License Download Links Windows OpenSim-2.4.0-win32VC9P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all non-API users and API users with VC9 Pro OpenSim-2.4.0-win32VC10E.exe Oct 10, 2011 77 MB Windows Application/binary Installer for API users with VC10 Express. OpenSim-2.4.0-win32VC8P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all API users with VC8 Pro. Linux OpenSim240-Linux32.tar.gz Nov 01, 2011 64 MB Linux Application/binary API distribution on Linux (32 bit) (No GUI) Mac OS X OpenSim240-Mac32.tar.gz Nov 01, 2011 70 MB",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 5,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c1437b82-1a09-4871-9c37-57b9dd435371",
    "document_id": "doc_43",
    "content": "Induced Acceleration Analysis, application of external loads and several examples. Please see the release notes for more details. Notes View License Download Links Windows OpenSim-2.4.0-win32VC9P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all non-API users and API users with VC9 Pro OpenSim-2.4.0-win32VC10E.exe Oct 10, 2011 77 MB Windows Application/binary Installer for API users with VC10 Express. OpenSim-2.4.0-win32VC8P.exe Nov 20, 2011 77 MB Windows Application/binary Installer for all API users with VC8 Pro. Linux OpenSim240-Linux32.tar.gz Nov 01, 2011 64 MB Linux Application/binary API distribution on Linux (32 bit) (No GUI) Mac OS X OpenSim240-Mac32.tar.gz Nov 01, 2011 70 MB Mac OS X Application/binary API distribution on Mac OS X (No GUI) OpenSim240-Mac32_WithSimtkLapack.tar.gz Jan 18, 2012 70 MB Mac OS X Application/binary OpenSim2.4 Build on Mac with simtkLapack (for use with osx 10.7) Documentation Links Support and Documentation Support Site (URL) Apr 09, 2012 Browse and search all OpenSim Resources Quick Links New Features and Upgrade Notes (URL) Oct 18, 2012 New features and notes for upgrading to OpenSim 2.4 User's Guide (URL) Oct 18, 2012 Quick link to the Online OpenSim User's Guide Developer's Guide (URL) Oct 18, 2012 Quick link to the Online OpenSim Developer's Guide Examples and Tutorials (URL) Oct 18, 2012 Quick link to the Online Examples and Tutorials Page Example and Tutorial Files subject01_walk1_grf.xml Nov 21, 2011 Missing file from Tutorial 3 (VC8Pro, VC10E installers) StaticOpt_JointReactExample.zip Oct 28, 2011 Files for an example using Static Optimization and Joint Reaction Analysis OpenSim 2.2.1 Apr 03, 2011 A new release of the OpenSim software, includes many enhancements, fixes and example setup files for Static Optimization and Joint Reaction analyses Notes View License Download Links Release 2.2.1 OpenSim-2.2.1-win32-VC8P.exe Apr 18, 2011 69 MB Windows Application/binary Release 2.2.1 (VC8 Pro Windows Libraries) - Use this installer unless you a) have VC9Pro & b) use the API OpenSim-2.2.1-win32-VC9P.exe Apr 08, 2011 68 MB Windows Application/binary Release 2.2.1 (VC9 Pro Windows Libraries) opensim-2.2.1-Linux32-API.tar.gz Apr 08, 2011 39 MB Linux Application/binary Release 2.2.1 (API distribution on Linux) opensim-2.2.1-Mac32-API.tar.gz Apr 12, 2011 42 MB Mac OS X Application/binary OpenSim 2.2.1 headers and libraries Mac32 bit (API only) SO_JR_example.zip Apr 08, 2011 1 MB Any Data/images/video Setup and data files for StaticOptimization, JointReaction Demo Documentation Links OpenSim_UsersGuide2.2.pdf Nov 25, 2010 Updated User Guide for release 2.2 OpenSimTutorial1.pdf Nov 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Nov 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Nov 10, 2010 Tutorial 3 OpenSim_DevelopersGuide.pdf Nov 14, 2010 Developers Guide updated for version 2.2 OpenSim 2.2 Dec 01, 2010 An upgrade to OpenSim that includes many enhancements to the GUI, improvements to the API and several bug fixes. Please see release notes for details. Notes View License Download Links Release 2.2.0 OpenSim-2.2.0-win32-VC8P.exe Dec 01, 2010 64 MB Windows Application/binary Release 2.2.0 (VC8 Pro Windows Libraries) - If not API user, use this installer OpenSim-2.2.0-win32-VC9E.exe Nov 10, 2010 64 MB Windows Application/binary Distribution including (Release) libraries for VC9 Express opensim-2.2.0-Mac32-API.tar.gz Dec 01, 2010 42 MB Mac OS X Application/binary OpenSim 2.2.0 headers and libraries Mac32",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 6,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8355529c-236f-4402-8412-a758e971e6e2",
    "document_id": "doc_43",
    "content": "OpenSim_DevelopersGuide.pdf Nov 14, 2010 Developers Guide updated for version 2.2 OpenSim 2.2 Dec 01, 2010 An upgrade to OpenSim that includes many enhancements to the GUI, improvements to the API and several bug fixes. Please see release notes for details. Notes View License Download Links Release 2.2.0 OpenSim-2.2.0-win32-VC8P.exe Dec 01, 2010 64 MB Windows Application/binary Release 2.2.0 (VC8 Pro Windows Libraries) - If not API user, use this installer OpenSim-2.2.0-win32-VC9E.exe Nov 10, 2010 64 MB Windows Application/binary Distribution including (Release) libraries for VC9 Express opensim-2.2.0-Mac32-API.tar.gz Dec 01, 2010 42 MB Mac OS X Application/binary OpenSim 2.2.0 headers and libraries Mac32 bit (API only) opensim-2.2.0-Linux32-API.tar.zip Dec 01, 2010 39 MB Linux Application/binary OpenSim 2.2 headers and 32 bit libs built on linux (API only) k12example.zip Dec 13, 2010 13 KB Any Data/images/video Example .oscript file to create a simplified GUI panel Documentation Links OpenSim_UsersGuide2.2.pdf Nov 25, 2010 Updated User Guide for release 2.2 OpenSimTutorial1.pdf Nov 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Nov 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Nov 10, 2010 Tutorial 3 OpenSim_DevelopersGuide.pdf Nov 14, 2010 Developers Guide updated for version 2.2 K12InstallInstructions.txt Dec 13, 2010 Installation instructions for the K12 module OpenSim 2.0.2 Apr 23, 2010 An update to version 2.0.1 that includes some important bug-fixes, updated models for the tutorials and new Model Components including a Bushing-Force and Spring-GeneralizedForce. Notes View License Download Links OpenSim-2.0.2-win32-VC8P02.exe Apr 27, 2010 64 MB Windows Application/binary Build 2.0.2 (includes libraries built using VC8) Documentation Links GettingDataIntoOpenSim.mov May 21, 2010 Getting 3D motion capture data into OpenSim OpenSimTutorial1.pdf Feb 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Feb 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Feb 10, 2010 Tutorial 3 OpenSimWindows7Instructions.pdf Feb 10, 2010 Instructions for users on Windows7 OpenSim_UsersGuide.pdf Feb 11, 2010 Updated User's Guide for the OpenSim Application GUI OpenSim_DevelopersGuide.pdf Apr 23, 2010 Developers' Guide for writing code that uses OpenSim API OpenSim 2.0.1 Feb 09, 2010 First public release of the OpenSim modeling API. OpenSim is now fully compliant with the SimTK architecture. Contact functionality has been introduced as well as a faster and more robust integrator from SimTK. A set of programming examples utilizing the API, a Developers' Guide, and Doxygen documentation are also included. The API allows users to create their own modeling components programmatically including Actuators, Controllers and Analyses, perform Optimization studies and embed OpenSim into their own environment. This release also includes enhancements to support multiple external forces, and an updated User's Guide. Notes View License Download Links OpenSim-2.0.1-win32-VC8P.exe Feb 09, 2010 64 MB Windows Application/binary Build 2.0.1 (using VC8, relevent only to API) Documentation Links OpenSimWindows7Instructions.pdf Feb 10, 2010 Instructions for users on Windows7 OpenSimTutorial1.pdf Feb 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Feb 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Feb 10, 2010 Tutorial 3 OpenSim_UsersGuide.pdf Feb 11, 2010 Updated User's Guide for the OpenSim Application GUI OpenSim_DevelopersGuide.pdf Feb 11, 2010 Developers' Guide for writing code that uses OpenSim API OpenSim 2.0 Dec 31, 2009 First public release of the OpenSim modeling API. OpenSim is now fully compliant with the SimTK architecture. Contact functionality has",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 7,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "84c8accf-649b-42a3-b503-8fd194c95685",
    "document_id": "doc_43",
    "content": "Notes View License Download Links OpenSim-2.0.1-win32-VC8P.exe Feb 09, 2010 64 MB Windows Application/binary Build 2.0.1 (using VC8, relevent only to API) Documentation Links OpenSimWindows7Instructions.pdf Feb 10, 2010 Instructions for users on Windows7 OpenSimTutorial1.pdf Feb 10, 2010 Tutorial 1 OpenSimTutorial2.pdf Feb 10, 2010 Tutorial 2 OpenSimTutorial3.pdf Feb 10, 2010 Tutorial 3 OpenSim_UsersGuide.pdf Feb 11, 2010 Updated User's Guide for the OpenSim Application GUI OpenSim_DevelopersGuide.pdf Feb 11, 2010 Developers' Guide for writing code that uses OpenSim API OpenSim 2.0 Dec 31, 2009 First public release of the OpenSim modeling API. OpenSim is now fully compliant with the SimTK architecture. Contact functionality has been introduced as well as a faster and more robust integrator from SimTK. A set of programming examples utilizing the API, a Developers' Guide, and Doxygen documentation are also included. The API allows users to create their own modeling components programmatically including Actuators, Controllers and Analyses, perform Optimization studies and embed OpenSim into their own environment. No GUI changes in this release. Notes View License Download Links OpenSim-2.0.0-win32_VC8.exe Dec 31, 2009 64 MB Windows Application/binary Distribution including headers and libs built with VisualStudio 8 Documentation Links OpenSimTutorial1.pdf Dec 31, 2009 Tutorial 1 OpenSimTutorial3.pdf Dec 31, 2009 Tutorial 3 OpenSimTutorial2.pdf Dec 31, 2009 Tutorial 2 OpenSim_DevelopersGuide.pdf Dec 31, 2009 Developers' Guide for writing code that uses OpenSim API OpenSimWindows7Instructions.pdf Jan 28, 2010 Instructions for users on Windows 7 OpenSim 1.9.1 Sep 01, 2009 OpenSim release that includes a previewer of motion capture data that allows individually visualizing, labeling and transforming motion data acquired from motion caption systems. It also adds a new analysis to compute Joint Reactions, and includes many other enhancements. Notes View License Download Links MotionDataPreviewerDemo.mov Sep 02, 2009 20 MB Any Data/images/video Demo of motion data previewer functionality (AdvanedUserWorkshop Aug '09) OpenSim-1.9.1-win32.exe Sep 01, 2009 66 MB Windows Application/binary Windows Installer of OpenSim 1.9.1 Documentation Links OpenSim_UsersGuide.pdf Sep 11, 2009 Users guide OpenSim Tutorial 1.pdf Sep 02, 2009 Tutorial 1 OpenSim Tutorial 2.pdf Sep 02, 2009 OpenSim Tutorial 3.pdf Sep 02, 2009 OpenSim 1.8.1 Mar 04, 2009 Enhancements to OpenSim 1.8 to support the tutorial presented along with GCMAS, Mar. 09. Also includes required models, setup and data files for the tutorial. Notes View License Download Links OpenSim-1.8.1-win32.exe Mar 04, 2009 63 MB Windows Application/binary Windows Installer of OpenSim 1.8.1 Documentation Links OpenSim Tutorial 2.pdf Mar 04, 2009 Tutorial 2 OpenSim Tutorial 1.pdf Mar 04, 2009 Tutorial 1 OpenSim Tutorial 3.pdf Mar 04, 2009 Tutorial 3 OpenSimUserGuide.pdf Mar 04, 2009 User Guide OpenSim 1.8 Jan 22, 2009 An upgrade of OpenSim that uses the latest functionality from Simbody (constraints, custom joints, welds). A new marker editor and an API for adding plugins to the OpenSim framework is published with examples. Notes View License Download Links OpenSim-1.8.0-win32.exe Jan 21, 2009 61 MB Windows Application/binary OpenSim 1.8 Windows Installer Documentation Links OpenSim Tutorial 1.pdf Jan 22, 2009 Tutorial 1 OpenSim Tutorial 2.pdf Jan 22, 2009 Tutorial 2 OpenSim Tutorial 3.pdf Jan 22, 2009 Tutorial 3 OpenSimUserGuide.pdf Jan 21, 2009 User",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 8,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2068b2cb-bd24-412c-890b-f9547a0fb8bc",
    "document_id": "doc_43",
    "content": "OpenSim Tutorial 3.pdf Mar 04, 2009 Tutorial 3 OpenSimUserGuide.pdf Mar 04, 2009 User Guide OpenSim 1.8 Jan 22, 2009 An upgrade of OpenSim that uses the latest functionality from Simbody (constraints, custom joints, welds). A new marker editor and an API for adding plugins to the OpenSim framework is published with examples. Notes View License Download Links OpenSim-1.8.0-win32.exe Jan 21, 2009 61 MB Windows Application/binary OpenSim 1.8 Windows Installer Documentation Links OpenSim Tutorial 1.pdf Jan 22, 2009 Tutorial 1 OpenSim Tutorial 2.pdf Jan 22, 2009 Tutorial 2 OpenSim Tutorial 3.pdf Jan 22, 2009 Tutorial 3 OpenSimUserGuide.pdf Jan 21, 2009 User Guide OpenSim 1.5.5 Jul 31, 2008 This OpenSim release adds Static Optimization to the rich set of tools offered to OpenSim users. In addition an extensive user guide provides detailed documentation of the OpenSim application and tools. Notes View License Download Links Binaries for windows platform OpenSim-1.5.5-win32.exe Jul 31, 2008 53 MB Windows Application/binary OpenSim 1.5.5 release Documentation Links Tutorials and Examples OpenSim_Tutorial1_15.pdf Jul 31, 2008 Tutorial 1 Read this first OpenSim_InstallationInstructions_11.pdf Jul 31, 2008 Installation instructions OpenSim_Tutorial2_15.pdf Jul 31, 2008 Tutorial 2 OpenSim User's Guide (URL) Aug 21, 2008 User's manual and reference OpenSim_QuickReference_15.pdf Jul 31, 2008 Quick Reference OpenSim_Tutorial3_15.pdf Jul 31, 2008 Tutorial 3 OpenSim 1.5 May 05, 2008 View License Download Links OpenSim-1.5.0-win32.exe May 05, 2008 48 MB Windows Application/binary Executable for OpenSim 1.5 Documentation Links OpenSim_GeneratingMuscleActuatedSimulation_11.pdf May 05, 2008 Tutorial on generating muscle actuated forward simulation OpenSim_Tutorial1_11.pdf May 05, 2008 Tutorial 1 OpenSim_Tutorial2_11.pdf May 05, 2008 Tutorial 2 OpenSim_Tutorial3_11.pdf May 05, 2008 Tutorial 3 OpenSim_InstallationInstructions_11.pdf May 05, 2008 Installation Instructions OpenSim_QuickReference_11.pdf May 05, 2008 Quick Reference for the GUI (Draft) OpenSim 1.1 Dec 04, 2007 Release of OpenSim that contains substantial enhancements to OpenSim 1.0. Please read \"Release Notes\" for details. Notes View License Download Links OpenSim-1.1.0-win32_110.exe Dec 04, 2007 48 MB Windows Application/binary OpenSim 1.1 release OpenSim-1.1.1-win32.exe Jan 20, 2008 48 MB Windows Application/binary OpenSim 1.1.01 Documentation Links OpenSim_HowToBuildSDFastModel_11.pdf Dec 05, 2007 How to create an OpenSim model based on SDFast dynamics engine OpenSim_Tutorial1_11.pdf Dec 05, 2007 Tutorial 1 OpenSim_Tutorial2_11.pdf Dec 05, 2007 Tutorial 2 OpenSim_Tutorial3_11.pdf Dec 05, 2007 Tutorial 3 OpenSim_GeneratingMuscleActuatedSimulation_11.pdf Dec 05, 2007 Tutorial of generating muscle actuated forward simulation OpenSim_QuickReference_11.pdf Dec 05, 2007 OpenSim GUI QuickReference OpenSim_InstallationInstructions_11.pdf Dec 11, 2007 Installation Instructions OpenSim 1.0 Aug 09, 2007 Notes View License Download Links OutputReference.zip Aug 20, 2007 43 MB Any Data/images/video Optional reference output from Gait2392_Simbody gait simulation. OpenSim-1.0.0-win32.exe Aug 20, 2007 47 MB Windows Application/binary OpenSim 1.0 release. Windows Only. Documentation Links QuickReference10.pdf Sep 08, 2007 GUI Quick Reference OpenSim_GeneratingMuscleActuatedSimulation.pdf Sep 04, 2007 Tutorial 3 OpenSim Workshop, Generating Muscle Actuated Simulation OpenSimBrochure01.pdf Aug 20, 2007 OpenSim Brochure OpenSimTutorial2.pdf Aug 20, 2007 OpenSim Workshop Tutorial #2 OpenSimTutorial1.pdf Aug 20, 2007 OpenSim Workshop Tutorial #1 Follow OpenSim Models and Examples A set of OpenSim models and associated simulation data, scripts, and set-up files actively maintained by the OpenSim project. OpenSim 4.0 Nov 19, 2018 A set of OpenSim models and associated simulation data, for",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 9,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e5eab7f7-6daa-46f1-ab1e-f084deeb9d66",
    "document_id": "doc_43",
    "content": "output from Gait2392_Simbody gait simulation. OpenSim-1.0.0-win32.exe Aug 20, 2007 47 MB Windows Application/binary OpenSim 1.0 release. Windows Only. Documentation Links QuickReference10.pdf Sep 08, 2007 GUI Quick Reference OpenSim_GeneratingMuscleActuatedSimulation.pdf Sep 04, 2007 Tutorial 3 OpenSim Workshop, Generating Muscle Actuated Simulation OpenSimBrochure01.pdf Aug 20, 2007 OpenSim Brochure OpenSimTutorial2.pdf Aug 20, 2007 OpenSim Workshop Tutorial #2 OpenSimTutorial1.pdf Aug 20, 2007 OpenSim Workshop Tutorial #1 Follow OpenSim Models and Examples A set of OpenSim models and associated simulation data, scripts, and set-up files actively maintained by the OpenSim project. OpenSim 4.0 Nov 19, 2018 A set of OpenSim models and associated simulation data, for some of the OpenSim 4.0 Tutorials and Examples. Files for the other examples are provided with your installation of the GUI. To obtain a fresh copy of the example files in the GUI, type \"installResources()\" in the GUI scripting shell. View License Download Package Download Links OptimalJump.zip Nov 19, 2018 1 MB Any Data/images/video StaticOpt_JointReaction.zip Nov 19, 2018 2 MB Any Data/images/video WorkingWithStaticOptimization.zip Nov 19, 2018 295 KB Any Data/images/video Documentation Links New Features List (URL) Feb 07, 2020 Brief summary of new features available in 4.0 and notes on how to upgrade Previous Releases OpenSim Models 3.3 Jul 10, 2015 Models and associated files updated for OpenSim 3.3, see the \"Model Documentation\" link for more details and follow the \"Examples and Tutorials\" link for additional examples. Includes a new Static Optimization example. View License Download Package Download Links Models Distributed with OpenSim 3.3 Software Models.zip Mar 20, 2014 13 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.2, in case you''ve overwritten any of the files in your installation. Additional Example Models MetabolicsExample.zip Jun 11, 2014 9 MB Any Data/images/video Model and other files for the example \"Simulation based design to reduce metabolic cost\" DynamicWalkingStarter.zip Jan 21, 2014 385 KB Any Data/images/video Model and other files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" StaticOpt_JointReaction.zip Oct 09, 2013 1 MB Any Data/images/video Example Joint reaction analysis New Static Optimization Example WorkingWithStaticOptimization.zip Jul 10, 2015 295 KB Any Data/images/video File for the example \"Working with Static Optimization\" Documentation Links Model Documentation (URL) Mar 04, 2014 Find out more about the models included with OpenSim Examples and Tutorials (URL) Mar 04, 2014 Link to find example and tutorial instructions. OpenSim Models 3.2 Mar 04, 2014 Models and associated files updated for OpenSim version 3.2. See the \"Model Documentation\" link for more information about distributed models. See the \"Examples and Tutorials\" link for more information about the additional example models. View License Download Package Download Links Models Distributed with OpenSim 3.2 Software Models.zip Mar 20, 2014 13 MB Any Data/images/video A clean",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 10,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "004b2b4c-95ee-4627-9847-28bf3c38a736",
    "document_id": "doc_43",
    "content": "for the example \"Working with Static Optimization\" Documentation Links Model Documentation (URL) Mar 04, 2014 Find out more about the models included with OpenSim Examples and Tutorials (URL) Mar 04, 2014 Link to find example and tutorial instructions. OpenSim Models 3.2 Mar 04, 2014 Models and associated files updated for OpenSim version 3.2. See the \"Model Documentation\" link for more information about distributed models. See the \"Examples and Tutorials\" link for more information about the additional example models. View License Download Package Download Links Models Distributed with OpenSim 3.2 Software Models.zip Mar 20, 2014 13 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.2, in case you've overwritten any of the files in your installation. Additional Example Models MetabolicsExample.zip Jun 11, 2014 9 MB Any Data/images/video Model and other files for the example \"Simulation based design to reduce metabolic cost\" DynamicWalkingStarter.zip Jan 21, 2014 385 KB Any Data/images/video Model and other files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" StaticOpt_JointReaction.zip Oct 09, 2013 1 MB Any Data/images/video Example Joint reaction analysis Documentation Links Model Documentation (URL) Mar 04, 2014 Find out more about the models included with OpenSim Examples and Tutorials (URL) Mar 04, 2014 Link to find example and tutorial instructions. OpenSim Models 3.1 Aug 07, 2013 Models and associated files updated for OpenSim version 3.1. See the \"Model Documentation\" link for more information about distributed models. See the \"Examples and Tutorials\" link for more information about the additional example models. View License Download Package Download Links Models Distributed with OpenSim Software Models.zip Aug 09, 2013 36 MB Any Data/images/video A clean version of the Models folder distributed with OpenSim 3.1, in case you've overwritten any of the files in your installation. Additional Example Models MetabolicsExample.zip Aug 09, 2013 11 MB Any Data/images/video Model and other files for the example \"Simulation based design to reduce metabolic cost\" ActiveAFO.zip Aug 09, 2013 21 KB Any Data/images/video Additional files for the example \"Simulation Based Design to Prevent Ankle Injury\" DynamicWalkingStarter.zip Jan 21, 2014 385 KB Any Data/images/video Model and other files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" TugOfWarMillard.zip Aug 09, 2013 7 KB Any Data/images/video Files for the example \"Designing a Muscle for a Tug-of-War Competition\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" Leg69data Aug 09, 2013 1 KB Any Data/images/video Leg Muscle Force Estimation in Swing StaticOpt_JointReaction.zip Oct 09,",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 11,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bd5d5ceb-9e9d-4307-aa18-0742dd8c0d0e",
    "document_id": "doc_43",
    "content": "files for the example \"Dynamic Walking Challenge: Go the Distance!\" Pendulum.zip Aug 09, 2013 91 KB Any Data/images/video Files for the \"Point Kinematics Example\" TugOfWarMillard.zip Aug 09, 2013 7 KB Any Data/images/video Files for the example \"Designing a Muscle for a Tug-of-War Competition\" OptimalJump.zip Aug 09, 2013 43 KB Any Data/images/video Files for the example \"Coordinating Muscles for Optimal Jump Performance\" BuildDynamicWalker.zip Aug 09, 2013 70 KB Any Data/images/video Files for the example \"From the Ground Up: Building a Passive Dynamic Walker Model\" Leg69data Aug 09, 2013 1 KB Any Data/images/video Leg Muscle Force Estimation in Swing StaticOpt_JointReaction.zip Oct 09, 2013 1 MB Any Data/images/video Example Joint reaction analysis Documentation Links Model Documentation (URL) Aug 07, 2013 Find out more about the models included with OpenSim Examples and Tutorials (URL) Aug 07, 2013 Link to find example and tutorial instructions. Follow OpenSim Source Code This package contains the source code for the libraries in the OpenSim API. Downloading and building the source are NOT necessary to run either the OpenSim Applications (GUI, Scripting) or the OpenSim API. Building from source is challenging and, as a non-commercial entity, we have limited resources to provide support for the build process. OpenSmi 4.1+ Jul 05, 2022 Source code is available through the github system here https://github.com/opensim-org/opensim-core/tags Browse for the version of your choice, download and follow the instructions on github View License PLEASE CITE THESE PAPERS Delp SL, Anderson FC, Arnold AS, Loan P, Habib A, John CT, Guendelman E, Thelen DG. OpenSim: Open-source Software to Create and Analyze Dynamic Simulations of Movement. IEEE Transactions on Biomedical Engineering. (2007) View Previous Releases OpenSim 4.0 Nov 19, 2018 Source release for OpenSim 4.0. This release includes multiple significant updates. For more information and build instructions see: https://github.com/opensim-org/opensim-core/blob/master/README.md View License Download Package Download Links OpenSim-4.0.zip Nov 19, 2018 89 MB Any Data/images/video OpenSim 4.0 source distribution OpenSim 3.3 Jul 02, 2015 Source release for OpenSim 3.3. This release includes multiple bug fixes, upgrade to Simbody 3.5.3 and is compatible with VisualStudio 2013, 2015. View License Download Package Download Links OpenSim-3.3-source.zip Jul 14, 2015 27 MB Any Source code OpenSim 3.3 source distribution Simbody-3.5.3-source.zip Jul 02, 2015 29 MB Any Source code Source code to build Simbody version 3.5.3 (needed by OpenSim 3.3 source) Documentation Links Build Instructions (URL) Mar 05, 2014 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.2 Mar 05, 2014 Source code for OpenSim 3.2 Notes View License Download Package Download Links OpenSim-3.2-source.zip Jun 27, 2014 33 MB Any Source code OpenSim 3.2 source distribution (with Python fix) Simbody-3.3.1-source.zip Mar 25, 2015 34 MB Any Source code Source code to build Simbody version 3.3.1 (needed by OpenSim 3.2 source) Documentation Links Build Instructions (URL) Mar 05, 2014 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.1 May 28, 2013 Source code for OpenSim 3.1 View License Download Package Download Links",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 12,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4088a77d-991c-4385-b6d8-0fb8e337053e",
    "document_id": "doc_43",
    "content": "configuration of your system. OpenSim 3.2 Mar 05, 2014 Source code for OpenSim 3.2 Notes View License Download Package Download Links OpenSim-3.2-source.zip Jun 27, 2014 33 MB Any Source code OpenSim 3.2 source distribution (with Python fix) Simbody-3.3.1-source.zip Mar 25, 2015 34 MB Any Source code Source code to build Simbody version 3.3.1 (needed by OpenSim 3.2 source) Documentation Links Build Instructions (URL) Mar 05, 2014 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.1 May 28, 2013 Source code for OpenSim 3.1 View License Download Package Download Links OpenSim-3.1-source.zip Jul 26, 2013 29 MB Any Source code OpenSim 3.1 source distribution Simbody-3.1-source.zip Jul 25, 2013 32 MB Any Source code Source code to build Simbody version 3.1 (needed by OpenSim source) Documentation Links Build Instructions (URL) Aug 05, 2013 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.0.1 Apr 15, 2013 Source code for OpenSim 3.0.1. Follow link under \"Documentation Links\" below for build instructions See http://simtk-confluence.stanford.edu:8080/display/OpenSim/OpenSim+3.0.1+Release+Notes for more information about what's new and how to upgrade. View License Download Package Download Links Simbody-3.0-source.zip Apr 15, 2013 48 MB Any Source code Source code to build Simbody version 3.0 needed by OpenSim source OpenSim-3.0.1-source.zip Apr 15, 2013 27 MB Any Source code OpenSim 3.0.1 source code Documentation Links Build Instructions (URL) Apr 15, 2013 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. OpenSim 3.0 Oct 24, 2012 Source code for OpenSim 3.0. Follow link under \"Documentation Links\" below for build instructions See http://simtk-confluence.stanford.edu:8080/pages/viewpage.action?pageId=3376126 for more information about what's new and how to upgrade. View License Download Package Download Links OpenSim-3.0-source.zip Nov 16, 2012 33 MB Any Source code OpenSim 3.0 source zip Simbody-3.0-source.zip Oct 29, 2012 48 MB Any Source code Source code to build Simbody version 3.0 needed by OpenSim source Documentation Links Build Instructions (URL) Oct 24, 2012 Instructions for building OpenSim from source. Steps and settings may vary depending on the configuration of your system. Follow Github Source Code Repository The Github repository contains the development version source code for the libraries in the OpenSim API. This version of the source code is under active development and is intended for C++ developers wishing to contribute to the OpenSim source code. This repository does not include source code for the OpenSim GUI. Github Master Branch Sep 19, 2016 Current OpenSim development branch View License Download Links OpenSim Master Branch (URL) Sep 19, 2016 0 Any Data/images/video 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 13,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3f22900a-e193-4170-86ae-3d6e49dcf4a8",
    "document_id": "doc_43",
    "content": "include source code for the OpenSim GUI. Github Master Branch Sep 19, 2016 Current OpenSim development branch View License Download Links OpenSim Master Branch (URL) Sep 19, 2016 0 Any Data/images/video 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/frs/?group_id=91",
      "title": "SimTK: OpenSim: Downloads",
      "section": "",
      "hierarchy": [
        "frs"
      ],
      "content_type": "reference",
      "position": 14,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2231ec1c-cb97-46ee-9adb-b77b77ddfe31",
    "document_id": "doc_130",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090074/Inverse+Dynamics",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090074",
        "Inverse+Dynamics"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ba3cc712-7b0b-4508-b2ea-e5e27893f0dd",
    "document_id": "doc_132",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089629/Forward+Dynamics",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089629",
        "Forward+Dynamics"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "10d51e3b-e967-4e3e-af3c-59936d3f6e1d",
    "document_id": "doc_45",
    "content": "Ayman Habib, Jennifer Hicks, Scott Delp, Ajay Seth, Joy Ku, Matt Petrucci, Carmichael Ong, Thomas Uchida, Nicholas Bianco, Diane Bush, Jacqueline Tran Forum Statistics and Usage SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/phpBB/indexPhpbb.php?group_id=91&pluginname=phpBB",
      "title": "SimTK: OpenSim: phpBB",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Forum Moderators:",
      "hierarchy": [
        "plugins",
        "phpBB",
        "indexPhpbb.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "09409529-495c-4c76-b6f2-b444fd38eda0",
    "document_id": "doc_182",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions OpenSim::Manager Class Reference A class that manages the execution of a simulation. More... Public Member Functions Manager ( Model &model) Constructor that takes a model only and internally uses a SimTK::RungeKuttaMersonIntegrator with default settings (accuracy, constraint tolerance, etc.). More... Manager ( Model &model, const SimTK::State &state) Convenience constructor for creating and initializing a Manager (by calling initialize() ). More... Manager () (Deprecated) A Constructor that does not take a model or controllerSet. More... Manager (const Manager &)=delete void operator= (const Manager &)=delete void setSessionName (const std::string &name) void setModel ( Model &model) const std::string & getSessionName () const const std::string & toString () const void setPerformAnalyses (bool performAnalyses) void setWriteToStorage (bool writeToStorage) void setUseSpecifiedDT (bool aTrueFalse) bool getUseSpecifiedDT () const void setUseConstantDT (bool aTrueFalse) bool getUseConstantDT () const const Array < double > & getDTArray () void setDTArray (const SimTK::Vector_< double > &aDT, double aTI=0.0) double getDTArrayDT (int aStep) void printDTArray (const char *aFileName=NULL) const Array < double > & getTimeArray () double getTimeArrayTime (int aStep) int getTimeArrayStep (double aTime) void printTimeArray (const char *aFileName=NULL) void resetTimeAndDTArrays (double aTime) double getNextTimeArrayTime (double aTime) void initialize (const SimTK::State &s) Initializes the Manager by creating and initializing the underlying SimTK::TimeStepper. More... const SimTK::State & integrate (double finalTime) Integrate the equations of motion for the specified model, given the current state (at which the integration will start) and a finalTime. More... const SimTK::State & getState () const Get the current State from the Integrator associated with this Manager . More... double getFixedStepSize (int tArrayStep) const bool hasStateStorage () const void setStateStorage ( Storage &aStorage) Set the Storage object to be used for storing states. More... Storage & getStateStorage () const TimeSeriesTable getStatesTable () const void halt () void clearHalt () bool checkHalt () Configure the Integrator Note Call these functions before calling Manager::initialize() . enum IntegratorMethod { IntegratorMethod::ExplicitEuler = 0, IntegratorMethod::RungeKutta2 = 1, IntegratorMethod::RungeKutta3 = 2, IntegratorMethod::RungeKuttaFeldberg = 3, IntegratorMethod::RungeKuttaMerson = 4, IntegratorMethod::SemiExplicitEuler2 = 5, IntegratorMethod::Verlet = 6 } Supported integrator methods. More... void setIntegratorMethod ( IntegratorMethod integMethod) Sets the integrator method used via IntegratorMethod enum. More... SimTK::Integrator & getIntegrator () const void setIntegratorAccuracy (double accuracy) Sets the accuracy of the integrator. More... void setIntegratorMinimumStepSize (double hmin) Sets the minimum step size of the integrator. More... void setIntegratorMaximumStepSize (double hmax) Sets the maximum step size of the integrator. More... void setIntegratorInternalStepLimit (int nSteps) Sets the limit of steps the integrator can take per call of stepTo() . More... Detailed Description A class that manages the execution of a simulation. This class uses a SimTK::Integrator and SimTK::TimeStepper to perform the simulation. By default, a Runge-Kutta-Merson integrator is used, but can be changed by using setIntegratorMethod() . In order to prevent an inconsistency between the Integrator and TimeStepper, we only create a TimeStepper once, specifically when we call initialize() . To ensure this, the Manager will throw an exception if initialize() is called more than once. Note that editing the SimTK::State after",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Manager.html",
      "title": "API: OpenSim::Manager Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Manager.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9045de2f-4054-40a2-acdf-b4b3a9ccdf00",
    "document_id": "doc_182",
    "content": "setIntegratorInternalStepLimit (int nSteps) Sets the limit of steps the integrator can take per call of stepTo() . More... Detailed Description A class that manages the execution of a simulation. This class uses a SimTK::Integrator and SimTK::TimeStepper to perform the simulation. By default, a Runge-Kutta-Merson integrator is used, but can be changed by using setIntegratorMethod() . In order to prevent an inconsistency between the Integrator and TimeStepper, we only create a TimeStepper once, specifically when we call initialize() . To ensure this, the Manager will throw an exception if initialize() is called more than once. Note that editing the SimTK::State after calling initialize() will not affect the simulation. Note that this interface means that you cannot \"reinitialize\" a Manager . If you make changes to the SimTK::State, a new Manager must be created before integrating again. Examples: exampleCustomImplicitAuxiliaryDynamics.cpp . Member Enumeration Documentation ◆ IntegratorMethod enum OpenSim::Manager::IntegratorMethod strong Supported integrator methods. For MATLAB, int's must be used rather than enum's (see example in setIntegratorMethod(IntegratorMethod) ). Enumerator ExplicitEuler 0 : For details, see SimTK::ExplicitEulerIntegrator. RungeKutta2 1 : For details, see SimTK::RungeKutta2Integrator. RungeKutta3 2 : For details, see SimTK::RungeKutta3Integrator. RungeKuttaFeldberg 3 : For details, see SimTK::RungeKuttaFeldbergIntegrator. RungeKuttaMerson 4 : For details, see SimTK::RungeKuttaMersonIntegrator. SemiExplicitEuler2 5 : For details, see SimTK::SemiExplicitEuler2Integrator. Verlet 6 : For details, see SimTK::VerletIntegrator. Constructor & Destructor Documentation ◆ Manager() [1/4] OpenSim::Manager::Manager ( Model & model ) Constructor that takes a model only and internally uses a SimTK::RungeKuttaMersonIntegrator with default settings (accuracy, constraint tolerance, etc.). ◆ Manager() [2/4] OpenSim::Manager::Manager ( Model & model , const SimTK::State & state ) Convenience constructor for creating and initializing a Manager (by calling initialize() ). Do not use this constructor if you intend to change integrator settings; changes to the integrator may not take effect after initializing. ◆ Manager() [3/4] OpenSim::Manager::Manager ( ) (Deprecated) A Constructor that does not take a model or controllerSet. This constructor also does not set an integrator; you must call setIntegrator() on your own. You should use one of the other constructors. ◆ Manager() [4/4] OpenSim::Manager::Manager ( const Manager & ) delete Member Function Documentation ◆ checkHalt() bool OpenSim::Manager::checkHalt ( ) ◆ clearHalt() void OpenSim::Manager::clearHalt ( ) ◆ getDTArray() const Array <double>& OpenSim::Manager::getDTArray ( ) ◆ getDTArrayDT() double OpenSim::Manager::getDTArrayDT ( int aStep ) ◆ getFixedStepSize() double OpenSim::Manager::getFixedStepSize ( int tArrayStep ) const ◆ getIntegrator() SimTK::Integrator& OpenSim::Manager::getIntegrator ( ) const ◆ getNextTimeArrayTime() double OpenSim::Manager::getNextTimeArrayTime ( double aTime ) ◆ getSessionName() const std::string& OpenSim::Manager::getSessionName ( ) const ◆ getState() const SimTK::State& OpenSim::Manager::getState ( ) const Get the current State from the Integrator associated with this Manager . ◆ getStatesTable() TimeSeriesTable OpenSim::Manager::getStatesTable ( ) const ◆ getStateStorage() Storage & OpenSim::Manager::getStateStorage ( ) const ◆ getTimeArray() const Array <double>& OpenSim::Manager::getTimeArray ( ) ◆ getTimeArrayStep() int OpenSim::Manager::getTimeArrayStep ( double aTime ) ◆ getTimeArrayTime() double OpenSim::Manager::getTimeArrayTime ( int aStep ) ◆ getUseConstantDT() bool OpenSim::Manager::getUseConstantDT ( ) const ◆ getUseSpecifiedDT() bool OpenSim::Manager::getUseSpecifiedDT ( ) const ◆ halt() void OpenSim::Manager::halt ( ) ◆ hasStateStorage() bool OpenSim::Manager::hasStateStorage ( ) const ◆ initialize() void OpenSim::Manager::initialize ( const SimTK::State & s",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Manager.html",
      "title": "API: OpenSim::Manager Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Manager.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "866952aa-89b2-4bc3-994e-d8e9ae89e7f2",
    "document_id": "doc_182",
    "content": "std::string& OpenSim::Manager::getSessionName ( ) const ◆ getState() const SimTK::State& OpenSim::Manager::getState ( ) const Get the current State from the Integrator associated with this Manager . ◆ getStatesTable() TimeSeriesTable OpenSim::Manager::getStatesTable ( ) const ◆ getStateStorage() Storage & OpenSim::Manager::getStateStorage ( ) const ◆ getTimeArray() const Array <double>& OpenSim::Manager::getTimeArray ( ) ◆ getTimeArrayStep() int OpenSim::Manager::getTimeArrayStep ( double aTime ) ◆ getTimeArrayTime() double OpenSim::Manager::getTimeArrayTime ( int aStep ) ◆ getUseConstantDT() bool OpenSim::Manager::getUseConstantDT ( ) const ◆ getUseSpecifiedDT() bool OpenSim::Manager::getUseSpecifiedDT ( ) const ◆ halt() void OpenSim::Manager::halt ( ) ◆ hasStateStorage() bool OpenSim::Manager::hasStateStorage ( ) const ◆ initialize() void OpenSim::Manager::initialize ( const SimTK::State & s ) Initializes the Manager by creating and initializing the underlying SimTK::TimeStepper. This must be called before calling Manager::integrate() Subsequent changes to the State object passed in here will not affect the simulation. Calling this function multiple times with the same Manager will trigger an Exception . Changes to the integrator (e.g., setIntegratorAccuracy() ) after calling initialize() may not have any effect. ◆ integrate() const SimTK::State& OpenSim::Manager::integrate ( double finalTime ) Integrate the equations of motion for the specified model, given the current state (at which the integration will start) and a finalTime. You must call Manager::initialize() before calling this function. If you must update states or controls in a loop, you must recreate the manager within the loop (such discontinuous changes are considered \"events\" and cannot be handled during integration of the otherwise continuous system). The proper way to handle this situation is to create a SimTK::EventHandler. Example: Integrating from time = 1s to time = 2s SimTK::State state = model.initSystem(); Manager manager(model); state.setTime(1.0); manager.initialize(state); state = manager.integrate(2.0); Example: Integrating from time = 1s to time = 2s using the convenience constructor SimTK::State state = model.initSystem(); state.setTime(1.0); Manager manager(model, state); state = manager.integrate(2.0); Example: Integrate from time = 0s to time = 10s, in 2s increments dTime = 2.0; finalTime = 10.0; int n = int(round(finalTime/dTime)); state.setTime(0.0); manager.initialize(state); for ( int i = 1; i <= n; ++i) { state = manager.integrate(i*dTime); } Example: Integrate from time = 0s to time = 10s, updating the state (e.g., the model's first coordinate value) every 2s dTime = 2.0; finalTime = 10.0; int n = int(round(finalTime/dTime)); state.setTime(0.0); for ( int i = 0; i < n; ++i) { model.getCoordinateSet().get(0).setValue(state, 0.1*i); Manager manager(model); state.setTime(i*dTime); manager.initialize(state); state = manager.integrate((i+1)*dTime); } ◆ operator=() void OpenSim::Manager::operator= ( const Manager & ) delete ◆ printDTArray() void OpenSim::Manager::printDTArray ( const char * aFileName = NULL ) ◆ printTimeArray() void OpenSim::Manager::printTimeArray ( const char * aFileName = NULL ) ◆ resetTimeAndDTArrays() void OpenSim::Manager::resetTimeAndDTArrays ( double aTime ) ◆ setDTArray() void OpenSim::Manager::setDTArray ( const SimTK::Vector_< double > & aDT , double aTI = 0.0 ) ◆ setIntegratorAccuracy() void OpenSim::Manager::setIntegratorAccuracy ( double accuracy ) Sets the accuracy of the integrator. For more details, see SimTK::Integrator::setAccuracy(SimTK::Real) . ◆ setIntegratorInternalStepLimit() void OpenSim::Manager::setIntegratorInternalStepLimit ( int nSteps ) Sets the limit of steps the integrator can take per call of stepTo() . Note that Manager::integrate() calls stepTo() for each interval when a fixed step size",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Manager.html",
      "title": "API: OpenSim::Manager Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Manager.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1b734e26-4562-4a42-b72f-bb3cc131c12f",
    "document_id": "doc_182",
    "content": "( const char * aFileName = NULL ) ◆ printTimeArray() void OpenSim::Manager::printTimeArray ( const char * aFileName = NULL ) ◆ resetTimeAndDTArrays() void OpenSim::Manager::resetTimeAndDTArrays ( double aTime ) ◆ setDTArray() void OpenSim::Manager::setDTArray ( const SimTK::Vector_< double > & aDT , double aTI = 0.0 ) ◆ setIntegratorAccuracy() void OpenSim::Manager::setIntegratorAccuracy ( double accuracy ) Sets the accuracy of the integrator. For more details, see SimTK::Integrator::setAccuracy(SimTK::Real) . ◆ setIntegratorInternalStepLimit() void OpenSim::Manager::setIntegratorInternalStepLimit ( int nSteps ) Sets the limit of steps the integrator can take per call of stepTo() . Note that Manager::integrate() calls stepTo() for each interval when a fixed step size is used. For more details, see SimTK::Integrator::setInternalStepLimit(int). ◆ setIntegratorMaximumStepSize() void OpenSim::Manager::setIntegratorMaximumStepSize ( double hmax ) Sets the maximum step size of the integrator. For more details, see SimTK::Integrator::setMaximumStepSize(SimTK::Real) . ◆ setIntegratorMethod() void OpenSim::Manager::setIntegratorMethod ( IntegratorMethod integMethod ) Sets the integrator method used via IntegratorMethod enum. The integrator will be set to its default options, even if the caller requests the same integrator method. Note that this function must be called before Manager::initialize() . C++ example auto manager = Manager (model); manager.setIntegratorMethod( Manager::IntegratorMethod::SemiExplicitEuler2 ); Python example import opensim manager = opensim.Manager(model) manager.setIntegratorMethod(opensim.Manager.IntegratorMethod_SemiExplicitEuler2) MATLAB example import org.opensim.modeling.* manager = Manager (model); manager.setIntegratorMethod(5); ◆ setIntegratorMinimumStepSize() void OpenSim::Manager::setIntegratorMinimumStepSize ( double hmin ) Sets the minimum step size of the integrator. For more details, see SimTK::Integrator::setMinimumStepSize(SimTK::Real) . ◆ setModel() void OpenSim::Manager::setModel ( Model & model ) ◆ setPerformAnalyses() void OpenSim::Manager::setPerformAnalyses ( bool performAnalyses ) inline ◆ setSessionName() void OpenSim::Manager::setSessionName ( const std::string & name ) ◆ setStateStorage() void OpenSim::Manager::setStateStorage ( Storage & aStorage ) Set the Storage object to be used for storing states. The Manager takes ownership of the passed-in Storage . ◆ setUseConstantDT() void OpenSim::Manager::setUseConstantDT ( bool aTrueFalse ) ◆ setUseSpecifiedDT() void OpenSim::Manager::setUseSpecifiedDT ( bool aTrueFalse ) ◆ setWriteToStorage() void OpenSim::Manager::setWriteToStorage ( bool writeToStorage ) inline ◆ toString() const std::string& OpenSim::Manager::toString ( ) const The documentation for this class was generated from the following file: OpenSim/Simulation/Manager/Manager.h OpenSim Manager Generated on Thu Mar 21 2024 15:02:55 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Manager.html",
      "title": "API: OpenSim::Manager Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Manager.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8f2aaa56-371b-4916-8ba7-143fb44de279",
    "document_id": "doc_180",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53094754/Authors",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53094754",
        "Authors"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2f5903e3-a41e-47e2-a170-e7ad15d792e1",
    "document_id": "doc_46",
    "content": "Summary Access the GitHub Repository of this project's code. Repository History Total number of commits: 15448 Number of contributors: 66 Last commit: Mar 21, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/githubAccess?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Source Code:",
      "hierarchy": [
        "githubAccess"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4d0c8381-9caf-4fae-b864-e5a081ffb576",
    "document_id": "doc_144",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089342/Scripting+and+Development",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089342",
        "Scripting+and+Development"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9b65b56d-eae2-4f19-b7f9-e645a0e50612",
    "document_id": "doc_30",
    "content": "SimTK Feedback on SimTK If you have a question about a specific project hosted on the SimTK website (e.g., OpenSim , SimVascular , OpenMM ), please contact the administrators of the specific project. For general questions about the SimTK website, visit our FAQ page . We also encourage you to post to and browse our discussion forum . To report suggestions or bugs on the SimTK website, you can file a new issue . For any other concerns, contact the SimTK webmaster . Thanks in advance for your feedback and interest in SimTK. SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/feedback.php",
      "title": "SimTK",
      "section": "",
      "hierarchy": [
        "feedback.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "acf6fc08-2ede-49f2-aba0-1acfb6269d61",
    "document_id": "doc_120",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090143/Snapshots+and+Movies",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090143",
        "Snapshots+and+Movies"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "76972cd9-dd26-41cf-b515-2204f7434a81",
    "document_id": "doc_170",
    "content": "projects 162849 people Primary Content All ( ) Applications ( 0 ) Data Sets ( 0 ) Developer Tools ( 0 ) Educational and Training Material ( 0 ) Miscellaneous ( 0 ) Models ( 0 ) Scripts, Plug-Ins, and Other Utilities ( 0 ) Software Libraries ( 0 ) Web Site ( 0 ) Biocomputational Focus All ( ) Experimental Analysis ( 0 ) Image Processing ( 0 ) Network Modeling and Analysis ( 0 ) Physics-Based Simulation ( 0 ) Statistical Analysis ( 0 ) Visualization ( 0 ) Biological Applications All ( ) Cardiovascular System ( 0 ) Cell ( 0 ) Myosin ( 0 ) Neuromuscular System ( 0 ) Protein ( 0 ) RNA ( 0 ) Tissue ( 0 ) Primary Content All ( ) Applications ( 0 ) Data Sets ( 0 ) Developer Tools ( 0 ) Educational and Training Material ( 0 ) Miscellaneous ( 0 ) Models ( 0 ) Scripts, Plug-Ins, and Other Utilities ( 0 ) Software Libraries ( 0 ) Web Site ( 0 ) Biocomputational Focus All ( ) Experimental Analysis ( 0 ) Image Processing ( 0 ) Network Modeling and Analysis ( 0 ) Physics-Based Simulation ( 0 ) Statistical Analysis ( 0 ) Visualization ( 0 ) Biological Applications All ( ) Cardiovascular System ( 0 ) Cell ( 0 ) Myosin ( 0 ) Neuromuscular System ( 0 ) Protein ( 0 ) RNA ( 0 ) Tissue ( 0 ) SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/search/search.php?srch=opensim&type_of_search=soft",
      "title": "SimTK: Search",
      "section": "Narrow search results SimTK is home to: 1914 projects 162849 people Project search results: opensim Sort by: Most relevant Most downloads Date updated Title SimTK is home to:",
      "hierarchy": [
        "search",
        "search.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b1049a4d-fd2b-4e66-aa37-f7bea74950ad",
    "document_id": "doc_21",
    "content": "369, 2020. Choy JS, Leng S, Acevedo-Bolton G, Shaul S, Guo X, Zhong L, Guccione JM, Kassab GS. Efficacy of Intramyocardial Injection of Algisyl-LVR for the treatment of Ischemic Heart Failure in Swine. (Under Review in Circulation Research) Inouye JM, Handsfield GG, and Blemker SS. Fiber tractography for finite-element modeling of transversely isotropic material structures of arbitrary shape using computational fluid dynamics. Proceedings of the 2015 Summer Simulation Multi-Conference. Discussion Re: Ten Simple Rules Survey Data Analysis Credible Practice of Modeling & Simulation in Healthcare Jan 28, 2025 Re: Follow up discussion for webinars Credible Practice of Modeling & Simulation in Healthcare Jan 27, 2025 Re: Workflows & Standards & good practices Credible Practice of Modeling & Simulation in Healthcare Sep 6, 2024 Administrators Joy Ku Grace Peng Jacklyn Ebiasah SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/communityPage.php?cat=1004&sort=date&page=0&srch=&",
      "title": "SimTK: Community",
      "section": "IMAG/MSM Consortium The Consortium is a group of researchers interested in the activities to grow the field of multiscale modeling in biomedical, biological and behavioral systems and promote multidisciplinary scientific collaboration Featured projects Related communities Recently updated projects total projects 3 projects with downloads See all community projects Add project to community News The Reference Model for COVID-19 - The First Multi-Scale Ensemble Disease Model The Reference Model for Disease Progression Jun 6, 2021 Publication on Ten Rules for Credible Practice of Modeling and Simulation in Healthcare Credible Practice of Modeling & Simulation in Healthcare Oct 21, 2020 The Reference Model now models COVID-19 The Reference Model for Disease Progression Jul 31, 2020 Publications Erdemir, A, Mulugeta, L, Ku, JP, Drach, A, Horner, M, Morrison, TM, Peng, GCY, Vadigepalli, R, Lytton, WW, Myers, JG, \"Credible Practice of Modeling and Simulation in Healthcare: Ten Rules from a Multidisciplinary Perspective,\" Journal of Translational Medicine, 18:",
      "hierarchy": [
        "category",
        "communityPage.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "01a87efb-fd77-4042-970f-b8dea58ba272",
    "document_id": "doc_79",
    "content": "Spasticity model in OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (10) List Map More info 678 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provides a model of spasticity that can be added to any muscle in an .osim model. The spastic muscle will show spastic behavior when running for example a Forward or CMC tool. Download Latest Releases Spastic Controller Main C++: Spastic Controller Spastic Controller Plugin C++: Spastic Controller Plugin Spastic Controller Plugin dll: SpasticControllerPlugin.dll Spasticity plugin Osim3.0: Spastic Controller OpenSim 30 License: Spasticity plugin Osim3.0 In this project a spasticity model is created in OpenSim. This model is implemented by means of a controller plugin. This so-called Spastic Controller is a controller that adds a spasticity effect to any Thelen2003Muscle to which it is assigned in an OpenSim model. The controller will excite the muscle to which it is assigned when the muscle fibers of this muscle are stretched. The Spastic Controller is developed and validated using experimental data of an instrumented clinical spasticity test. 766 downloads 0 forum posts 10 followers Last updated Feb 10, 2015 Project Statistics Join Mailing Lists Suggest Idea Marjolein van der Krogt Ajay Seth Lynn Bar-On Thalia Kindt Katherine Steele Scott Delp People also viewed Simulations of Crouch Gait Muscle contributions to mass center... EMG-informed Computed Muscle Control for Dynamic... How much muscle strength is required to walk in... Evertor and invertor muscle co-activation... Clinical Gait Analysis (Vicon - OpenSim) Toolbox Multidimensional Cubic B-Spline Neuromuscular Models for the Predictive... See all Stiff-knee walking simulations Simulating the effects of weakness and muscle... Evaluation of In Vivo Knee Load Predictions Using... How Robust is Human Gait to Calf Muscle Shortening? identification of cerebral palsy trunk muscles' role... Human Posture and Balance Platform in OpenSim Sensory Components for Simulating Postural Feedback... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/spasticitymodel",
      "title": "SimTK: Spasticity model in OpenSim: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "spasticitymodel"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d70c5f6e-be19-4a31-b7f9-1249beacdbb6",
    "document_id": "doc_137",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089600/Joint+Reactions+Analysis",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089600",
        "Joint+Reactions+Analysis"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "9d5143f2-5980-4188-ba65-9f6937508acd",
    "document_id": "doc_184",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Friends OpenSim::Model Class Reference A concrete class that specifies the interface to a musculoskeletal model. More... Inheritance diagram for OpenSim::Model: OpenSim Properties, Sockets, Outputs, Inputs Properties (single-value) std::string credits \"Credits (e.g., model author names) associated with the model.\" More... std::string publications \"Publications and references associated with the model.\" More... std::string length_units \"Units for all lengths.\" More... std::string force_units \"Units for all forces.\" More... double assembly_accuracy \"Specify how accurate the resulting configuration of a model assembly \" \"should be. This translates to the number of significant digits in the \" \"resulting coordinate values. Therefore, if you require initial conditions \" \"accurate to four significant digits, use a minimum of 1e-4 as the accuracy.\" \"The default setting is 1e-9 as to satisfy the most stringent requirements by \" \"default. NOTE: Failure for a model to satisfy the assembly accuracy often \" \"indicates inconsistency in the constraints. For example, the feet are welded \" \"at locations measured to five significant digits while the model lacks dofs \" \"to change stance width, in which case it cannot achieve 1e-9 accuracy.\" More... SimTK::Vec3 gravity \"Acceleration due to gravity, expressed in ground.\" More... Ground ground \"The model's ground reference frame.\" More... Properties (unnamed) BodySet BodySet \"List of bodies that make up this model.\" More... JointSet JointSet \"List of joints that connect the bodies.\" More... ConstraintSet ConstraintSet \"Constraints in the model.\" More... MarkerSet MarkerSet \"Markers in the model.\" More... ForceSet ForceSet \"Forces in the model (includes Actuators).\" More... ControllerSet ControllerSet \"Controllers that provide the control inputs for Actuators.\" More... ContactGeometrySet ContactGeometrySet \"Geometry to be used in contact forces.\" More... ProbeSet ProbeSet \"Probes in the model.\" More... ComponentSet ComponentSet \"Additional components in the model.\" More... ModelVisualPreferences ModelVisualPreferences \"Visual preferences for this model.\" More... Outputs SimTK::Vec3 com_position Provides the value of calcMassCenterPosition() and is available at stage SimTK::Stage::Position . More... SimTK::Vec3 com_velocity Provides the value of calcMassCenterVelocity() and is available at stage SimTK::Stage::Velocity . More... SimTK::Vec3 com_acceleration Provides the value of calcMassCenterAcceleration() and is available at stage SimTK::Stage::Acceleration . More... double kinetic_energy Provides the value of calcKineticEnergy() and is available at stage SimTK::Stage::Position . More... double potential_energy Provides the value of calcPotentialEnergy() and is available at stage SimTK::Stage::Velocity . More... SimTK::SpatialVec momentum Provides the value of calcMomentum() and is available at stage SimTK::Stage::Velocity . More... SimTK::Vec3 angular_momentum Provides the value of calcAngularMomentum() and is available at stage SimTK::Stage::Velocity . More... SimTK::Vec3 linear_momentum Provides the value of calcLinearMomentum() and is available at stage SimTK::Stage::Velocity . More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Component Component components \"List of components that this component owns and serializes.\" More... Public Member Functions Model () Default constructor creates a Model containing only the Ground frame and a set of default properties. More... Model (const std::string &filename) Constructor from an OpenSim XML model file. More... void finalizeConnections () Satisfy all connections (Sockets and Inputs) in the model, using this model as the root Component . More... void setup",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4633bdda-a055-44fa-b825-da83f3b56b57",
    "document_id": "doc_184",
    "content": "and is available at stage SimTK::Stage::Velocity . More... SimTK::Vec3 linear_momentum Provides the value of calcLinearMomentum() and is available at stage SimTK::Stage::Velocity . More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Component Component components \"List of components that this component owns and serializes.\" More... Public Member Functions Model () Default constructor creates a Model containing only the Ground frame and a set of default properties. More... Model (const std::string &filename) Constructor from an OpenSim XML model file. More... void finalizeConnections () Satisfy all connections (Sockets and Inputs) in the model, using this model as the root Component . More... void setup () Perform some set up functions that happen after the object has been deserialized. More... void cleanup () Perform some clean up functions that are normally done from the destructor however this gives the GUI a way to proactively do the cleaning without waiting for garbage collection to do the actual cleanup. More... Model * clone () const override Model clone() override that invokes finalizeFromProperties() on a default copy constructed Model , prior to returning the Model . More... const std::string & getConcreteClassName () const override Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... void buildSystem () After the Model and its components have been constructed, call this to interconnect the components and then create the Simbody MultibodySystem needed to represent the Model computationally. More... SimTK::State & initializeState () After buildSystem() has been called, and any additional modifications to the Simbody MultibodySystem have been made, call this method to finalize the MultibodySystem (by calling its realizeTopology() method), obtain an initial state, and assemble it so that position constraints are satisfied. More... SimTK::State & initSystem () Convenience method that invokes buildSystem() and then initializeState() . More... const SimTK::State & getWorkingState () const Convenience method that returns a reference to the model's 'working' state. More... SimTK::State & updWorkingState () void initStateWithoutRecreatingSystem (SimTK::State &state) const This is called after the Model is fully created but before starting a simulation. More... void invalidateSystem () Mark the computational system as invalid. More... bool isValidSystem () const Check that the underlying computational system representing the model is valid. More... void formStateStorage (const Storage &originalStorage, Storage &statesStorage, bool warnUnspecifiedStates=true) const Create a storage (statesStorage) that has same label order as model's states with values populated from originalStorage. More... void formQStorage (const Storage &originalStorage, Storage &qStorage) void updateAssemblyConditions (SimTK::State &s) Update the AssemblySolver to the latest coordinate locking/constraints. More... void assemble (SimTK::State &state, const Coordinate *coord=NULL, double weight=10) Find the kinematic state of the model that satisfies constraints and coordinate goals If assemble is being called due to a coordinate set value, provide the option to weight that coordinate value more heavily if specified. More... void equilibrateMuscles (SimTK::State &state) Update the state of all Muscles so they are in equilibrium. More... void removeProbe ( Probe *probe) remove passed in Probe from model More... const std::string & getInputFileName () const Get the XML file name used",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "55dd1553-c68a-4415-bf6d-5d095e01a260",
    "document_id": "doc_184",
    "content": "&qStorage) void updateAssemblyConditions (SimTK::State &s) Update the AssemblySolver to the latest coordinate locking/constraints. More... void assemble (SimTK::State &state, const Coordinate *coord=NULL, double weight=10) Find the kinematic state of the model that satisfies constraints and coordinate goals If assemble is being called due to a coordinate set value, provide the option to weight that coordinate value more heavily if specified. More... void equilibrateMuscles (SimTK::State &state) Update the state of all Muscles so they are in equilibrium. More... void removeProbe ( Probe *probe) remove passed in Probe from model More... const std::string & getInputFileName () const Get the XML file name used to construct the model. More... void setInputFileName (const std::string &fileName) Set the XML file name used to construct the model. More... const std::string & getCredits () const Get the credits (e.g., model author names) associated with the model. More... void setAuthors (const std::string &aCredits) Set the credits (e.g., model author names) associated with the model. More... const std::string & getPublications () const Get the publications associated with the model. More... void setPublications (const std::string &aPublications) Set the publications associated with the model. More... const Units & getLengthUnits () const Get the length units associated with the model. More... const Units & getForceUnits () const Get the force units associated with the model. More... SimTK::Vec3 getGravity () const Get the gravity vector in the global frame. More... bool setGravity (const SimTK::Vec3 &aGrav) Set the gravity vector in the global frame. More... int getNumMarkers () const Get the number of markers in the model. More... int getNumContactGeometries () const Get the number of ContactGeometries in the model. More... int getNumBodies () const Get the total number of bodies in the model. More... int getNumJoints () const Get the total number of joints in the model. More... int getNumCoordinates () const Get the total number of coordinates in the model. More... int getNumSpeeds () const Get the total number of speeds in the model. More... int getNumConstraints () const Get the total number of constraints in the model. More... int getNumProbes () const Get the total number of probes in the model. More... const Set < Actuator > & getActuators () const Get the subset of Forces in the model which are actuators. More... Set < Actuator > & updActuators () const Set < Muscle > & getMuscles () const Get the subset of Forces in the model which are muscles. More... Set < Muscle > & updMuscles () const ForceSet & getForceSet () const ForceSet & updForceSet () const ProbeSet & getProbeSet () const Get the subset of Probes in the model. More... ProbeSet & updProbeSet () const ComponentSet & getMiscModelComponentSet () const Get the subst of misc ModelComponents in the model. More... ComponentSet & updMiscModelComponentSet () int getNumAnalyses () const Get the number of analyses in the model. More... int getNumControls () const Get the number of controls for this the model. More... SimTK::Vector & updDefaultControls () const Writable access to the default values for controls. More... void setDefaultControls (const SimTK::Vector",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b9b49385-8c1b-4cdc-84f3-39f38eac37c3",
    "document_id": "doc_184",
    "content": "< Muscle > & updMuscles () const ForceSet & getForceSet () const ForceSet & updForceSet () const ProbeSet & getProbeSet () const Get the subset of Probes in the model. More... ProbeSet & updProbeSet () const ComponentSet & getMiscModelComponentSet () const Get the subst of misc ModelComponents in the model. More... ComponentSet & updMiscModelComponentSet () int getNumAnalyses () const Get the number of analyses in the model. More... int getNumControls () const Get the number of controls for this the model. More... SimTK::Vector & updDefaultControls () const Writable access to the default values for controls. More... void setDefaultControls (const SimTK::Vector &controls) const const SimTK::Vector & getDefaultControls () const SimTK::Vector & updControls (const SimTK::State &s) const Update the controls for this the model at a given state. More... void markControlsAsValid (const SimTK::State &s) const Mark controls as valid after an update at a given state. More... void setControls (const SimTK::State &s, const SimTK::Vector &controls) const Alternatively, set the controls on the model at a given state. More... const SimTK::Vector & getControls (const SimTK::State &s) const Const access to controls does not invalidate dynamics. More... void computeControls (const SimTK::State &state, SimTK::Vector &controls) const Compute the controls for the model. More... bool isControlled () const Get a flag indicating if the model needs controls to operate its actuators. More... void storeControls (const SimTK::State &s, int step) void printControlStorage (const std::string &fileName) const TimeSeriesTable getControlsTable () const const ControllerSet & getControllerSet () const ControllerSet & updControllerSet () bool getAllControllersEnabled () const void setAllControllersEnabled (bool enabled) void applyDefaultConfiguration (SimTK::State &s) const SimbodyEngine & getSimbodyEngine () const Get the model's dynamics engine. More... SimbodyEngine & updSimbodyEngine () void computeStateVariableDerivatives (const SimTK::State &s) const override Compute the derivatives of the generalized coordinates and speeds. More... double getTotalMass (const SimTK::State &s) const Get the total mass of the model. More... SimTK::Inertia getInertiaAboutMassCenter (const SimTK::State &s) const Get the whole-body inertia of the model about the center of mass, expressed in the Ground frame. More... SimTK::Vec3 calcMassCenterPosition (const SimTK::State &s) const Return the position vector of the system mass center, measured from the Ground origin, and expressed in Ground . More... SimTK::Vec3 calcMassCenterVelocity (const SimTK::State &s) const Return the velocity vector of the system mass center, measured from the Ground origin, and expressed in Ground . More... SimTK::Vec3 calcMassCenterAcceleration (const SimTK::State &s) const Return the acceleration vector of the system mass center, measured from the Ground origin, and expressed in Ground . More... SimTK::SpatialVec calcMomentum (const SimTK::State &s) const Return the spatial momentum about the system mass center expressed in Ground . More... SimTK::Vec3 calcAngularMomentum (const SimTK::State &s) const Return the angular momentum about the system mass center expressed in Ground . More... SimTK::Vec3 calcLinearMomentum (const SimTK::State &s) const Return the linear momentum expressed in Ground . More... double calcKineticEnergy (const SimTK::State &s) const Return the total Kinetic Energy for the underlying system. More... double calcPotentialEnergy (const SimTK::State &s) const Return the total Potential Energy for the underlying system. More... int getNumMuscleStates () const int getNumProbeStates () const CoordinateSet",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "067872b7-3509-4615-9c29-0ac7f243c4a9",
    "document_id": "doc_184",
    "content": "in Ground . More... SimTK::SpatialVec calcMomentum (const SimTK::State &s) const Return the spatial momentum about the system mass center expressed in Ground . More... SimTK::Vec3 calcAngularMomentum (const SimTK::State &s) const Return the angular momentum about the system mass center expressed in Ground . More... SimTK::Vec3 calcLinearMomentum (const SimTK::State &s) const Return the linear momentum expressed in Ground . More... double calcKineticEnergy (const SimTK::State &s) const Return the total Kinetic Energy for the underlying system. More... double calcPotentialEnergy (const SimTK::State &s) const Return the total Potential Energy for the underlying system. More... int getNumMuscleStates () const int getNumProbeStates () const CoordinateSet & updCoordinateSet () const CoordinateSet & getCoordinateSet () const std::vector< SimTK::ReferencePtr< const OpenSim::Coordinate > > getCoordinatesInMultibodyTreeOrder () const Obtain a list of Model 's Coordinates in the order they appear in the MultibodySystem after Model::initSystem() has been called. More... SimTK::Array_< std::string > getCoordinateNamesInMultibodyTreeOrder () A variant of getCoordinatesInMultibodyTreeOrder that returns names for Scripting users. More... std::string getWarningMesssageForMotionTypeInconsistency () const Get a warning message if any Coordinates have a MotionType that is NOT consistent with its previous user-specified value that existed in Model files prior to OpenSim 4.0. More... BodySet & updBodySet () const BodySet & getBodySet () const JointSet & updJointSet () const JointSet & getJointSet () const AnalysisSet & updAnalysisSet () const AnalysisSet & getAnalysisSet () const ContactGeometrySet & updContactGeometrySet () const ContactGeometrySet & getContactGeometrySet () const const Ground & getGround () const Get a const reference to the Ground reference frame. More... Ground & updGround () Get a writable reference to the Ground reference frame. More... ConstraintSet & updConstraintSet () const ConstraintSet & getConstraintSet () const MarkerSet & updMarkerSet () const MarkerSet & getMarkerSet () const void writeMarkerFile (const std::string &aFileName) void updateMarkerSet ( MarkerSet &newMarkerSet) Update the markers in the model by appending the ones in the passed-in marker set. More... int deleteUnusedMarkers (const Array < std::string > &aMarkerNames) void addAnalysis ( Analysis *adoptee) Add an Analysis to the Model. More... void addController ( Controller *adoptee) Add a Controller to the Model. More... void removeAnalysis ( Analysis *analysis, bool deleteIt=true) Remove an Analysis from the Model. More... void removeController ( Controller *aController) Remove a Controller from the Model. More... bool scale (SimTK::State &state, const ScaleSet &scaleSet, bool preserveMassDist, double finalMass=-1.0) Scale the model. More... void printBasicInfo (std::ostream &aOStream=std::cout) const Print some basic information about the model. More... void printDetailedInfo (const SimTK::State &s, std::ostream &aOStream=std::cout) const Print detailed information about the model. More... void disownAllComponents () Model relinquishes ownership of all components such as: Bodies, Constraints, Forces, ContactGeometry and so on. More... void overrideAllActuators (SimTK::State &s, bool flag) Convenience function to turn on/off overriding the force for all actuators. More... const std::string & getValidationLog () const Get a log of errors/warnings encountered when loading/constructing the model. More... void appendToValidationLog (const std::string ¬e) Append to the Model 's validation log without affecting is current contents. More... void clearValidationLog () const Object & getObjectByTypeAndName (const std::string &typeString, const std::string &nameString) Utility to get a reference to an Object based on",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2e255d61-3666-4ed8-a88b-d2eb8aed982f",
    "document_id": "doc_184",
    "content": "information about the model. More... void disownAllComponents () Model relinquishes ownership of all components such as: Bodies, Constraints, Forces, ContactGeometry and so on. More... void overrideAllActuators (SimTK::State &s, bool flag) Convenience function to turn on/off overriding the force for all actuators. More... const std::string & getValidationLog () const Get a log of errors/warnings encountered when loading/constructing the model. More... void appendToValidationLog (const std::string ¬e) Append to the Model 's validation log without affecting is current contents. More... void clearValidationLog () const Object & getObjectByTypeAndName (const std::string &typeString, const std::string &nameString) Utility to get a reference to an Object based on its name and type throws an exception if the object was not found. More... void extendSetPropertiesFromState (const SimTK::State &state) override Given a State, set all default values for this Model to match those found in the State. More... void finalizeConnections ( Component &root) Satisfy the Component 's connections specified by its Sockets and Inputs. More... Property-related functions const std::string & get_credits () const Get the value of the credits property. More... std::string & upd_credits () Get a writable reference to the credits property. More... void set_credits (const std::string &value) Set the value of the credits property. More... const std::string & get_publications () const Get the value of the publications property. More... std::string & upd_publications () Get a writable reference to the publications property. More... void set_publications (const std::string &value) Set the value of the publications property. More... const std::string & get_length_units () const Get the value of the length_units property. More... std::string & upd_length_units () Get a writable reference to the length_units property. More... void set_length_units (const std::string &value) Set the value of the length_units property. More... const std::string & get_force_units () const Get the value of the force_units property. More... std::string & upd_force_units () Get a writable reference to the force_units property. More... void set_force_units (const std::string &value) Set the value of the force_units property. More... const double & get_assembly_accuracy () const Get the value of the assembly_accuracy property. More... double & upd_assembly_accuracy () Get a writable reference to the assembly_accuracy property. More... void set_assembly_accuracy (const double &value) Set the value of the assembly_accuracy property. More... const SimTK::Vec3 & get_gravity () const Get the value of the gravity property. More... SimTK::Vec3 & upd_gravity () Get a writable reference to the gravity property. More... void set_gravity (const SimTK::Vec3 &value) Set the value of the gravity property. More... const Ground & get_ground () const Get the value of the ground property. More... Ground & upd_ground () Get a writable reference to the ground property. More... void set_ground (const Ground &value) Set the value of the ground property. More... const BodySet & get_BodySet () const Get the value of the BodySet property. More... BodySet & upd_BodySet () Get a writable reference to the BodySet property. More... void set_BodySet (const BodySet &value) Set the value of the BodySet property. More... const JointSet & get_JointSet () const Get the value of the JointSet property. More... JointSet & upd_JointSet () Get a writable reference to",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "de44487a-dd27-4dc0-9ea4-9caa0c26e544",
    "document_id": "doc_184",
    "content": "get_ground () const Get the value of the ground property. More... Ground & upd_ground () Get a writable reference to the ground property. More... void set_ground (const Ground &value) Set the value of the ground property. More... const BodySet & get_BodySet () const Get the value of the BodySet property. More... BodySet & upd_BodySet () Get a writable reference to the BodySet property. More... void set_BodySet (const BodySet &value) Set the value of the BodySet property. More... const JointSet & get_JointSet () const Get the value of the JointSet property. More... JointSet & upd_JointSet () Get a writable reference to the JointSet property. More... void set_JointSet (const JointSet &value) Set the value of the JointSet property. More... const ConstraintSet & get_ConstraintSet () const Get the value of the ConstraintSet property. More... ConstraintSet & upd_ConstraintSet () Get a writable reference to the ConstraintSet property. More... void set_ConstraintSet (const ConstraintSet &value) Set the value of the ConstraintSet property. More... const MarkerSet & get_MarkerSet () const Get the value of the MarkerSet property. More... MarkerSet & upd_MarkerSet () Get a writable reference to the MarkerSet property. More... void set_MarkerSet (const MarkerSet &value) Set the value of the MarkerSet property. More... const ForceSet & get_ForceSet () const Get the value of the ForceSet property. More... ForceSet & upd_ForceSet () Get a writable reference to the ForceSet property. More... void set_ForceSet (const ForceSet &value) Set the value of the ForceSet property. More... const ControllerSet & get_ControllerSet () const Get the value of the ControllerSet property. More... ControllerSet & upd_ControllerSet () Get a writable reference to the ControllerSet property. More... void set_ControllerSet (const ControllerSet &value) Set the value of the ControllerSet property. More... const ContactGeometrySet & get_ContactGeometrySet () const Get the value of the ContactGeometrySet property. More... ContactGeometrySet & upd_ContactGeometrySet () Get a writable reference to the ContactGeometrySet property. More... void set_ContactGeometrySet (const ContactGeometrySet &value) Set the value of the ContactGeometrySet property. More... const ProbeSet & get_ProbeSet () const Get the value of the ProbeSet property. More... ProbeSet & upd_ProbeSet () Get a writable reference to the ProbeSet property. More... void set_ProbeSet (const ProbeSet &value) Set the value of the ProbeSet property. More... const ComponentSet & get_ComponentSet () const Get the value of the ComponentSet property. More... ComponentSet & upd_ComponentSet () Get a writable reference to the ComponentSet property. More... void set_ComponentSet (const ComponentSet &value) Set the value of the ComponentSet property. More... const ModelVisualPreferences & get_ModelVisualPreferences () const Get the value of the ModelVisualPreferences property. More... ModelVisualPreferences & upd_ModelVisualPreferences () Get a writable reference to the ModelVisualPreferences property. More... void set_ModelVisualPreferences (const ModelVisualPreferences &value) Set the value of the ModelVisualPreferences property. More... Visualization Methods in this group affect visualization of this Model , which may be through the OpenSim GUI or through the use of a ModelVisualizer which can provide limited run-time display and user interaction capability for an OpenSim API-based program. If you enable visualization at the API level, the Model will create a ModelVisualizer that you can use to control display and user",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "88577bea-b980-4dff-9d1e-8b3ac517364f",
    "document_id": "doc_184",
    "content": "get_ModelVisualPreferences () const Get the value of the ModelVisualPreferences property. More... ModelVisualPreferences & upd_ModelVisualPreferences () Get a writable reference to the ModelVisualPreferences property. More... void set_ModelVisualPreferences (const ModelVisualPreferences &value) Set the value of the ModelVisualPreferences property. More... Visualization Methods in this group affect visualization of this Model , which may be through the OpenSim GUI or through the use of a ModelVisualizer which can provide limited run-time display and user interaction capability for an OpenSim API-based program. If you enable visualization at the API level, the Model will create a ModelVisualizer that you can use to control display and user interaction. In turn, the ModelVisualizer makes use of a Simbody SimTK::Visualizer; for advanced features you can ask the ModelVisualizer to give you direct access to the SimTK::Visualizer; consult Simbody documentation for more details. const ModelDisplayHints & getDisplayHints () const Get read only access to the ModelDisplayHints object stored with this Model. More... ModelDisplayHints & updDisplayHints () Get writable access to the ModelDisplayHints object stored with this Model. More... void setUseVisualizer (bool visualize) Request or suppress visualization of this Model. More... bool getUseVisualizer () const Return the current setting of the \"use visualizer\" flag, which will take effect at the next call to initSystem() on this Model. More... bool hasVisualizer () const Test whether a ModelVisualizer has been created for this Model . More... const ModelVisualizer & getVisualizer () const Obtain read-only access to the ModelVisualizer . More... ModelVisualizer & updVisualizer () Obtain writable access to the ModelVisualizer . More... Access to the Simbody System and components Methods in this section provide advanced users access to the underlying Simbody System and associated subcomponents that are constructed and maintained by this Model. Note that these are not available until after initSystem() has been invoked on this Model. Be very careful if you call any of the upd() methods since modifying a System after the Model creates it can require reinitialization. See also initStateWithoutRecreatingSystem() const SimTK::MultibodySystem & getMultibodySystem () const Get read-only access to the internal Simbody MultibodySystem that was created by this Model at the last initSystem() call. More... SimTK::MultibodySystem & updMultibodySystem () const (Advanced) Get writable access to the internal Simbody MultibodySystem that was created by this Model at the last initSystem() call. More... const SimTK::DefaultSystemSubsystem & getDefaultSubsystem () const Get read-only access to the internal DefaultSystemSubsystem allocated by this Model's Simbody MultibodySystem. More... SimTK::DefaultSystemSubsystem & updDefaultSubsystem () (Advanced) Get writable access to the internal DefaultSystemSubsystem allocated by this Model's Simbody MultibodySystem. More... const SimTK::SimbodyMatterSubsystem & getMatterSubsystem () const Get read-only access to the internal SimbodyMatterSubsystem allocated by this Model. More... SimTK::SimbodyMatterSubsystem & updMatterSubsystem () (Advanced) Get writable access to the internal SimbodyMatterSubsystem allocated by this Model. More... const SimTK::Force::Gravity & getGravityForce () const Get read-only access to the Simbody Force::Gravity element that was allocated by this Model. More... SimTK::Force::Gravity & updGravityForce () (Advanced) Get writable access to the Simbody Force::Gravity element that was allocated by this Model. More... const SimTK::GeneralForceSubsystem & getForceSubsystem () const Get read-only access to the internal",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6221e43e-ca32-485e-b10f-002dbb91f1ce",
    "document_id": "doc_184",
    "content": "access to the internal DefaultSystemSubsystem allocated by this Model's Simbody MultibodySystem. More... const SimTK::SimbodyMatterSubsystem & getMatterSubsystem () const Get read-only access to the internal SimbodyMatterSubsystem allocated by this Model. More... SimTK::SimbodyMatterSubsystem & updMatterSubsystem () (Advanced) Get writable access to the internal SimbodyMatterSubsystem allocated by this Model. More... const SimTK::Force::Gravity & getGravityForce () const Get read-only access to the Simbody Force::Gravity element that was allocated by this Model. More... SimTK::Force::Gravity & updGravityForce () (Advanced) Get writable access to the Simbody Force::Gravity element that was allocated by this Model. More... const SimTK::GeneralForceSubsystem & getForceSubsystem () const Get read-only access to the internal Simbody GeneralForceSubsystem allocated by this Model. More... SimTK::GeneralForceSubsystem & updForceSubsystem () (Advanced) Get writable access to the internal Simbody GeneralForceSubsystem allocated by this Model. More... const SimTK::Vector_< SimTK::SpatialVec > & getRigidBodyForces (const SimTK::State &state) (Advanced) Get read only access to internal Simbody RigidBodyForces at Dynamics stage More... const SimTK::Vector & getMobilityForces (const SimTK::State &state) (Advanced) Get read only access to internal Simbody Mobility Forces at Dynamics stage More... const SimTK::Vector_< SimTK::SpatialVec > & getGravityBodyForces (const SimTK::State &state) const (Advanced) Get read only access to internal Simbody Body Forces due to Gravity More... Realize the Simbody System and State to Computational Stage Methods in this section enable advanced and scripting users access to realize the Simbody MultibodySystem and the provided state to a desired computational (realization) Stage. Note that these are not accessible until after initSystem() has been invoked on this Model. void realizeTime (const SimTK::State &state) const Perform computations that depend only on time and earlier stages. More... void realizePosition (const SimTK::State &state) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). More... void realizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... void realizeDynamics (const SimTK::State &state) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. More... void realizeAcceleration (const SimTK::State &state) const Perform computations that may depend on applied forces. More... void realizeReport (const SimTK::State &state) const Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. More... Adding components to the Model Model takes ownership of the ModelComponent and adds it to a specialized (typed) Set within the model. Model will maintain Components added using these methods in separate Sets of the corresponding type and they will serialize as part of type specific Sets. These sets can be useful for uniquely identifying components that share the same name, but are of different types since they live in different Sets. For example, using addBody(toesBody) and addJoint(toesJoint) will have unique paths: \"/bodyset/toes\" and \"/jointset/toes\", respectively, even when they have the same name, \"toes\". Note these are legacy methods and remain as a convenience alternative to using Component::addComponent() . In",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c2421edd-0c72-4e12-b760-72aeda4f93b9",
    "document_id": "doc_184",
    "content": "ModelComponent and adds it to a specialized (typed) Set within the model. Model will maintain Components added using these methods in separate Sets of the corresponding type and they will serialize as part of type specific Sets. These sets can be useful for uniquely identifying components that share the same name, but are of different types since they live in different Sets. For example, using addBody(toesBody) and addJoint(toesJoint) will have unique paths: \"/bodyset/toes\" and \"/jointset/toes\", respectively, even when they have the same name, \"toes\". Note these are legacy methods and remain as a convenience alternative to using Component::addComponent() . In contrast, components added using addComponent() are not stored in the model's Sets but live in a flat components list (which is also serialized). Component provides access via getComponentList<SpecificType> or getComponent<SpecificType> to get any subcomponent, including those that are contained in Model 's Sets. In this case, either a Body or a Joint has the pathname \"/toes\" but both cannot share the same name and will throw SubcomponentsWithDuplicateName . Future versions of OpenSim are likely to deprecate the use of Sets and these methods, because they cannot support new Component types without modifying the API (for more add####() methods), whereas getComponentList<SpecificType>() and getComponent<SpecificType> will generalize: they do not have these limitations and are applicable for adding to any Component not just Model . void addModelComponent ( ModelComponent *adoptee) void addBody ( Body *adoptee) void addJoint ( Joint *adoptee) void addConstraint ( Constraint *adoptee) void addForce ( Force *adoptee) void addProbe ( Probe *adoptee) void addContactGeometry ( ContactGeometry *adoptee) void addMarker ( Marker *adoptee) Implementation of Object interface These methods are Model's implementation of virtual methods defined in the Object class from which Model derives (indirectly through ModelComponent ). ~Model () override Destructor. More... void updateFromXMLNode (SimTK::Xml::Element &aNode, int versionNumber=-1) override Override of the default implementation to account for versioning. More... Implementation of Component interface These methods are Model's implementation of virtual methods defined in the Component class from which Model derives. void extendFinalizeFromProperties () override Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. More... void extendConnectToModel ( Model &model) override Perform any necessary initializations required to connect the component into the Model , and check for error conditions. More... void extendAddToSystem (SimTK::MultibodySystem &system) const override Add appropriate Simbody elements (if needed) to the System corresponding to this component and specify needed state resources. More... void extendInitStateFromProperties (SimTK::State &state) const override Transfer property values or other state-independent initial values into this component's state variables in the passed-in state argument. More... Implementation of ModelComponent interface These methods are Model's implementation of virtual methods defined in the ModelComponent class from which Model derives. void generateDecorations (bool fixed, const ModelDisplayHints &hints, const SimTK::State &state, SimTK::Array_< SimTK::DecorativeGeometry > &appendToThis) const override Optional method for generating arbitrary display geometry that reflects this Component at the specified state . More... Public Member Functions inherited from OpenSim::ModelComponent ModelComponent () Default constructor. More... ModelComponent",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9ccc74a4-b29a-41b3-be6e-b9cf1b6cf632",
    "document_id": "doc_184",
    "content": "to this component and specify needed state resources. More... void extendInitStateFromProperties (SimTK::State &state) const override Transfer property values or other state-independent initial values into this component's state variables in the passed-in state argument. More... Implementation of ModelComponent interface These methods are Model's implementation of virtual methods defined in the ModelComponent class from which Model derives. void generateDecorations (bool fixed, const ModelDisplayHints &hints, const SimTK::State &state, SimTK::Array_< SimTK::DecorativeGeometry > &appendToThis) const override Optional method for generating arbitrary display geometry that reflects this Component at the specified state . More... Public Member Functions inherited from OpenSim::ModelComponent ModelComponent () Default constructor. More... ModelComponent (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct ModelComponent from an XML file. More... ModelComponent (SimTK::Xml::Element &aNode) Construct ModelComponent from a specific node in an XML document. More... virtual ~ModelComponent () Destructor is virtual to allow concrete model component cleanup. More... void connectToModel ( Model &model) Connect this ModelComponent to its aggregate- a Model . More... const Model & getModel () const Get a const reference to the Model this component is part of. More... Model & updModel () Get a modifiable reference to the Model this component is part of. More... bool hasModel () const Does this ModelComponent have a Model associated with it? More... void preScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... void scale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... void postScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::Component Component () Default constructor. More... Component (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct Component from an XML file. More... Component (SimTK::Xml::Element &aNode) Construct Component from a specific node in an XML document. More... Component (const Component &)=default Use default copy constructor and assignment operator. More... Component & operator= (const Component &)=default virtual ~Component ()=default Destructor is virtual to allow concrete Component to cleanup. More... const SimTK::MultibodySystem & getSystem () const Get the underlying MultibodySystem that this component is connected to. More... bool hasSystem () const Check if this component has an underlying MultibodySystem. More... bool isComponentInOwnershipTree (const Component *component) const Does the provided component already exist anywhere in the ownership tree (not just subcomponents of this component)? More... void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const Uses getComponentList<T>() to count the number of underlying subcomponents of the specified type. More... std::string getAbsolutePathString () const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 10,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bcd2dfa5-886e-4291-851a-511dba7287db",
    "document_id": "doc_184",
    "content": "tree (not just subcomponents of this component)? More... void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const Uses getComponentList<T>() to count the number of underlying subcomponents of the specified type. More... std::string getAbsolutePathString () const Get the complete (absolute) pathname for this Component to its ancestral Component , which is the root of the tree to which this Component belongs. More... ComponentPath getAbsolutePath () const Return a ComponentPath of the absolute path of this Component . More... std::string getRelativePathString (const Component &wrt) const Get the relative path of this Component with respect to another Component , as a string. More... ComponentPath getRelativePath (const Component &wrt) const Get the relative path of this Component with respect to another Component . More... bool hasComponent (const std::string &pathname) const Query if there is a component (of any type) at the specified path name. More... template<class C = Component> bool hasComponent (const std::string &pathname) const Query if there is a component of a given type at the specified path name. More... template<class C = Component> const C & getComponent (const std::string &pathname) const Get a unique subcomponent of this Component by its path name and type 'C'. More... template<class C = Component> const C & getComponent (const ComponentPath &pathname) const const Component & getComponent (const std::string &pathname) const Similar to the templatized getComponent() , except this returns the component as the generic Component type. More... template<class C = Component> C & updComponent (const std::string &name) Get a writable reference to a subcomponent. More... template<class C = Component> C & updComponent (const ComponentPath &name) Component & updComponent (const std::string &pathname) Similar to the templatized updComponent() , except this returns the component as the generic Component type. More... unsigned printComponentsMatching (const std::string &substring) const Print a list to the console of all components whose absolute path name contains the given string. More... int getNumStateVariables () const Get the number of \"continuous\" state variables maintained by the Component and its subcomponents. More... Array < std::string > getStateVariableNames () const Get the names of \"continuous\" state variables maintained by the Component and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name) as input. More... const StateVariable * traverseToStateVariable (const std::string &pathName) const Get a StateVariable anywhere in the Component",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 11,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "473a92b9-e465-4684-ae2b-525c8c74bc95",
    "document_id": "doc_184",
    "content": "of \"continuous\" state variables maintained by the Component and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name) as input. More... const StateVariable * traverseToStateVariable (const std::string &pathName) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... const StateVariable * traverseToStateVariable (const ComponentPath &path) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... void finalizeFromProperties () Define a Component 's internal data members and structure according to its properties. More... void finalizeConnections ( Component &root) Satisfy the Component 's connections specified by its Sockets and Inputs. More... void clearConnections () Disconnect/clear this Component from its aggregate component. More... void addToSystem (SimTK::MultibodySystem &system) const Have the Component add itself to the underlying computational System. More... void initStateFromProperties (SimTK::State &state) const Initialize Component 's state variable values from its properties. More... void setPropertiesFromState (const SimTK::State &state) Set Component 's properties given a state. More... int getNumSockets () const Get the number of Sockets in this Component . More... std::vector< std::string > getSocketNames () const Collect and return the names of the sockets in this component. More... template<typename T > const T & getConnectee (const std::string &name) const Get the \"connectee\" object that the Component 's Socket is bound to. More... const Object & getConnectee (const std::string &name) const Get the connectee as an Object . More... const AbstractSocket & getSocket (const std::string &name) const Get an AbstractSocket for the given socket name. More... AbstractSocket & updSocket (const std::string &name) Get a writable reference to the AbstractSocket for the given socket name. More... template<typename T > const Socket < T > & getSocket (const std::string &name) const Get a const reference to the concrete Socket provided by this Component by name. More... template<typename T > Socket < T > & updSocket (const std::string &name) Get a writable reference to the concrete Socket provided by this Component by name. More... void printSubcomponentInfo () const List all subcomponents by name and recurse into these components to list their subcomponents, and so on. More... void printSocketInfo () const List all the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs () const Access the",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 12,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ff57d8ed-43e7-4715-a934-2cdf66e9c050",
    "document_id": "doc_184",
    "content": "on. More... void printSocketInfo () const List all the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs () const Access the number of Outputs that this component has. More... std::vector< std::string > getInputNames () const Collect and return the names of Inputs in this component as an std::vector. More... std::vector< std::string > getOutputNames () const Collect and return the names of Outputs in this component as an std::vector. More... const AbstractInput & getInput (const std::string &name) const Get an Input provided by this Component by name. More... AbstractInput & updInput (const std::string &name) Get a writable reference to an Input provided by this Component by name. More... template<typename T > const Input < T > & getInput (const std::string &name) const Get a concrete Input that you can directly ask for its values. More... const AbstractOutput & getOutput (const std::string &name) const Get the Output provided by this Component by name. More... AbstractOutput & updOutput (const std::string &name) Get a writable reference to an Output provided by this Component by name. More... SimTK::IteratorRange< OutputConstIterator > getOutputs () const Iterate through all Outputs of this component. More... int getModelingOption (const SimTK::State &state, const std::string &name) const Get a ModelingOption flag for this Component by name. More... void setModelingOption (SimTK::State &state, const std::string &name, int flag) const Set the value of a ModelingOption flag for this Component . More... template<typename T > const T & getInputValue (const SimTK::State &state, const std::string &name) const Get the Input value that this component is dependent on. More... template<typename T > const T & getOutputValue (const SimTK::State &state, const std::string &name) const Get the Output value provided by this Component by name. More... double getStateVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable allocated by this Component . More... double getStateVariableValue (const SimTK::State &state, const ComponentPath &path) const Get the value of a state variable allocated by this Component . More... void setStateVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed by this Component . More... double getDiscreteVariableValue (const SimTK::State &state, const std::string &name) const Get the value of",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 13,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6ae12a3d-107a-4a61-a0ce-5fe2be81b0d9",
    "document_id": "doc_184",
    "content": "void setStateVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed by this Component . More... double getDiscreteVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a discrete variable allocated by this Component by name. More... void setDiscreteVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a discrete variable allocated by this Component by name. More... template<class T > SimTK::CacheEntryIndex getCacheVariableIndex (const CacheVariable < T > &cv) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... SimTK::CacheEntryIndex getCacheVariableIndex (const std::string &name) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a cache variable allocated by this Component by name. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Get the value of a cache variable allocated by this Component . More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const std::string &k, T value) const Set the value of a cache variable, identified by name , to a new value and mark the cache variable as valid. More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv, T value) const Set the value of a cache variable to a new value and mark the cache variable as valid. More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const std::string &name) const Returns a mutable reference to the value of a cache variable identified by name . More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Returns a mutable reference to the value of a cache variable. More... bool isCacheVariableValid (const SimTK::State &state, const std::string &name) const Returns true if the cache variable, identified by name , is valid. More... template<class T > bool isCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Returns true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as invalid. More... template<class T > void markCacheVariableInvalid (const SimTK::State &state, const CacheVariable < T >",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 14,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "21114c74-074c-49a3-92d9-83f8d3b8d8d4",
    "document_id": "doc_184",
    "content": "const CacheVariable < T > &cv) const Returns true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as invalid. More... template<class T > void markCacheVariableInvalid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as invalid. More... const Component & getOwner () const Access the owner of this Component . More... bool hasOwner () const (For advanced users) Check if this Component has an owner. More... const Component & getRoot () const Obtain the root Component, which is this component if it is orphaned. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 15,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f3d13418-4eef-4095-a004-c767f94dbc88",
    "document_id": "doc_184",
    "content": "property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 16,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "686e7611-ea92-4d61-8296-58a9391096bd",
    "document_id": "doc_184",
    "content": "More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef Model Self This typedef might be useful within the member functions of this class. More... typedef ModelComponent Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::ModelComponent typedef ModelComponent Self This typedef might be useful within the member functions of this class. More... typedef Component Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Component typedef Component Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... typedef std::map< std::string, SimTK::ClonePtr< AbstractOutput > >::const_iterator OutputConstIterator Define OutputConstIterator for convenience. More... Friends class Component Auto-generated functions static Model * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Model\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::ModelComponent static ModelComponent * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"ModelComponent\". More... Static Public Member Functions inherited from OpenSim::Component static Component * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Component\". More... Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 17,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3d9d09ad-e26f-401a-bde5-5ae0bf04dd2d",
    "document_id": "doc_184",
    "content": "void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Protected Member Functions inherited from OpenSim::ModelComponent const SimTK::Vec3 & getScaleFactors (const ScaleSet &scaleSet, const Frame &frame) const Get the scale factors corresponding to the base OpenSim::Body",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 18,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "80a0c2e8-b1e7-451a-80e3-0dd755c58aaf",
    "document_id": "doc_184",
    "content": "SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Protected Member Functions inherited from OpenSim::ModelComponent const SimTK::Vec3 & getScaleFactors (const ScaleSet &scaleSet, const Frame &frame) const Get the scale factors corresponding to the base OpenSim::Body of the specified Frame . More... virtual void extendPreScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... virtual void extendScale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... virtual void extendPostScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void updateFromXMLNode (SimTK::Xml::Element &aNode, int versionNumber) override Handle a change in XML syntax for Sockets. More... void extendFinalizeFromProperties () override Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. More... Protected Member Functions inherited from OpenSim::Component SimTK_DEFINE_UNIQUE_INDEX_TYPE ( MemberSubcomponentIndex ) template<class C = Component> MemberSubcomponentIndex constructSubcomponent (const std::string &name) Construct a subcomponent as a data member of this Component . More... template<class C = Component> const C & getMemberSubcomponent ( MemberSubcomponentIndex ix) const template<class C = Component> C & updMemberSubcomponent ( MemberSubcomponentIndex ix) void adoptSubcomponent ( Component *subcomponent) Adopt a component as a subcomponent of this Component . More... size_t getNumImmediateSubcomponents () const Get the number of Subcomponents immediately owned by this Component . More... size_t getNumMemberSubcomponents () const Get the number of Subcomponents that are data members of this Component . More... size_t getNumPropertySubcomponents () const Get the number of Subcomponents that are properties of this Component . More... size_t getNumAdoptedSubcomponents () const Get the number of Subcomponents adopted by this Component . More... std::vector< SimTK::ReferencePtr< const Component > > getImmediateSubcomponents () const Access this Component 's immediate subcomponents (not those owned by subcomponents) More... template<class C > const C * traversePathToComponent ( ComponentPath path) const void setNextSubcomponentInSystem (const Component &sub) const Helper method to enable Component makers to specify the order of their subcomponents to be added to the System during addToSystem() . More... void resetSubcomponentOrder () resetSubcomponentOrder clears this Component 's list of ordered subcomponents (but otherwise leaves subcomponents untouched). More... const Component & get_components (int i) const Get the value of the i-th element of the components property. More... Component & upd_components (int i) Get a writable reference to the i-th element of the components property. More... void set_components (int i, const Component &value) Set the value of the i-th element of components property. More... int append_components (const Component &value) Append an element to the components",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 19,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6a3ada31-de2b-4e84-a921-a2b7b87c4a18",
    "document_id": "doc_184",
    "content": "specify the order of their subcomponents to be added to the System during addToSystem() . More... void resetSubcomponentOrder () resetSubcomponentOrder clears this Component 's list of ordered subcomponents (but otherwise leaves subcomponents untouched). More... const Component & get_components (int i) const Get the value of the i-th element of the components property. More... Component & upd_components (int i) Get a writable reference to the i-th element of the components property. More... void set_components (int i, const Component &value) Set the value of the i-th element of components property. More... int append_components (const Component &value) Append an element to the components property. More... virtual void extendAddComponent ( Component *subcomponent) Perform any secondary operations, e.g. More... void initComponentTreeTraversal (const Component &root) const Build the tree of Components from this component through its descendants. More... virtual void extendAddToSystemAfterSubcomponents (SimTK::MultibodySystem &system) const Add appropriate Simbody elements (if needed) to the System after your component's subcomponents have had a chance to add themselves to the system. More... void setStateVariableDerivativeValue (const SimTK::State &state, const std::string &name, double deriv) const Set the derivative of a state variable by name when computed inside of this Component 's computeStateVariableDerivatives() method. More... virtual void extendRealizeTopology (SimTK::State &state) const Obtain state resources that are needed unconditionally, and perform computations that depend only on the system topology. More... virtual void extendRealizeModel (SimTK::State &state) const Obtain and name state resources (like state variables allocated by an underlying Simbody component) that may be needed, depending on modeling options. More... virtual void extendRealizeInstance (const SimTK::State &state) const Perform computations that depend only on instance variables, like lengths and masses. More... virtual void extendRealizeTime (const SimTK::State &state) const Perform computations that depend only on time and earlier stages. More... virtual void extendRealizePosition (const SimTK::State &state) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). More... virtual void extendRealizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... virtual void extendRealizeDynamics (const SimTK::State &state) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. More... virtual void extendRealizeAcceleration (const SimTK::State &state) const Perform computations that may depend on applied forces. More... virtual void extendRealizeReport (const SimTK::State &state) const Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. More... void addModelingOption (const std::string &optionName, int maxFlagValue) const Add a modeling option (integer flag stored in the State) for use by this Component . More... void addStateVariable (const std::string &stateVariableName, const SimTK::Stage &invalidatesStage=SimTK::Stage::Dynamics, bool isHidden=false) const Add a continuous system state variable belonging to this Component , and assign a name by which to refer to it. More... void addStateVariable ( Component::StateVariable *stateVariable) const The above method provides a convenient interface to this method, which automatically creates an 'AddedStateVariable' and",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 20,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e9690556-0b11-4aa4-b6f8-9e5df0649720",
    "document_id": "doc_184",
    "content": "Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. More... void addModelingOption (const std::string &optionName, int maxFlagValue) const Add a modeling option (integer flag stored in the State) for use by this Component . More... void addStateVariable (const std::string &stateVariableName, const SimTK::Stage &invalidatesStage=SimTK::Stage::Dynamics, bool isHidden=false) const Add a continuous system state variable belonging to this Component , and assign a name by which to refer to it. More... void addStateVariable ( Component::StateVariable *stateVariable) const The above method provides a convenient interface to this method, which automatically creates an 'AddedStateVariable' and allocates resources in the SimTK::State for this variable. More... void addDiscreteVariable (const std::string &discreteVariableName, SimTK::Stage invalidatesStage) const Add a system discrete variable belonging to this Component , give it a name by which it can be referenced, and declare the lowest Stage that should be invalidated if this variable's value is changed. More... SimTK::MultibodySystem & updSystem () const Get writable reference to the MultibodySystem that this component is connected to. More... int getStateIndex (const std::string &name) const Get the index of a Component 's continuous state variable in the Subsystem for allocations. More... SimTK::SystemYIndex getStateVariableSystemIndex (const std::string &stateVariableName) const Get the System Index of a state variable allocated by this Component . More... const SimTK::DiscreteVariableIndex getDiscreteVariableIndex (const std::string &name) const Get the index of a Component 's discrete variable in the Subsystem for allocations. More... template<typename T > PropertyIndex constructSocket (const std::string &name, const std::string &propertyComment) Construct a specialized Socket for this Component 's dependence on another Component . More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output for a member function of the same component. More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, const T &(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) This variant handles component member functions that return the output value by const reference (const T&). More... template<typename T , typename CompType > bool constructListOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &, const std::string &channel) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output that can have multiple channels. More... bool constructOutputForStateVariable (const std::string &name) Construct an Output for a StateVariable . More... template<typename T > PropertyIndex constructInput (const std::string &name, bool isList, const std::string &propertyComment, const SimTK::Stage &requiredAtStage=SimTK::Stage::Instance) Construct an Input (socket) for this Component 's dependence on an Output signal. More... template<class T > CacheVariable < T > addCacheVariable (std::string name, T variablePrototype, SimTK::Stage dependsOnStage) const Add a state cache entry belonging to this Component to hold calculated values that must be automatically invalidated when certain state values change. More... void setOwner (const Component &owner) Set this Component's reference to its owning Component More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 21,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4052e844-e2d4-437d-a83a-9012ce77a9a8",
    "document_id": "doc_184",
    "content": "on an Output signal. More... template<class T > CacheVariable < T > addCacheVariable (std::string name, T variablePrototype, SimTK::Stage dependsOnStage) const Add a state cache entry belonging to this Component to hold calculated values that must be automatically invalidated when certain state values change. More... void setOwner (const Component &owner) Set this Component's reference to its owning Component More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 22,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "038bcaab-bc09-41ab-81dc-3e60569e2af0",
    "document_id": "doc_184",
    "content": "of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Static Protected Member Functions inherited from OpenSim::Component static void prependComponentPathToConnecteePath ( Component &subcomponent) For internal use. More... Protected Attributes inherited from OpenSim::ModelComponent SimTK::ReferencePtr< Model > _model The model this component belongs to. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Static Protected Attributes inherited from OpenSim::ModelComponent static const SimTK::Vec3 InvalidScaleFactors Returned by getScaleFactors() if the ScaleSet does not contain scale factors for the base Body associated with the specified Frame . More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description A concrete class that specifies the interface to a musculoskeletal model. You can read this in from an XML file or create it programmatically, and modify it via the API. A Model contains ModelComponents, and is itself a ModelComponent so must satisfy the ModelComponent interface, as well as the Object interface from which ModelComponent derives. This allows a",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 23,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "aaa58076-2a9a-4eb2-943c-8d43655fbba8",
    "document_id": "doc_184",
    "content": "templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description A concrete class that specifies the interface to a musculoskeletal model. You can read this in from an XML file or create it programmatically, and modify it via the API. A Model contains ModelComponents, and is itself a ModelComponent so must satisfy the ModelComponent interface, as well as the Object interface from which ModelComponent derives. This allows a Model to allocate \"global\" resources using ModelComponent resource-allocation facilities. Computation using a Model is done by creating a computational representation of the Model , called a System (SimTK::System), using Simbody. Creation of the System is initiated by a call to the Model 's initSystem() method. The System and related objects are maintained in a runtime section of the Model object. You can also ask a Model to provide visualization using the setUseVisualizer() method, in which case it will allocate and maintain a ModelVisualizer . Authors Frank Anderson, Peter Loan, Ayman Habib, Ajay Seth, Michael Sherman See also ModelComponent , ModelVisualizer , SimTK::System Examples: example2DWalking.cpp , example2DWalkingMetabolics.cpp , exampleCustomImplicitAuxiliaryDynamics.cpp , exampleHangingMuscle.cpp , exampleMocoTrack.cpp , and exampleSlidingMassAdvanced.cpp . Member Typedef Documentation ◆ Self typedef Model OpenSim::Model::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef ModelComponent OpenSim::Model::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ Model() [1/2] OpenSim::Model::Model ( ) Default constructor creates a Model containing only the Ground frame and a set of default properties. ◆ Model() [2/2] OpenSim::Model::Model ( const std::string & filename ) explicit Constructor from an OpenSim XML model file. NOTE: The Model is read in (deserialized) from the model file, which means the properties of the Model and its components are filled in from values in the file. In order to evaluate the validity of the properties (e.g. Inertia tensors, availability of Mesh files, ...) and to identify properties as subcomponents of the Model , one must invoke Model::finalizeFromProperties() first. Model::initSystem() invokes finalizeFromProperties() on its way to creating the System and initializing the State. Parameters filename Name of a file containing an OpenSim model in XML format; suffix is typically \".osim\". ◆ ~Model() OpenSim::Model::~Model ( ) inline override Destructor. Member Function Documentation ◆ addAnalysis() void OpenSim::Model::addAnalysis ( Analysis * adoptee ) Add an Analysis to the Model. Parameters adoptee pointer to the Analysis to add ◆ addBody() void OpenSim::Model::addBody ( Body * adoptee ) ◆ addConstraint() void OpenSim::Model::addConstraint ( Constraint * adoptee ) ◆ addContactGeometry() void OpenSim::Model::addContactGeometry ( ContactGeometry * adoptee ) ◆ addController() void OpenSim::Model::addController ( Controller * adoptee ) Add a Controller to the Model. ◆ addForce() void OpenSim::Model::addForce",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 24,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "32049d9b-6806-4f6e-ac44-c1fe92185fed",
    "document_id": "doc_184",
    "content": "initializing the State. Parameters filename Name of a file containing an OpenSim model in XML format; suffix is typically \".osim\". ◆ ~Model() OpenSim::Model::~Model ( ) inline override Destructor. Member Function Documentation ◆ addAnalysis() void OpenSim::Model::addAnalysis ( Analysis * adoptee ) Add an Analysis to the Model. Parameters adoptee pointer to the Analysis to add ◆ addBody() void OpenSim::Model::addBody ( Body * adoptee ) ◆ addConstraint() void OpenSim::Model::addConstraint ( Constraint * adoptee ) ◆ addContactGeometry() void OpenSim::Model::addContactGeometry ( ContactGeometry * adoptee ) ◆ addController() void OpenSim::Model::addController ( Controller * adoptee ) Add a Controller to the Model. ◆ addForce() void OpenSim::Model::addForce ( Force * adoptee ) Examples: exampleHangingMuscle.cpp . ◆ addJoint() void OpenSim::Model::addJoint ( Joint * adoptee ) ◆ addMarker() void OpenSim::Model::addMarker ( Marker * adoptee ) ◆ addModelComponent() void OpenSim::Model::addModelComponent ( ModelComponent * adoptee ) Referenced by OpenSim::ModOpAddExternalLoads::operate() . ◆ addProbe() void OpenSim::Model::addProbe ( Probe * adoptee ) Examples: exampleHangingMuscle.cpp . ◆ appendToValidationLog() void OpenSim::Model::appendToValidationLog ( const std::string & note ) Append to the Model 's validation log without affecting is current contents. ◆ applyDefaultConfiguration() void OpenSim::Model::applyDefaultConfiguration ( SimTK::State & s ) ◆ assemble() void OpenSim::Model::assemble ( SimTK::State & state , const Coordinate * coord = NULL , double weight = 10 ) Find the kinematic state of the model that satisfies constraints and coordinate goals If assemble is being called due to a coordinate set value, provide the option to weight that coordinate value more heavily if specified. ◆ assign() void OpenSim::Model::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Model . ◆ buildSystem() void OpenSim::Model::buildSystem ( ) After the Model and its components have been constructed, call this to interconnect the components and then create the Simbody MultibodySystem needed to represent the Model computationally. The extendConnectToModel() method of each contained ModelComponent will be invoked, and then their addToSystem() methods are invoked. The resulting MultibodySystem is maintained internally by the Model. After this call, you may obtain a writable reference to the System using updMultibodySystem() which you can use to make any additions you want. Then when the System is complete, call initializeState() to finalize it and obtain an initial State. ◆ calcAngularMomentum() SimTK::Vec3 OpenSim::Model::calcAngularMomentum ( const SimTK::State & s ) const Return the angular momentum about the system mass center expressed in Ground . ◆ calcKineticEnergy() double OpenSim::Model::calcKineticEnergy ( const SimTK::State & s ) const inline Return the total Kinetic Energy for the underlying system. ◆ calcLinearMomentum() SimTK::Vec3 OpenSim::Model::calcLinearMomentum ( const SimTK::State & s ) const Return the linear momentum expressed in Ground . ◆ calcMassCenterAcceleration() SimTK::Vec3 OpenSim::Model::calcMassCenterAcceleration ( const SimTK::State & s ) const Return the acceleration vector of the system mass center, measured from the Ground origin, and expressed in Ground . ◆ calcMassCenterPosition() SimTK::Vec3 OpenSim::Model::calcMassCenterPosition ( const SimTK::State & s ) const Return the position vector of the system mass center, measured from the Ground origin, and expressed in Ground . ◆ calcMassCenterVelocity() SimTK::Vec3 OpenSim::Model::calcMassCenterVelocity ( const SimTK::State &",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 25,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bad929a2-d40f-4208-83ba-209a1d90ccc4",
    "document_id": "doc_184",
    "content": "s ) const inline Return the total Kinetic Energy for the underlying system. ◆ calcLinearMomentum() SimTK::Vec3 OpenSim::Model::calcLinearMomentum ( const SimTK::State & s ) const Return the linear momentum expressed in Ground . ◆ calcMassCenterAcceleration() SimTK::Vec3 OpenSim::Model::calcMassCenterAcceleration ( const SimTK::State & s ) const Return the acceleration vector of the system mass center, measured from the Ground origin, and expressed in Ground . ◆ calcMassCenterPosition() SimTK::Vec3 OpenSim::Model::calcMassCenterPosition ( const SimTK::State & s ) const Return the position vector of the system mass center, measured from the Ground origin, and expressed in Ground . ◆ calcMassCenterVelocity() SimTK::Vec3 OpenSim::Model::calcMassCenterVelocity ( const SimTK::State & s ) const Return the velocity vector of the system mass center, measured from the Ground origin, and expressed in Ground . ◆ calcMomentum() SimTK::SpatialVec OpenSim::Model::calcMomentum ( const SimTK::State & s ) const Return the spatial momentum about the system mass center expressed in Ground . ◆ calcPotentialEnergy() double OpenSim::Model::calcPotentialEnergy ( const SimTK::State & s ) const inline Return the total Potential Energy for the underlying system. ◆ cleanup() void OpenSim::Model::cleanup ( ) Perform some clean up functions that are normally done from the destructor however this gives the GUI a way to proactively do the cleaning without waiting for garbage collection to do the actual cleanup. ◆ clearValidationLog() void OpenSim::Model::clearValidationLog ( ) inline ◆ clone() Model * OpenSim::Model::clone ( ) const override virtual Model clone() override that invokes finalizeFromProperties() on a default copy constructed Model , prior to returning the Model . Implements OpenSim::ModelComponent . ◆ computeControls() void OpenSim::Model::computeControls ( const SimTK::State & state , SimTK::Vector & controls ) const Compute the controls for the model. Calls down to the Controllers to make their contributions to the controls. Parameters [in] state System state from which Controllers should draw when computing their control outputs. [out] controls The complete vector of controls into which individual controller contributions should be added. ◆ computeStateVariableDerivatives() void OpenSim::Model::computeStateVariableDerivatives ( const SimTK::State & s ) const override virtual Compute the derivatives of the generalized coordinates and speeds. Reimplemented from OpenSim::Component . ◆ deleteUnusedMarkers() int OpenSim::Model::deleteUnusedMarkers ( const Array < std::string > & aMarkerNames ) ◆ disownAllComponents() void OpenSim::Model::disownAllComponents ( ) Model relinquishes ownership of all components such as: Bodies, Constraints, Forces, ContactGeometry and so on. That means the freeing of the memory of these objects is up to the caller. This only affects components stored in the Model 's Sets, and does not affect those added via Component::addComponent() . ◆ equilibrateMuscles() void OpenSim::Model::equilibrateMuscles ( SimTK::State & state ) Update the state of all Muscles so they are in equilibrium. ◆ extendAddToSystem() void OpenSim::Model::extendAddToSystem ( SimTK::MultibodySystem & system ) const override virtual Add appropriate Simbody elements (if needed) to the System corresponding to this component and specify needed state resources. extendAddToSystem() is called when the Simbody System is being created to represent a completed system (model) for computation. That is, connect() will already have been invoked on all components before any addToSystem() call is made. Helper methods for adding modeling options, state variables and their derivatives, discrete",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 26,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f48badbe-0d79-47de-b8fb-5a4b50676e0e",
    "document_id": "doc_184",
    "content": "via Component::addComponent() . ◆ equilibrateMuscles() void OpenSim::Model::equilibrateMuscles ( SimTK::State & state ) Update the state of all Muscles so they are in equilibrium. ◆ extendAddToSystem() void OpenSim::Model::extendAddToSystem ( SimTK::MultibodySystem & system ) const override virtual Add appropriate Simbody elements (if needed) to the System corresponding to this component and specify needed state resources. extendAddToSystem() is called when the Simbody System is being created to represent a completed system (model) for computation. That is, connect() will already have been invoked on all components before any addToSystem() call is made. Helper methods for adding modeling options, state variables and their derivatives, discrete variables, and cache entries are available and can be called within extendAddToSystem() only. Note that this method is const; you may not modify your model component or the containing model during this call. Any modifications you need should instead be performed in finalizeFromProperties() or at the latest connect(), which are non-const. The only exception is that you may need to record access information for resources you create in the system , such as an index number. For most Components, OpenSim base classes either provide convenience methods or handle indices automatically. Otherwise, you must declare indices as mutable data members so that you can set them here. If you override this method, be sure to invoke the base class method at the beginning, using code like this: void MyComponent::extendAddToSystem(SimTK::MultibodySystem& system) const { // Perform any additions to the system required by your Super Super::extendAddToSystem (system); // ... your code goes here } This method assumes that this Component 's addToSystem will be invoked before its subcomponents. If you need your subcomponents to be added to the system, first (e.g. require of a Force to be anchored to a SimTK::MobilizedBody specified by subcomponents) then you must implement: extendAddToSystemAfterSubcomponents() . It is possible to implement both method to add system elements before and then after your subcomponents have added themselves. Caution is required that Simbody elements are not added twice especially when order is unimportant. Parameters [in,out] system The MultibodySystem being added to. See also addModelingOption() , addStateVariable() , addDiscreteVariables(), addCacheVariable() Reimplemented from OpenSim::Component . ◆ extendConnectToModel() void OpenSim::Model::extendConnectToModel ( Model & model ) override virtual Perform any necessary initializations required to connect the component into the Model , and check for error conditions. extendConnectToModel() is invoked on all components to complete construction of a Model , prior to creating a Simbody System to represent it computationally. It may also be invoked at times just for its error-checking side effects. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::extendConnectToModel( Model & model) { Super::extendConnectToModel (model); // invoke parent class method // ... your code goes here } Note that this method is expected to check for modeling errors and should throw an OpenSim::Exception if there is something wrong. For example, if your model component references another object by name, you should verify that it exists in the supplied Model , which is",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 27,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e09ff786-d3c7-421a-a53e-98019d560ed8",
    "document_id": "doc_184",
    "content": "to represent it computationally. It may also be invoked at times just for its error-checking side effects. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::extendConnectToModel( Model & model) { Super::extendConnectToModel (model); // invoke parent class method // ... your code goes here } Note that this method is expected to check for modeling errors and should throw an OpenSim::Exception if there is something wrong. For example, if your model component references another object by name, you should verify that it exists in the supplied Model , which is not guaranteed since components may be independently instantiated or constructed from XML files. Parameters [in,out] model The Model currently being constructed to which this ModelComponent should be connected. Reimplemented from OpenSim::ModelComponent . ◆ extendFinalizeFromProperties() void OpenSim::Model::extendFinalizeFromProperties ( ) override virtual Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. For example, each property should be checked to ensure that its value is within an acceptable range. When this method returns, the component will be marked as being up-to-date with its properties. Do not perform any configuration that depends on the SimTK::MultibodySystem; it is not available at this point. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::extendFinalizeFromProperties() { Super::extendFinalizeFromProperties (); // invoke parent class method // ... your code goes here // ... catch invalid property values // ... initialize any internal data structures } Reimplemented from OpenSim::Component . ◆ extendInitStateFromProperties() void OpenSim::Model::extendInitStateFromProperties ( SimTK::State & state ) const override virtual Transfer property values or other state-independent initial values into this component's state variables in the passed-in state argument. This is called after a SimTK::System and State have been created for the Model (that is, after extendAddToSystem() has been called on all components). You should override this method if your component has properties (serializable values) that can affect initial values for your state variables. You can also perform any other state-independent calculations here that result in state initial conditions. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::extendInitStateFromProperties(SimTK::State& state) const { Super::extendInitStateFromProperties (state); // invoke parent class method // ... your code goes here } Parameters state The state that will receive the new initial conditions. See also extendSetPropertiesFromState() Reimplemented from OpenSim::Component . ◆ extendSetPropertiesFromState() void OpenSim::Model::extendSetPropertiesFromState ( const SimTK::State & state ) override virtual Given a State, set all default values for this Model to match those found in the State. Reimplemented from OpenSim::Component . ◆ finalizeConnections() [1/2] void OpenSim::Model::finalizeConnections ( ) inline Satisfy all connections (Sockets and Inputs) in the model, using this model as the root Component . This is a convenience form of Component::finalizeConnections() that uses this model as root. Examples: example2DWalkingMetabolics.cpp , and exampleHangingMuscle.cpp . References finalizeConnections() . Referenced by finalizeConnections() , OpenSim::ModelProcessor::ModelProcessor() , OpenSim::ModOpReplaceMusclesWithDeGrooteFregly2016::operate() , OpenSim::ModOpRemoveMuscles::operate() ,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 28,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a912591d-884f-4661-8de7-6aadefcb7110",
    "document_id": "doc_184",
    "content": "new initial conditions. See also extendSetPropertiesFromState() Reimplemented from OpenSim::Component . ◆ extendSetPropertiesFromState() void OpenSim::Model::extendSetPropertiesFromState ( const SimTK::State & state ) override virtual Given a State, set all default values for this Model to match those found in the State. Reimplemented from OpenSim::Component . ◆ finalizeConnections() [1/2] void OpenSim::Model::finalizeConnections ( ) inline Satisfy all connections (Sockets and Inputs) in the model, using this model as the root Component . This is a convenience form of Component::finalizeConnections() that uses this model as root. Examples: example2DWalkingMetabolics.cpp , and exampleHangingMuscle.cpp . References finalizeConnections() . Referenced by finalizeConnections() , OpenSim::ModelProcessor::ModelProcessor() , OpenSim::ModOpReplaceMusclesWithDeGrooteFregly2016::operate() , OpenSim::ModOpRemoveMuscles::operate() , OpenSim::ModOpReplaceMusclesWithPathActuators::operate() , OpenSim::ModOpReplacePathsWithFunctionBasedPaths::operate() , and OpenSim::ModelProcessor::setModel() . ◆ finalizeConnections() [2/2] void OpenSim::Component::finalizeConnections Satisfy the Component 's connections specified by its Sockets and Inputs. Locate Components and their Outputs to satisfy the connections in an aggregate Component (e.g. Model ), which is the root of a tree of Components. ◆ formQStorage() void OpenSim::Model::formQStorage ( const Storage & originalStorage , Storage & qStorage ) ◆ formStateStorage() void OpenSim::Model::formStateStorage ( const Storage & originalStorage , Storage & statesStorage , bool warnUnspecifiedStates = true ) const Create a storage (statesStorage) that has same label order as model's states with values populated from originalStorage. Use the default state value if a state is unspecified in the originalStorage. If warnUnspecifiedStates is true then a warning is printed that includes the default value used for the state value unspecified in originalStorage. The input originalStorage must be in meters or radians for Coordinate values and their speeds (m/s, rad/s) otherwise an Exception is thrown. ◆ generateDecorations() void OpenSim::Model::generateDecorations ( bool fixed , const ModelDisplayHints & hints , const SimTK::State & state , SimTK::Array_< SimTK::DecorativeGeometry > & appendToThis ) const override virtual Optional method for generating arbitrary display geometry that reflects this Component at the specified state . This will be called once to obtain ground- and body-fixed geometry (with fixed= true ) , and then once per frame (with fixed= false ) to generate on-the-fly geometry such as rubber band lines, force arrows, labels, or debugging aids. Please note that there is a precondition that the state passed in to generateDecorations be realized to Stage::Position . If your component can visualize quantities realized at Velocity, Dynamics or Acceleration stages, then you must check that the stage has been realized before using/requesting stage dependent values. It is forbidden to realize the model to a higher stage within generateDecorations, because this can trigger costly side- effects such as evaluating all model forces even when performing a purely kinematic study. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::generateDecorations ( bool fixed, const ModelDisplayHints& hints, const SimTK::State& state, SimTK::Array_<SimTK::DecorativeGeometry>& appendToThis) const { // invoke parent class method Super::generateDecorations (fixed,hints,state,appendToThis); // ... your code goes here // can render velocity dependent quanities if stage is Velocity or higher if (state.getSystemStage() >= Stage::Velocity ) { // draw velocity vector for model COM } // can render computed forces if stage is Dynamics",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 29,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2d09b388-a178-496d-8849-ef865939cdd8",
    "document_id": "doc_184",
    "content": "this can trigger costly side- effects such as evaluating all model forces even when performing a purely kinematic study. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::generateDecorations ( bool fixed, const ModelDisplayHints& hints, const SimTK::State& state, SimTK::Array_<SimTK::DecorativeGeometry>& appendToThis) const { // invoke parent class method Super::generateDecorations (fixed,hints,state,appendToThis); // ... your code goes here // can render velocity dependent quanities if stage is Velocity or higher if (state.getSystemStage() >= Stage::Velocity ) { // draw velocity vector for model COM } // can render computed forces if stage is Dynamics or higher if (state.getSystemStage() >= Stage::Dynamics) { // change the length of a force arrow based on the force in N } } Parameters [in] fixed If true , generate only geometry that is fixed to a PhysicalFrame , configuration, and velocity. Otherwise generate only such dependent geometry. [in] hints See documentation for ModelDisplayHints ; you may want to alter the geometry you generate depending on what you find there. For example, you can determine whether the user wants to see debug geometry. [in] state The State for which geometry should be produced. See below for more information. [in,out] appendToThis Array to which generated geometry should be appended via the push_back() method. When called with fixed= true only modeling options and parameters (Instance variables) should affect geometry; time, position, and velocity should not. In that case OpenSim will already have realized the state through Instance stage. When called with fixed= false , you may consult any relevant value in state . However, to avoid unnecessary computation, OpenSim guarantees only that state will have been realized through Position stage; if you need anything higher than that (reaction forces, for example) you should make sure the state is realized through Acceleration stage. Reimplemented from OpenSim::Component . ◆ get_assembly_accuracy() const double& OpenSim::Model::get_assembly_accuracy ( ) const inline Get the value of the assembly_accuracy property. ◆ get_BodySet() const BodySet & OpenSim::Model::get_BodySet ( ) const inline Get the value of the BodySet property. ◆ get_ComponentSet() const ComponentSet & OpenSim::Model::get_ComponentSet ( ) const inline Get the value of the ComponentSet property. ◆ get_ConstraintSet() const ConstraintSet & OpenSim::Model::get_ConstraintSet ( ) const inline Get the value of the ConstraintSet property. ◆ get_ContactGeometrySet() const ContactGeometrySet & OpenSim::Model::get_ContactGeometrySet ( ) const inline Get the value of the ContactGeometrySet property. ◆ get_ControllerSet() const ControllerSet & OpenSim::Model::get_ControllerSet ( ) const inline Get the value of the ControllerSet property. ◆ get_credits() const std::string& OpenSim::Model::get_credits ( ) const inline Get the value of the credits property. ◆ get_force_units() const std::string& OpenSim::Model::get_force_units ( ) const inline Get the value of the force_units property. ◆ get_ForceSet() const ForceSet & OpenSim::Model::get_ForceSet ( ) const inline Get the value of the ForceSet property. ◆ get_gravity() const SimTK::Vec3& OpenSim::Model::get_gravity ( ) const inline Get the value of the gravity property. ◆ get_ground() const Ground & OpenSim::Model::get_ground ( ) const inline Get the value of the ground property. ◆ get_JointSet() const JointSet & OpenSim::Model::get_JointSet ( ) const inline Get the value",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 30,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "75cb1469-d68f-40df-a34b-788badafaac2",
    "document_id": "doc_184",
    "content": "value of the ControllerSet property. ◆ get_credits() const std::string& OpenSim::Model::get_credits ( ) const inline Get the value of the credits property. ◆ get_force_units() const std::string& OpenSim::Model::get_force_units ( ) const inline Get the value of the force_units property. ◆ get_ForceSet() const ForceSet & OpenSim::Model::get_ForceSet ( ) const inline Get the value of the ForceSet property. ◆ get_gravity() const SimTK::Vec3& OpenSim::Model::get_gravity ( ) const inline Get the value of the gravity property. ◆ get_ground() const Ground & OpenSim::Model::get_ground ( ) const inline Get the value of the ground property. ◆ get_JointSet() const JointSet & OpenSim::Model::get_JointSet ( ) const inline Get the value of the JointSet property. ◆ get_length_units() const std::string& OpenSim::Model::get_length_units ( ) const inline Get the value of the length_units property. ◆ get_MarkerSet() const MarkerSet & OpenSim::Model::get_MarkerSet ( ) const inline Get the value of the MarkerSet property. ◆ get_ModelVisualPreferences() const ModelVisualPreferences & OpenSim::Model::get_ModelVisualPreferences ( ) const inline Get the value of the ModelVisualPreferences property. ◆ get_ProbeSet() const ProbeSet & OpenSim::Model::get_ProbeSet ( ) const inline Get the value of the ProbeSet property. ◆ get_publications() const std::string& OpenSim::Model::get_publications ( ) const inline Get the value of the publications property. ◆ getActuators() const Set < Actuator >& OpenSim::Model::getActuators ( ) const Get the subset of Forces in the model which are actuators. Returns The set of Actuators ◆ getAllControllersEnabled() bool OpenSim::Model::getAllControllersEnabled ( ) const ◆ getAnalysisSet() const AnalysisSet & OpenSim::Model::getAnalysisSet ( ) const inline ◆ getBodySet() const BodySet & OpenSim::Model::getBodySet ( ) const inline ◆ getClassName() static const std::string& OpenSim::Model::getClassName ( ) inline static This returns \"Model\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::Model::getConcreteClassName ( ) const inline override virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::ModelComponent . ◆ getConstraintSet() const ConstraintSet & OpenSim::Model::getConstraintSet ( ) const inline ◆ getContactGeometrySet() const ContactGeometrySet & OpenSim::Model::getContactGeometrySet ( ) const inline ◆ getControllerSet() const ControllerSet & OpenSim::Model::getControllerSet ( ) const ◆ getControls() const SimTK::Vector& OpenSim::Model::getControls ( const SimTK::State & s ) const Const access to controls does not invalidate dynamics. ◆ getControlsTable() TimeSeriesTable OpenSim::Model::getControlsTable ( ) const ◆ getCoordinateNamesInMultibodyTreeOrder() SimTK::Array_<std::string> OpenSim::Model::getCoordinateNamesInMultibodyTreeOrder ( ) inline A variant of getCoordinatesInMultibodyTreeOrder that returns names for Scripting users. ◆ getCoordinateSet() const CoordinateSet & OpenSim::Model::getCoordinateSet ( ) const inline ◆ getCoordinatesInMultibodyTreeOrder() std::vector<SimTK::ReferencePtr<const OpenSim::Coordinate > > OpenSim::Model::getCoordinatesInMultibodyTreeOrder ( ) const Obtain a list of Model 's Coordinates in the order they appear in the MultibodySystem after Model::initSystem() has been called. Coordinates in the CoordinateSet do not have a predefined order. In some instances it is helpful to get the coordinates in order of",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 31,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d2e7dc0c-e418-415d-973f-a20b31fb1f16",
    "document_id": "doc_184",
    "content": "SimTK::State & s ) const Const access to controls does not invalidate dynamics. ◆ getControlsTable() TimeSeriesTable OpenSim::Model::getControlsTable ( ) const ◆ getCoordinateNamesInMultibodyTreeOrder() SimTK::Array_<std::string> OpenSim::Model::getCoordinateNamesInMultibodyTreeOrder ( ) inline A variant of getCoordinatesInMultibodyTreeOrder that returns names for Scripting users. ◆ getCoordinateSet() const CoordinateSet & OpenSim::Model::getCoordinateSet ( ) const inline ◆ getCoordinatesInMultibodyTreeOrder() std::vector<SimTK::ReferencePtr<const OpenSim::Coordinate > > OpenSim::Model::getCoordinatesInMultibodyTreeOrder ( ) const Obtain a list of Model 's Coordinates in the order they appear in the MultibodySystem after Model::initSystem() has been called. Coordinates in the CoordinateSet do not have a predefined order. In some instances it is helpful to get the coordinates in order of generalized coordinates in the Multibody Tree as defined in the underlying MultibodySystem. For example, computing the generalized forces from the System, yields a vector of generalized forces in order of the Multibody Tree and now that can be attributed to corresponding generalized Coordinates of the Model . Throws if the MultibodySystem is not valid. ◆ getCredits() const std::string& OpenSim::Model::getCredits ( ) const inline Get the credits (e.g., model author names) associated with the model. Returns Credits string. ◆ getDefaultControls() const SimTK::Vector& OpenSim::Model::getDefaultControls ( ) const inline ◆ getDefaultSubsystem() const SimTK::DefaultSystemSubsystem& OpenSim::Model::getDefaultSubsystem ( ) const inline Get read-only access to the internal DefaultSystemSubsystem allocated by this Model's Simbody MultibodySystem. ◆ getDisplayHints() const ModelDisplayHints & OpenSim::Model::getDisplayHints ( ) const inline Get read only access to the ModelDisplayHints object stored with this Model. These should be checked whenever display geometry is being generated. ◆ getForceSet() const ForceSet & OpenSim::Model::getForceSet ( ) const inline ◆ getForceSubsystem() const SimTK::GeneralForceSubsystem& OpenSim::Model::getForceSubsystem ( ) const inline Get read-only access to the internal Simbody GeneralForceSubsystem allocated by this Model. ◆ getForceUnits() const Units & OpenSim::Model::getForceUnits ( ) const inline Get the force units associated with the model. Returns Force units ◆ getGravity() SimTK::Vec3 OpenSim::Model::getGravity ( ) const Get the gravity vector in the global frame. Returns The XYZ gravity vector in the global frame. ◆ getGravityBodyForces() const SimTK::Vector_< SimTK::SpatialVec >& OpenSim::Model::getGravityBodyForces ( const SimTK::State & state ) const inline (Advanced) Get read only access to internal Simbody Body Forces due to Gravity ◆ getGravityForce() const SimTK::Force::Gravity& OpenSim::Model::getGravityForce ( ) const inline Get read-only access to the Simbody Force::Gravity element that was allocated by this Model. ◆ getGround() const Ground & OpenSim::Model::getGround ( ) const Get a const reference to the Ground reference frame. Examples: exampleHangingMuscle.cpp . ◆ getInertiaAboutMassCenter() SimTK::Inertia OpenSim::Model::getInertiaAboutMassCenter ( const SimTK::State & s ) const Get the whole-body inertia of the model about the center of mass, expressed in the Ground frame. ◆ getInputFileName() const std::string& OpenSim::Model::getInputFileName ( ) const inline Get the XML file name used to construct the model. Returns XML file name string. ◆ getJointSet() const JointSet & OpenSim::Model::getJointSet ( ) const ◆ getLengthUnits() const Units & OpenSim::Model::getLengthUnits ( ) const inline Get the length units associated with the model. Returns Length units. ◆ getMarkerSet() const MarkerSet & OpenSim::Model::getMarkerSet ( ) const inline ◆ getMatterSubsystem() const SimTK::SimbodyMatterSubsystem& OpenSim::Model::getMatterSubsystem ( ) const inline Get read-only access to the internal SimbodyMatterSubsystem allocated by this Model.",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 32,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1ac887c7-40da-440e-b757-6047c69b4efd",
    "document_id": "doc_184",
    "content": "the whole-body inertia of the model about the center of mass, expressed in the Ground frame. ◆ getInputFileName() const std::string& OpenSim::Model::getInputFileName ( ) const inline Get the XML file name used to construct the model. Returns XML file name string. ◆ getJointSet() const JointSet & OpenSim::Model::getJointSet ( ) const ◆ getLengthUnits() const Units & OpenSim::Model::getLengthUnits ( ) const inline Get the length units associated with the model. Returns Length units. ◆ getMarkerSet() const MarkerSet & OpenSim::Model::getMarkerSet ( ) const inline ◆ getMatterSubsystem() const SimTK::SimbodyMatterSubsystem& OpenSim::Model::getMatterSubsystem ( ) const inline Get read-only access to the internal SimbodyMatterSubsystem allocated by this Model. Referenced by OpenSim::MocoTropterSolver::ImplicitTropterProblem< T >::calc_differential_algebraic_equations() , OpenSim::MocoTropterSolver::TropterProblemBase< T >::calcAndApplyKinematicConstraintForces() , OpenSim::MocoTropterSolver::TropterProblemBase< T >::calcKinematicConstraintErrors() , and OpenSim::MocoTropterSolver::TropterProblemBase< T >::TropterProblemBase() . ◆ getMiscModelComponentSet() const ComponentSet & OpenSim::Model::getMiscModelComponentSet ( ) const inline Get the subst of misc ModelComponents in the model. Returns The set of misc ModelComponents ◆ getMobilityForces() const SimTK::Vector& OpenSim::Model::getMobilityForces ( const SimTK::State & state ) inline (Advanced) Get read only access to internal Simbody Mobility Forces at Dynamics stage ◆ getMultibodySystem() const SimTK::MultibodySystem& OpenSim::Model::getMultibodySystem ( ) const inline Get read-only access to the internal Simbody MultibodySystem that was created by this Model at the last initSystem() call. ◆ getMuscles() const Set < Muscle >& OpenSim::Model::getMuscles ( ) const Get the subset of Forces in the model which are muscles. Returns The set of Muscles ◆ getNumAnalyses() int OpenSim::Model::getNumAnalyses ( ) const Get the number of analyses in the model. Returns The number of analyses. ◆ getNumBodies() int OpenSim::Model::getNumBodies ( ) const Get the total number of bodies in the model. Returns Number of bodies. ◆ getNumConstraints() int OpenSim::Model::getNumConstraints ( ) const Get the total number of constraints in the model. Returns Number of constraints. ◆ getNumContactGeometries() int OpenSim::Model::getNumContactGeometries ( ) const Get the number of ContactGeometries in the model. Returns Number of ContactGeometries. ◆ getNumControls() int OpenSim::Model::getNumControls ( ) const Get the number of controls for this the model. Only valid once underlying system for the model has been created. Throws an exception if called before Model::initSystem() Returns number of controls corresponding to all the actuators in the model ◆ getNumCoordinates() int OpenSim::Model::getNumCoordinates ( ) const Get the total number of coordinates in the model. Returns Number of coordinates. ◆ getNumJoints() int OpenSim::Model::getNumJoints ( ) const Get the total number of joints in the model. Returns Number of joints. ◆ getNumMarkers() int OpenSim::Model::getNumMarkers ( ) const Get the number of markers in the model. Returns Number of markers. ◆ getNumMuscleStates() int OpenSim::Model::getNumMuscleStates ( ) const ◆ getNumProbes() int OpenSim::Model::getNumProbes ( ) const Get the total number of probes in the model. Returns Number of probes. ◆ getNumProbeStates() int OpenSim::Model::getNumProbeStates ( ) const ◆ getNumSpeeds() int OpenSim::Model::getNumSpeeds ( ) const Get the total number of speeds in the model. Returns Number of speeds. ◆ getObjectByTypeAndName() const Object & OpenSim::Model::getObjectByTypeAndName ( const std::string & typeString , const std::string & nameString ) Utility to get a reference to an Object based on its name and type throws an exception if the object was",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 33,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "300cee24-86f3-4443-8067-031a3012d697",
    "document_id": "doc_184",
    "content": "markers in the model. Returns Number of markers. ◆ getNumMuscleStates() int OpenSim::Model::getNumMuscleStates ( ) const ◆ getNumProbes() int OpenSim::Model::getNumProbes ( ) const Get the total number of probes in the model. Returns Number of probes. ◆ getNumProbeStates() int OpenSim::Model::getNumProbeStates ( ) const ◆ getNumSpeeds() int OpenSim::Model::getNumSpeeds ( ) const Get the total number of speeds in the model. Returns Number of speeds. ◆ getObjectByTypeAndName() const Object & OpenSim::Model::getObjectByTypeAndName ( const std::string & typeString , const std::string & nameString ) Utility to get a reference to an Object based on its name and type throws an exception if the object was not found. names are case sensitive Parameters typeString the type of object being looked up ( Body , Force , Constraint , Coordinate , Joint , Marker , Controller , Frame ) nameString the name of the object being looked up Returns reference to the object if found or throws an exception. ◆ getProbeSet() const ProbeSet & OpenSim::Model::getProbeSet ( ) const inline Get the subset of Probes in the model. Returns The set of Probes ◆ getPublications() const std::string& OpenSim::Model::getPublications ( ) const inline Get the publications associated with the model. Returns Publications string. ◆ getRigidBodyForces() const SimTK::Vector_< SimTK::SpatialVec >& OpenSim::Model::getRigidBodyForces ( const SimTK::State & state ) inline (Advanced) Get read only access to internal Simbody RigidBodyForces at Dynamics stage ◆ getSimbodyEngine() const SimbodyEngine & OpenSim::Model::getSimbodyEngine ( ) const inline Get the model's dynamics engine. Returns Reference to the Simbody dynamics engine Referenced by OpenSim::TableProcessor::processAndConvertToRadians() . ◆ getTotalMass() double OpenSim::Model::getTotalMass ( const SimTK::State & s ) const Get the total mass of the model. Returns the mass of the model. ◆ getUseVisualizer() bool OpenSim::Model::getUseVisualizer ( ) const inline Return the current setting of the \"use visualizer\" flag, which will take effect at the next call to initSystem() on this Model. ◆ getValidationLog() const std::string& OpenSim::Model::getValidationLog ( ) const inline Get a log of errors/warnings encountered when loading/constructing the model. ◆ getVisualizer() const ModelVisualizer & OpenSim::Model::getVisualizer ( ) const inline Obtain read-only access to the ModelVisualizer . This will throw an exception if visualization was not requested or initSystem() not yet called. Returns A const reference to the allocated ModelVisualizer . ◆ getWarningMesssageForMotionTypeInconsistency() std::string OpenSim::Model::getWarningMesssageForMotionTypeInconsistency ( ) const Get a warning message if any Coordinates have a MotionType that is NOT consistent with its previous user-specified value that existed in Model files prior to OpenSim 4.0. ◆ getWorkingState() const SimTK::State& OpenSim::Model::getWorkingState ( ) const Convenience method that returns a reference to the model's 'working' state. This is just returning the reference that was returned by initSystem() and initializeState() – note that either of these methods must be called prior to getWorkingState() , otherwise an empty state will be returned. ◆ hasVisualizer() bool OpenSim::Model::hasVisualizer ( ) const inline Test whether a ModelVisualizer has been created for this Model . Even if visualization has been requested there will be no visualizer present until initSystem() has been successfully invoked. Use this method prior to calling getVisualizer() or updVisualizer() to avoid an unpleasant exception. ◆",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 34,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "601d9653-7817-492c-b7ff-7bc2035c102d",
    "document_id": "doc_184",
    "content": "( ) const Convenience method that returns a reference to the model's 'working' state. This is just returning the reference that was returned by initSystem() and initializeState() – note that either of these methods must be called prior to getWorkingState() , otherwise an empty state will be returned. ◆ hasVisualizer() bool OpenSim::Model::hasVisualizer ( ) const inline Test whether a ModelVisualizer has been created for this Model . Even if visualization has been requested there will be no visualizer present until initSystem() has been successfully invoked. Use this method prior to calling getVisualizer() or updVisualizer() to avoid an unpleasant exception. ◆ initializeState() SimTK::State& OpenSim::Model::initializeState ( ) After buildSystem() has been called, and any additional modifications to the Simbody MultibodySystem have been made, call this method to finalize the MultibodySystem (by calling its realizeTopology() method), obtain an initial state, and assemble it so that position constraints are satisfied. The initStateFromProperties() method of each contained ModelComponent will be invoked. A reference to the writable internally- maintained model State is returned (note that this does not affect the system's default state (which is part of the model and hence read only). The model's state can be reset to the system's default state at any time by re-executing initializeState() . ◆ initStateWithoutRecreatingSystem() void OpenSim::Model::initStateWithoutRecreatingSystem ( SimTK::State & state ) const inline This is called after the Model is fully created but before starting a simulation. It ONLY initializes the computational system used to simulate the model and addToSystem() has been called already. This method should only be used if if additional SimTK::System components are being added using the SimTK API and the programmer is certain that the model's system has been created. ◆ initSystem() SimTK::State& OpenSim::Model::initSystem ( ) inline Convenience method that invokes buildSystem() and then initializeState() . This returns a reference to the writable internally- maintained model State. Note that this does not affect the system's default state (which is part of the model and hence read-only). Examples: example2DWalking.cpp , example2DWalkingMetabolics.cpp , and exampleCustomImplicitAuxiliaryDynamics.cpp . Referenced by OpenSim::ModOpAddReserves::operate() , and OpenSim::ModOpReplaceJointsWithWelds::operate() . ◆ invalidateSystem() void OpenSim::Model::invalidateSystem ( ) Mark the computational system as invalid. This should be called whenever a property of the model is modified. Once this has been called, no calculations can be done until initSystem() is called again. ◆ isControlled() bool OpenSim::Model::isControlled ( ) const Get a flag indicating if the model needs controls to operate its actuators. ◆ isValidSystem() bool OpenSim::Model::isValidSystem ( ) const Check that the underlying computational system representing the model is valid. That is, is the system ready for performing calculations. ◆ markControlsAsValid() void OpenSim::Model::markControlsAsValid ( const SimTK::State & s ) const Mark controls as valid after an update at a given state. Indicates that controls are valid for use at the dynamics stage. If the stage is Velocity or lower the controls will remain invalid. Parameters [in] s System state in which the controls are updated ◆ overrideAllActuators() void OpenSim::Model::overrideAllActuators ( SimTK::State & s , bool flag ) Convenience function to turn on/off overriding the force",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 35,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f89136e5-22d9-4e32-8b20-d445d7cd4cc6",
    "document_id": "doc_184",
    "content": "OpenSim::Model::isValidSystem ( ) const Check that the underlying computational system representing the model is valid. That is, is the system ready for performing calculations. ◆ markControlsAsValid() void OpenSim::Model::markControlsAsValid ( const SimTK::State & s ) const Mark controls as valid after an update at a given state. Indicates that controls are valid for use at the dynamics stage. If the stage is Velocity or lower the controls will remain invalid. Parameters [in] s System state in which the controls are updated ◆ overrideAllActuators() void OpenSim::Model::overrideAllActuators ( SimTK::State & s , bool flag ) Convenience function to turn on/off overriding the force for all actuators. ◆ printBasicInfo() void OpenSim::Model::printBasicInfo ( std::ostream & aOStream = std::cout ) const Print some basic information about the model. Parameters aOStream Output stream. If this is std::cout, then the info is logged using OpenSim 's Logger so that the info is printed to all log sinks. ◆ printControlStorage() void OpenSim::Model::printControlStorage ( const std::string & fileName ) const ◆ printDetailedInfo() void OpenSim::Model::printDetailedInfo ( const SimTK::State & s , std::ostream & aOStream = std::cout ) const Print detailed information about the model. Parameters s the system State. aOStream Output stream. If this is std::cout, then the info is logged using OpenSim 's Logger so that the info is printed to all log sinks. ◆ realizeAcceleration() void OpenSim::Model::realizeAcceleration ( const SimTK::State & state ) const Perform computations that may depend on applied forces. ◆ realizeDynamics() void OpenSim::Model::realizeDynamics ( const SimTK::State & state ) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. ◆ realizePosition() void OpenSim::Model::realizePosition ( const SimTK::State & state ) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). ◆ realizeReport() void OpenSim::Model::realizeReport ( const SimTK::State & state ) const Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. ◆ realizeTime() void OpenSim::Model::realizeTime ( const SimTK::State & state ) const Perform computations that depend only on time and earlier stages. ◆ realizeVelocity() void OpenSim::Model::realizeVelocity ( const SimTK::State & state ) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). Referenced by OpenSim::MocoTropterSolver::TropterProblemBase< T >::calcAndApplyKinematicConstraintForces() . ◆ removeAnalysis() void OpenSim::Model::removeAnalysis ( Analysis * analysis , bool deleteIt = true ) Remove an Analysis from the Model. Parameters analysis Pointer to the analysis to remove. deleteIt Whether the removed object should be deleted. ◆ removeController() void OpenSim::Model::removeController ( Controller * aController ) Remove a Controller from the Model. ◆ removeProbe() void OpenSim::Model::removeProbe ( Probe * probe ) remove passed in Probe from model ◆ safeDownCast() static Model * OpenSim::Model::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Model.safeDownCast(obj) . This is equivalent to dynamic_cast<Model*>(obj) in C++. ◆ scale() bool OpenSim::Model::scale (",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 36,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "91a3b210-a892-4435-8c11-79c87084f0c6",
    "document_id": "doc_184",
    "content": "analysis , bool deleteIt = true ) Remove an Analysis from the Model. Parameters analysis Pointer to the analysis to remove. deleteIt Whether the removed object should be deleted. ◆ removeController() void OpenSim::Model::removeController ( Controller * aController ) Remove a Controller from the Model. ◆ removeProbe() void OpenSim::Model::removeProbe ( Probe * probe ) remove passed in Probe from model ◆ safeDownCast() static Model * OpenSim::Model::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Model.safeDownCast(obj) . This is equivalent to dynamic_cast<Model*>(obj) in C++. ◆ scale() bool OpenSim::Model::scale ( SimTK::State & state , const ScaleSet & scaleSet , bool preserveMassDist , double finalMass = -1.0 ) Scale the model. Parameters state State containing parameter values that might be modified here. scaleSet The set of XYZ scale factors for the bodies. preserveMassDist Whether the masses of the bodies should be scaled by the scale factors. If false , body masses will be adjusted only if finalMass has been specified; if true , body masses will be scaled by the product of the body's scale factors (and then a second time if finalMass has been specified). Inertias are always updated to reflect changes in body dimensions. finalMass The total mass that the scaled model should have. Returns Whether or not scaling was successful. ◆ set_assembly_accuracy() void OpenSim::Model::set_assembly_accuracy ( const double & value ) inline Set the value of the assembly_accuracy property. ◆ set_BodySet() void OpenSim::Model::set_BodySet ( const BodySet & value ) inline Set the value of the BodySet property. ◆ set_ComponentSet() void OpenSim::Model::set_ComponentSet ( const ComponentSet & value ) inline Set the value of the ComponentSet property. ◆ set_ConstraintSet() void OpenSim::Model::set_ConstraintSet ( const ConstraintSet & value ) inline Set the value of the ConstraintSet property. ◆ set_ContactGeometrySet() void OpenSim::Model::set_ContactGeometrySet ( const ContactGeometrySet & value ) inline Set the value of the ContactGeometrySet property. ◆ set_ControllerSet() void OpenSim::Model::set_ControllerSet ( const ControllerSet & value ) inline Set the value of the ControllerSet property. ◆ set_credits() void OpenSim::Model::set_credits ( const std::string & value ) inline Set the value of the credits property. ◆ set_force_units() void OpenSim::Model::set_force_units ( const std::string & value ) inline Set the value of the force_units property. ◆ set_ForceSet() void OpenSim::Model::set_ForceSet ( const ForceSet & value ) inline Set the value of the ForceSet property. ◆ set_gravity() void OpenSim::Model::set_gravity ( const SimTK::Vec3 & value ) inline Set the value of the gravity property. Examples: exampleHangingMuscle.cpp . ◆ set_ground() void OpenSim::Model::set_ground ( const Ground & value ) inline Set the value of the ground property. ◆ set_JointSet() void OpenSim::Model::set_JointSet ( const JointSet & value ) inline Set the value of the JointSet property. ◆ set_length_units() void OpenSim::Model::set_length_units ( const std::string & value ) inline Set the value of the length_units property. ◆ set_MarkerSet() void OpenSim::Model::set_MarkerSet ( const MarkerSet & value ) inline Set the value of the MarkerSet property. ◆ set_ModelVisualPreferences() void OpenSim::Model::set_ModelVisualPreferences ( const ModelVisualPreferences & value ) inline Set the value of the ModelVisualPreferences property. ◆ set_ProbeSet() void OpenSim::Model::set_ProbeSet (",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 37,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "579ae648-6c1e-46f5-a659-f548277ea378",
    "document_id": "doc_184",
    "content": "gravity property. Examples: exampleHangingMuscle.cpp . ◆ set_ground() void OpenSim::Model::set_ground ( const Ground & value ) inline Set the value of the ground property. ◆ set_JointSet() void OpenSim::Model::set_JointSet ( const JointSet & value ) inline Set the value of the JointSet property. ◆ set_length_units() void OpenSim::Model::set_length_units ( const std::string & value ) inline Set the value of the length_units property. ◆ set_MarkerSet() void OpenSim::Model::set_MarkerSet ( const MarkerSet & value ) inline Set the value of the MarkerSet property. ◆ set_ModelVisualPreferences() void OpenSim::Model::set_ModelVisualPreferences ( const ModelVisualPreferences & value ) inline Set the value of the ModelVisualPreferences property. ◆ set_ProbeSet() void OpenSim::Model::set_ProbeSet ( const ProbeSet & value ) inline Set the value of the ProbeSet property. ◆ set_publications() void OpenSim::Model::set_publications ( const std::string & value ) inline Set the value of the publications property. ◆ setAllControllersEnabled() void OpenSim::Model::setAllControllersEnabled ( bool enabled ) ◆ setAuthors() void OpenSim::Model::setAuthors ( const std::string & aCredits ) inline Set the credits (e.g., model author names) associated with the model. Parameters aCredits The string of credits. ◆ setControls() void OpenSim::Model::setControls ( const SimTK::State & s , const SimTK::Vector & controls ) const Alternatively, set the controls on the model at a given state. Note, this method will invalidate the dynamics of the model, but will mark the controls as valid. (E.g. controllers will not be invoked) Parameters [in] s System state at which to apply the controls [in] controls The complete Vector of controls to be applied ◆ setDefaultControls() void OpenSim::Model::setDefaultControls ( const SimTK::Vector & controls ) const inline ◆ setGravity() bool OpenSim::Model::setGravity ( const SimTK::Vec3 & aGrav ) Set the gravity vector in the global frame. Parameters aGrav The XYZ gravity vector Returns Whether or not the gravity vector was successfully set. ◆ setInputFileName() void OpenSim::Model::setInputFileName ( const std::string & fileName ) inline Set the XML file name used to construct the model. Parameters fileName The XML file name. ◆ setPublications() void OpenSim::Model::setPublications ( const std::string & aPublications ) inline Set the publications associated with the model. Parameters aPublications The string of publications. ◆ setup() void OpenSim::Model::setup ( ) Perform some set up functions that happen after the object has been deserialized. TODO: this method is not yet designed to be called after a model has been copied. ◆ setUseVisualizer() void OpenSim::Model::setUseVisualizer ( bool visualize ) inline Request or suppress visualization of this Model. This flag is checked during initSystem() and if set causes the Model to allocate a ModelVisualizer that provides visualization and interaction with the Model as it is executing. The default is no visualization. See also getModelVisualizer() ◆ storeControls() void OpenSim::Model::storeControls ( const SimTK::State & s , int step ) ◆ upd_assembly_accuracy() double& OpenSim::Model::upd_assembly_accuracy ( ) inline Get a writable reference to the assembly_accuracy property. ◆ upd_BodySet() BodySet & OpenSim::Model::upd_BodySet ( ) inline Get a writable reference to the BodySet property. ◆ upd_ComponentSet() ComponentSet & OpenSim::Model::upd_ComponentSet ( ) inline Get a writable reference to the ComponentSet property. ◆ upd_ConstraintSet() ConstraintSet & OpenSim::Model::upd_ConstraintSet ( ) inline Get a writable reference to the ConstraintSet property. ◆ upd_ContactGeometrySet()",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 38,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8e19cd3a-3554-44eb-8dd6-3f70dd3969e5",
    "document_id": "doc_184",
    "content": "a ModelVisualizer that provides visualization and interaction with the Model as it is executing. The default is no visualization. See also getModelVisualizer() ◆ storeControls() void OpenSim::Model::storeControls ( const SimTK::State & s , int step ) ◆ upd_assembly_accuracy() double& OpenSim::Model::upd_assembly_accuracy ( ) inline Get a writable reference to the assembly_accuracy property. ◆ upd_BodySet() BodySet & OpenSim::Model::upd_BodySet ( ) inline Get a writable reference to the BodySet property. ◆ upd_ComponentSet() ComponentSet & OpenSim::Model::upd_ComponentSet ( ) inline Get a writable reference to the ComponentSet property. ◆ upd_ConstraintSet() ConstraintSet & OpenSim::Model::upd_ConstraintSet ( ) inline Get a writable reference to the ConstraintSet property. ◆ upd_ContactGeometrySet() ContactGeometrySet & OpenSim::Model::upd_ContactGeometrySet ( ) inline Get a writable reference to the ContactGeometrySet property. ◆ upd_ControllerSet() ControllerSet & OpenSim::Model::upd_ControllerSet ( ) inline Get a writable reference to the ControllerSet property. ◆ upd_credits() std::string& OpenSim::Model::upd_credits ( ) inline Get a writable reference to the credits property. ◆ upd_force_units() std::string& OpenSim::Model::upd_force_units ( ) inline Get a writable reference to the force_units property. ◆ upd_ForceSet() ForceSet & OpenSim::Model::upd_ForceSet ( ) inline Get a writable reference to the ForceSet property. ◆ upd_gravity() SimTK::Vec3& OpenSim::Model::upd_gravity ( ) inline Get a writable reference to the gravity property. ◆ upd_ground() Ground & OpenSim::Model::upd_ground ( ) inline Get a writable reference to the ground property. ◆ upd_JointSet() JointSet & OpenSim::Model::upd_JointSet ( ) inline Get a writable reference to the JointSet property. ◆ upd_length_units() std::string& OpenSim::Model::upd_length_units ( ) inline Get a writable reference to the length_units property. ◆ upd_MarkerSet() MarkerSet & OpenSim::Model::upd_MarkerSet ( ) inline Get a writable reference to the MarkerSet property. ◆ upd_ModelVisualPreferences() ModelVisualPreferences & OpenSim::Model::upd_ModelVisualPreferences ( ) inline Get a writable reference to the ModelVisualPreferences property. ◆ upd_ProbeSet() ProbeSet & OpenSim::Model::upd_ProbeSet ( ) inline Get a writable reference to the ProbeSet property. ◆ upd_publications() std::string& OpenSim::Model::upd_publications ( ) inline Get a writable reference to the publications property. ◆ updActuators() Set < Actuator >& OpenSim::Model::updActuators ( ) ◆ updAnalysisSet() AnalysisSet & OpenSim::Model::updAnalysisSet ( ) inline ◆ updateAssemblyConditions() void OpenSim::Model::updateAssemblyConditions ( SimTK::State & s ) Update the AssemblySolver to the latest coordinate locking/constraints. ◆ updateFromXMLNode() void OpenSim::Model::updateFromXMLNode ( SimTK::Xml::Element & aNode , int versionNumber = -1 ) override virtual Override of the default implementation to account for versioning. Reimplemented from OpenSim::Component . ◆ updateMarkerSet() void OpenSim::Model::updateMarkerSet ( MarkerSet & newMarkerSet ) Update the markers in the model by appending the ones in the passed-in marker set. If the marker of the same name exists in the model, then replace it. Parameters newMarkerSet the set of markers used to update the model's set. ◆ updBodySet() BodySet & OpenSim::Model::updBodySet ( ) inline ◆ updConstraintSet() ConstraintSet & OpenSim::Model::updConstraintSet ( ) inline ◆ updContactGeometrySet() ContactGeometrySet & OpenSim::Model::updContactGeometrySet ( ) inline ◆ updControllerSet() ControllerSet & OpenSim::Model::updControllerSet ( ) ◆ updControls() SimTK::Vector& OpenSim::Model::updControls ( const SimTK::State & s ) const Update the controls for this the model at a given state. Only callable once underlying system for the model has been created. Throws an exception if called before Model::initSystem() This call invalidates the dynamics of the model and invalidates the value of the controls",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 39,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "88a52f91-e3c9-41b1-ba4f-3e0edef01ff9",
    "document_id": "doc_184",
    "content": "replace it. Parameters newMarkerSet the set of markers used to update the model's set. ◆ updBodySet() BodySet & OpenSim::Model::updBodySet ( ) inline ◆ updConstraintSet() ConstraintSet & OpenSim::Model::updConstraintSet ( ) inline ◆ updContactGeometrySet() ContactGeometrySet & OpenSim::Model::updContactGeometrySet ( ) inline ◆ updControllerSet() ControllerSet & OpenSim::Model::updControllerSet ( ) ◆ updControls() SimTK::Vector& OpenSim::Model::updControls ( const SimTK::State & s ) const Update the controls for this the model at a given state. Only callable once underlying system for the model has been created. Throws an exception if called before Model::initSystem() This call invalidates the dynamics of the model and invalidates the value of the controls until they are marked as valid when the update is completed ( See also markControlsAsValid ) Parameters [in] s System state at which to apply the controls Returns writable controls Vector ◆ updCoordinateSet() CoordinateSet & OpenSim::Model::updCoordinateSet ( ) inline ◆ updDefaultControls() SimTK::Vector& OpenSim::Model::updDefaultControls ( ) const inline Writable access to the default values for controls. These values are used for control value during a simulation unless updated, for example, by a Controller ◆ updDefaultSubsystem() SimTK::DefaultSystemSubsystem& OpenSim::Model::updDefaultSubsystem ( ) inline (Advanced) Get writable access to the internal DefaultSystemSubsystem allocated by this Model's Simbody MultibodySystem. ◆ updDisplayHints() ModelDisplayHints & OpenSim::Model::updDisplayHints ( ) inline Get writable access to the ModelDisplayHints object stored with this Model. The GUI or ModelVisualizer can update these as a result of user requests, or an OpenSim API program can set them programmatically. ◆ updForceSet() ForceSet & OpenSim::Model::updForceSet ( ) inline ◆ updForceSubsystem() SimTK::GeneralForceSubsystem& OpenSim::Model::updForceSubsystem ( ) inline (Advanced) Get writable access to the internal Simbody GeneralForceSubsystem allocated by this Model. ◆ updGravityForce() SimTK::Force::Gravity& OpenSim::Model::updGravityForce ( ) inline (Advanced) Get writable access to the Simbody Force::Gravity element that was allocated by this Model. ◆ updGround() Ground & OpenSim::Model::updGround ( ) Get a writable reference to the Ground reference frame. Examples: exampleHangingMuscle.cpp . ◆ updJointSet() JointSet & OpenSim::Model::updJointSet ( ) ◆ updMarkerSet() MarkerSet & OpenSim::Model::updMarkerSet ( ) inline ◆ updMatterSubsystem() SimTK::SimbodyMatterSubsystem& OpenSim::Model::updMatterSubsystem ( ) inline (Advanced) Get writable access to the internal SimbodyMatterSubsystem allocated by this Model. ◆ updMiscModelComponentSet() ComponentSet & OpenSim::Model::updMiscModelComponentSet ( ) inline ◆ updMultibodySystem() SimTK::MultibodySystem& OpenSim::Model::updMultibodySystem ( ) const inline (Advanced) Get writable access to the internal Simbody MultibodySystem that was created by this Model at the last initSystem() call. Be careful if you make modifications to the System because that will invalidate initialization already performed by the Model . See also initStateWithoutRecreatingSystem() ◆ updMuscles() Set < Muscle >& OpenSim::Model::updMuscles ( ) ◆ updProbeSet() ProbeSet & OpenSim::Model::updProbeSet ( ) inline ◆ updSimbodyEngine() SimbodyEngine & OpenSim::Model::updSimbodyEngine ( ) inline ◆ updVisualizer() ModelVisualizer & OpenSim::Model::updVisualizer ( ) inline Obtain writable access to the ModelVisualizer . This will throw an exception if visualization was not requested or initSystem() not yet called. Writable access to the ModelVisualizer requires that you have writable access to this containing Model . Returns A non-const reference to the allocated ModelVisualizer . ◆ updWorkingState() SimTK::State& OpenSim::Model::updWorkingState ( ) ◆ writeMarkerFile() void OpenSim::Model::writeMarkerFile ( const std::string & aFileName ) Friends And Related Function Documentation ◆ Component friend",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 40,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "33c01f8c-7e61-4622-8b70-66aadd741006",
    "document_id": "doc_184",
    "content": "Muscle >& OpenSim::Model::updMuscles ( ) ◆ updProbeSet() ProbeSet & OpenSim::Model::updProbeSet ( ) inline ◆ updSimbodyEngine() SimbodyEngine & OpenSim::Model::updSimbodyEngine ( ) inline ◆ updVisualizer() ModelVisualizer & OpenSim::Model::updVisualizer ( ) inline Obtain writable access to the ModelVisualizer . This will throw an exception if visualization was not requested or initSystem() not yet called. Writable access to the ModelVisualizer requires that you have writable access to this containing Model . Returns A non-const reference to the allocated ModelVisualizer . ◆ updWorkingState() SimTK::State& OpenSim::Model::updWorkingState ( ) ◆ writeMarkerFile() void OpenSim::Model::writeMarkerFile ( const std::string & aFileName ) Friends And Related Function Documentation ◆ Component friend class Component friend OpenSim Property, Socket, Output, Input Documentation ◆ angular_momentum SimTK::Vec3 OpenSim::Model::angular_momentum Provides the value of calcAngularMomentum() and is available at stage SimTK::Stage::Velocity . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ assembly_accuracy double OpenSim::Model::assembly_accuracy \"Specify how accurate the resulting configuration of a model assembly \" \"should be. This translates to the number of significant digits in the \" \"resulting coordinate values. Therefore, if you require initial conditions \" \"accurate to four significant digits, use a minimum of 1e-4 as the accuracy.\" \"The default setting is 1e-9 as to satisfy the most stringent requirements by \" \"default. NOTE: Failure for a model to satisfy the assembly accuracy often \" \"indicates inconsistency in the constraints. For example, the feet are welded \" \"at locations measured to five significant digits while the model lacks dofs \" \"to change stance width, in which case it cannot achieve 1e-9 accuracy.\" This property appears in XML files under the tag <assembly_accuracy> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_assembly_accuracy() , upd_assembly_accuracy() , set_assembly_accuracy() ◆ BodySet BodySet OpenSim::Model::BodySet \"List of bodies that make up this model.\" This property appears in XML files under the tag <BodySet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_BodySet() , upd_BodySet() , set_BodySet() ◆ com_acceleration SimTK::Vec3 OpenSim::Model::com_acceleration Provides the value of calcMassCenterAcceleration() and is available at stage SimTK::Stage::Acceleration . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ com_position SimTK::Vec3 OpenSim::Model::com_position Provides the value of calcMassCenterPosition() and is available at stage SimTK::Stage::Position . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ com_velocity SimTK::Vec3 OpenSim::Model::com_velocity Provides the value of calcMassCenterVelocity() and is available at stage SimTK::Stage::Velocity . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ ComponentSet ComponentSet OpenSim::Model::ComponentSet \"Additional components in the model.\" This property appears in XML files under the tag <ComponentSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ComponentSet() , upd_ComponentSet() , set_ComponentSet() ◆ ConstraintSet ConstraintSet OpenSim::Model::ConstraintSet \"Constraints in the model.\" This property appears in XML files under the tag <ConstraintSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ConstraintSet() , upd_ConstraintSet() , set_ConstraintSet() ◆ ContactGeometrySet ContactGeometrySet OpenSim::Model::ContactGeometrySet \"Geometry to be used in contact forces.\" This property appears in",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 41,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f5381317-5e9d-4df4-978f-3bbb077f2e73",
    "document_id": "doc_184",
    "content": "◆ ComponentSet ComponentSet OpenSim::Model::ComponentSet \"Additional components in the model.\" This property appears in XML files under the tag <ComponentSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ComponentSet() , upd_ComponentSet() , set_ComponentSet() ◆ ConstraintSet ConstraintSet OpenSim::Model::ConstraintSet \"Constraints in the model.\" This property appears in XML files under the tag <ConstraintSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ConstraintSet() , upd_ConstraintSet() , set_ConstraintSet() ◆ ContactGeometrySet ContactGeometrySet OpenSim::Model::ContactGeometrySet \"Geometry to be used in contact forces.\" This property appears in XML files under the tag <ContactGeometrySet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ContactGeometrySet() , upd_ContactGeometrySet() , set_ContactGeometrySet() ◆ ControllerSet ControllerSet OpenSim::Model::ControllerSet \"Controllers that provide the control inputs for Actuators.\" This property appears in XML files under the tag <ControllerSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ControllerSet() , upd_ControllerSet() , set_ControllerSet() ◆ credits std::string OpenSim::Model::credits \"Credits (e.g., model author names) associated with the model.\" This property appears in XML files under the tag <credits> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_credits() , upd_credits() , set_credits() ◆ force_units std::string OpenSim::Model::force_units \"Units for all forces.\" This property appears in XML files under the tag <force_units> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_force_units() , upd_force_units() , set_force_units() ◆ ForceSet ForceSet OpenSim::Model::ForceSet \"Forces in the model (includes Actuators).\" This property appears in XML files under the tag <ForceSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ForceSet() , upd_ForceSet() , set_ForceSet() ◆ gravity SimTK::Vec3 OpenSim::Model::gravity \"Acceleration due to gravity, expressed in ground.\" This property appears in XML files under the tag <gravity> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_gravity() , upd_gravity() , set_gravity() ◆ ground Ground OpenSim::Model::ground \"The model's ground reference frame.\" This property appears in XML files under the tag <ground> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_ground() , upd_ground() , set_ground() ◆ JointSet JointSet OpenSim::Model::JointSet \"List of joints that connect the bodies.\" This property appears in XML files under the tag <JointSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_JointSet() , upd_JointSet() , set_JointSet() ◆ kinetic_energy double OpenSim::Model::kinetic_energy Provides the value of calcKineticEnergy() and is available at stage SimTK::Stage::Position . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ length_units std::string OpenSim::Model::length_units \"Units for all lengths.\" This property appears in XML files under the tag <length_units> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 42,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3d2600c5-6a17-42be-97df-34b4d5a9dcf1",
    "document_id": "doc_184",
    "content": "OpenSim::Model::JointSet \"List of joints that connect the bodies.\" This property appears in XML files under the tag <JointSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_JointSet() , upd_JointSet() , set_JointSet() ◆ kinetic_energy double OpenSim::Model::kinetic_energy Provides the value of calcKineticEnergy() and is available at stage SimTK::Stage::Position . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ length_units std::string OpenSim::Model::length_units \"Units for all lengths.\" This property appears in XML files under the tag <length_units> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_length_units() , upd_length_units() , set_length_units() ◆ linear_momentum SimTK::Vec3 OpenSim::Model::linear_momentum Provides the value of calcLinearMomentum() and is available at stage SimTK::Stage::Velocity . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ MarkerSet MarkerSet OpenSim::Model::MarkerSet \"Markers in the model.\" This property appears in XML files under the tag <MarkerSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_MarkerSet() , upd_MarkerSet() , set_MarkerSet() ◆ ModelVisualPreferences ModelVisualPreferences OpenSim::Model::ModelVisualPreferences \"Visual preferences for this model.\" This property appears in XML files under the tag <ModelVisualPreferences> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ModelVisualPreferences() , upd_ModelVisualPreferences() , set_ModelVisualPreferences() ◆ momentum SimTK::SpatialVec OpenSim::Model::momentum Provides the value of calcMomentum() and is available at stage SimTK::Stage::Velocity . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ potential_energy double OpenSim::Model::potential_energy Provides the value of calcPotentialEnergy() and is available at stage SimTK::Stage::Velocity . This output was generated with the OpenSim_DECLARE_OUTPUT macro. ◆ ProbeSet ProbeSet OpenSim::Model::ProbeSet \"Probes in the model.\" This property appears in XML files under the tag <ProbeSet> . This property was generated with the OpenSim_DECLARE_UNNAMED_PROPERTY macro; see Property to learn about the property system. See also get_ProbeSet() , upd_ProbeSet() , set_ProbeSet() ◆ publications std::string OpenSim::Model::publications \"Publications and references associated with the model.\" This property appears in XML files under the tag <publications> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_publications() , upd_publications() , set_publications() The documentation for this class was generated from the following file: OpenSim/Simulation/Model/Model.h OpenSim Model Generated on Thu Mar 21 2024 15:02:57 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Model.html",
      "title": "API: OpenSim::Model Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Model.html"
      ],
      "content_type": "api",
      "position": 43,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9c94e038-4a68-4bae-a713-4614ca8652b8",
    "document_id": "doc_61",
    "content": "Scott Delp Stanford Neuromuscular Biomechanics Lab Personal website Contact Interests My career has been focused on development of simulation tools and using them to solve important clinical problems. SimTK is the next step. Member since Apr 24, 2006 Member of 76 projects Projects Scott Delp is a member of the following projects: Are subject-specific musculoskeletal... Automated Knee MRI Segmentation Automated Staging of OA Using Deep Neural Networks Biosimulation Education and Training Chand's Simulations Connecting the legs with a spring improves human... Data-driven approach to estimate peak knee... Deformable Femur Model See all Easy-to-use interactive musculoskeletal... Efficient Methods for Multi-Domain Biomechanical... EMG-informed Computed Muscle Control for Dynamic... FEBio: Finite Elements for Biomechanics Flexing Computational Muscle: Modeling... Full Body Model for use in Dynamic Simulations of... Gait mechanics, muscle activity, and metabolic cost... How connecting the legs with a spring improves human... How much muscle strength is required to walk in... How peak knee loads are affected by changing leg... How Tendon Compliance Affects the Metabolic Cost... Life in Motion -- the annual 2007 Bio-X symposium... Lower Extremity Model Lower Limb Model 2010 Marker registration method informed by anatomical... May Liu's Walking Simulations ME/BIOE 485 (Modeling and Simulation of Human... Mobilize Center Planning Modeling and Predicting Osteoarthritis... Multiple Speed Walking Simulations Muscle-actuated Simulation of Human Running Muscle contributions to mass center... Muscle-Driven Simulations and Experimental Data... Neuromuscular Models Library NMBL Image to Model Pipeline OpenCap Open Knee(s): Virtual Biomechanical... OpenSense OpenSense: Validation of IMU-based estimates... OpenSim OpenSim 3D World Objects Library OpenSim Advanced User and Developer Workshop, August... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced Users Workshop, April 28-30, 2010 OpenSim Advanced Users Workshop, August 12-14, 2009 OpenSim and NMS Physiome Workshop OpenSim Developer Jamboree - July 12-14, 2010 OpenSim Developer's Jamboree 2008 OpenSim Developers Jamboree - October 28-30, 2009 OpenSim Developer's Jamboree | Winter 2009 OpenSim for the Warrior Web OpenSim Moco OpenSim Science Advisors OpenSim Soccer Ball Kicking Example Plantar Flexor Mechanics during Rearfoot Striking... Predicting gait adaptations due to plantarflexor... Predictive Simulation of Loaded and Inclined... Reference Models for Multi-Layer Tissue Structures Running in the wild: energetics explain ecological... Shoulder model personalization Simbios Dissemination Simulated Assistive Devices for Loaded Walking Simulated muscle fiber lengths and velocities during... Simulating Ideal Assistive Devices to Reduce the... Simulations of Crouch Gait Spasticity model in OpenSim Stabilization of Walking by Intrinsic Muscle... Static Optimization Validation of Changes in Peak... The Musculoskeletal Modeler's Kitchen Thoracoscapular muscle contributions to... Tibial forces in independently ambulatory children... Torso + Lower Extremity Model Upper Extremity Kinematic Model VA-Squish: Determining Cartilage Linear... Wrist Model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com",
    "metadata": {
      "source": "https://simtk.org/users/delp",
      "title": "SimTK: Scott Delp",
      "section": "",
      "hierarchy": [
        "users",
        "delp"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bc3327e5-3649-452a-b971-1f03400d37db",
    "document_id": "doc_61",
    "content": "Validation of Changes in Peak... The Musculoskeletal Modeler's Kitchen Thoracoscapular muscle contributions to... Tibial forces in independently ambulatory children... Torso + Lower Extremity Model Upper Extremity Kinematic Model VA-Squish: Determining Cartilage Linear... Wrist Model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/users/delp",
      "title": "SimTK: Scott Delp",
      "section": "",
      "hierarchy": [
        "users",
        "delp"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d53d7ec1-a949-4e74-9dba-916b6b74bc31",
    "document_id": "doc_34",
    "content": "List Map Click location to see followers there more than 1000 101 to 1000 26 to 100 6 to 25 2 to 5 1 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/following/followersmap.php?group_id=91",
      "title": "SimTK: OpenSim: Project Followers",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News 233 public followers and 80 private followers What does it mean to follow a project? Display followers in:",
      "hierarchy": [
        "plugins",
        "following",
        "followersmap.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8b30b2bb-2b92-4e04-b3d2-ebf31e547c3d",
    "document_id": "doc_151",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/people/557058:66d9330d-5eaa-420e-9fd2-673a8852433d?ref=confluence&src=profilecard",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "people",
        "557058:66d9330d-5eaa-420e-9fd2-673a8852433d"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "43a92add-7074-4c12-a1ee-0cf1a1d0258b",
    "document_id": "doc_39",
    "content": "Geography of Use 106719 Page Hits in the past 180 Days (19506 Unique Visitors) 39 Stanford Page Hits (2 Unique Visitors) more than 1000 101 to 1000 26 to 100 6 to 25 2 to 5 1 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/reports/usagemap.php?group_id=91",
      "title": "SimTK: OpenSim: Downloads Summary",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "plugins",
        "reports",
        "usagemap.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "db1e7b44-1620-4bd0-a18f-d71d7697b122",
    "document_id": "doc_156",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089821/Welcome+to+OpenSim",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089821",
        "Welcome+to+OpenSim"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "847503eb-8afd-4462-8590-30f4ed04c94f",
    "document_id": "doc_148",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53086036/Teaching+Hub",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53086036",
        "Teaching+Hub"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "54f764ea-1826-47c3-bc60-01449278bb3f",
    "document_id": "doc_56",
    "content": "DOWNLOAD NOW Open-source musculoskeletal simulation software used by thousands of researchers from around the world for over 15 years Get Support Access documentation and tutorials, and also get support on our discussion forum from experts around the world LEARN MORE See the Work Explore how OpenSim is being used, including for rehabilitation, orthopedics, and performance LEARN MORE Join the Community Connect with other researchers who are using OpenSim via our workshops, discussion forum, and other activities LEARN MORE OpenSim Software Ecosystem Technology to record motion and estimate musculoskeletal forces using smartphone videos GET STARTED Software for automatically scaling and computing inverse kinematics and dynamics from motion capture GET STARTED Software tool for solving optimal control problem with OpenSim musculoskeletal models GET STARTED Stay up-to-date with the latest developments in our software, workshops, seed grant opportunities, and more JOIN OUR MAILING LIST OpenSim is supported by the Mobilize Center , an NIH Biomedical Technology Resource Center (grant P41 EB027060); the Restore Center , an NIH-funded Medical Rehabilitation Research Resource Network Center (grant P2C HD101913); and the Wu Tsai Human Performance Alliance through the Joe and Clara Tsai Foundation. See the People and Acknowledgments pages for a list of the many people and organizations who have supported the OpenSim project over the years. ©2010-2024 OpenSim. All rights reserved. Community icon used from www.iconfinder.com under CC BY 4.0 License.",
    "metadata": {
      "source": "http://opensim.stanford.edu",
      "title": "OpenSim Community – OpenSIm",
      "section": "",
      "hierarchy": [
        "Root"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e5df7630-e7c1-439f-845c-01e18bcaddd3",
    "document_id": "doc_167",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53084548/Frequently+Asked+Questions",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53084548",
        "Frequently+Asked+Questions"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ae6c3e87-0da9-432f-b74b-d538e7088813",
    "document_id": "doc_123",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089933/Plotting",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089933",
        "Plotting"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e840e121-3092-4afd-ba6a-dfca834faee5",
    "document_id": "doc_129",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53084245/IMU+Inverse+Kinematics",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53084245",
        "IMU+Inverse+Kinematics"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "fc20cebb-b7f8-4c5c-99d6-12fbe51b8b2e",
    "document_id": "doc_161",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53091109/What+s+New+in+OpenSim+4.5",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53091109",
        "What+s+New+in+OpenSim+4.5"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ac02afc5-eb34-40d2-ba9f-799ad47adf46",
    "document_id": "doc_71",
    "content": "The Osteoporotic Virtual Physiological Human Share Follow Project Follow publicly Follow privately Unfollow See followers (3) List Map More info 488 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News VPHOP project will develop, validate and deploy the next generation of technology to predict the risk of fracture in patients with low bone mass, enabling clinicians to provide better prognoses and implement more effective treatment strategies. Nearly four million osteoporotic bone fractures cost the European health system more than 30 billion Euro per year. This figure could double by 2050. After the first fracture, the chances of having another one increase by 86%. We need to prevent osteoporotic fractures. The first step is an accurate prediction of the patient-specific risk of fracture that considers not only the skeletal determinants but also the neuromuscular condition. The aim of VPHOP is to develop a multiscale modelling technology based on conventional diagnostic imaging methods that makes it possible, in a clinical setting, to predict for each patient the strength of his/her bones, how this strength is likely to change over time, and the probability that the he/she will overload his/her bones during daily life. With these three predictions, the evaluation of the absolute risk of bone fracture will be much more accurate than any prediction based on external and indirect determinants, as it is current clinical practice. These predictions will be used to: i) improve the diagnostic accuracy of the current clinical standards; ii) to provide the basis for an evidence-based prognosis with respect to the natural evolution of the disease, to pharmacological treatments, and/or to preventive interventional treatments aimed to selectively strengthen particularly weak regions of the skeleton. For patients at high risk of fracture, and for which the pharmacological treatment appears insufficient, the VPHOP system will also assist the interventional radiologist in planning the augmentation procedure. The various modelling technologies developed during the project will be validated not only in vitro, on animal models, or against retrospective clinical outcomes, but will also be assessed in term of clinical impact and safety on small cohorts of patients enrolled at four different clinical institutions, providing the factual basis for effective clinical and industrial exploitations. 0 downloads 3 forum posts 3 followers Last updated May 6, 2015 Project Statistics Join Mailing Lists Suggest Idea Marco Viceconti Martina Contin Matteo Balestri Debora Testi Giordano Valente Saulo Martelli News NMSBuilder free seminar Apr 17, 2013 NMSBuilder is a user-friendly tool package for developing",
    "metadata": {
      "source": "https://simtk.org/projects/vphop",
      "title": "SimTK: The Osteoporotic Virtual Physiological Human: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "vphop"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9c82a5a8-29d3-49c1-80ce-9a98a9295eea",
    "document_id": "doc_71",
    "content": "modelling technologies developed during the project will be validated not only in vitro, on animal models, or against retrospective clinical outcomes, but will also be assessed in term of clinical impact and safety on small cohorts of patients enrolled at four different clinical institutions, providing the factual basis for effective clinical and industrial exploitations. 0 downloads 3 forum posts 3 followers Last updated May 6, 2015 Project Statistics Join Mailing Lists Suggest Idea Marco Viceconti Martina Contin Matteo Balestri Debora Testi Giordano Valente Saulo Martelli News NMSBuilder free seminar Apr 17, 2013 NMSBuilder is a user-friendly tool package for developing OpenSim musculoskeletal models from patient-specific biomedical data and for leveraging OpenSim to perform dynamic simulations of movement. NMSBuilder: musculo-skeletal modelling software beta version Apr 8, 2013 NMSBuilder is a user-friendly tool package for developing OpenSim musculoskeletal models from patient-specific biomedical data and for leveraging OpenSim to perform dynamic simulations of movement. Webinar on the NMSBuilder Software Nov 19, 2012 On Dec 4th, 2012 Giordano Valente, from the NMS Physiome team at the Istituto Ortopedico Rizzoli will describe and demo the NMSBuilder Software to generate subject-specific models for OpenSim. NMSBuilder alpha release available! Oct 11, 2012 NMSBuilder is a user-friendly tool package for developing OpenSim musculoskeletal models from patient-specific biomedical data and for leveraging OpenSim to perform dynamic simulations of movement. VPHOP Scientific Publications has reached 116! Apr 14, 2012 At the end of the 3rd Year of the project, the number of Scientific Publications published by the VPHOP Consortium is now more than 100. Empirica Webinar on Assessing Clinical and Economic Benefits Mar 31, 2012 In March, Empirica researchers Dr. Karl Stroetmann and Dr. Rainer Thiel presented a webinar on the validation of Virtual Physiological Human (VPH) simulation models and the assessment of their potential clinical and socio-economic impact on both society and individual stakeholders like clinicians. VPHOP hits 1 millions computation hours on PLX! Mar 22, 2012 In the last year, the VPHOP partners have performed a huge number of simulations on the PLX system hosted at CINECA. VPHOP at ORS 2012 and ECR 2012: great success! Mar 17, 2012 The last month was very busy for the VPHOP Consortium. The first version of the final Hypermodel run successfully Feb 9, 2012 The first version of the Hypermodel of the femoral region, originally due for PM38, but postponed to PM42, was successfully built integrating all five sub-models operating at different dimensional scales and successfully run on PLX platform. VPHOP: The 3rd Year Outcome Report by the EC Reviewers Jan 22, 2012 The outcome of the third review meeting held in Bologna on 16th-17th January has been presented in a consolidated review report received by the PMO at the beginning of February. VPHOP 3rd Review Meeting: green light from the EC reviewers Jan 18, 2012 The third Review Meeting was held in Bologna last 16th-17th of January in front of the EC project officer Joel Bacquet and four peer scientists EC reviewers. 3rd VPH study group on VPH Toolkit Dec",
    "metadata": {
      "source": "https://simtk.org/projects/vphop",
      "title": "SimTK: The Osteoporotic Virtual Physiological Human: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "vphop"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "acc63c4e-fa3d-456b-afe7-dca599b2ccb6",
    "document_id": "doc_71",
    "content": "different dimensional scales and successfully run on PLX platform. VPHOP: The 3rd Year Outcome Report by the EC Reviewers Jan 22, 2012 The outcome of the third review meeting held in Bologna on 16th-17th January has been presented in a consolidated review report received by the PMO at the beginning of February. VPHOP 3rd Review Meeting: green light from the EC reviewers Jan 18, 2012 The third Review Meeting was held in Bologna last 16th-17th of January in front of the EC project officer Joel Bacquet and four peer scientists EC reviewers. 3rd VPH study group on VPH Toolkit Dec 4, 2011 The third VPH NoE study group (SG3) will be held in Barcelona in May 2012. VPHOP abstract accepted for presentation at ECR2012 Imagine Nov 3, 2011 The abstract “Image-based, personalised and multiscale modelling to predict the risk of fracture in osteoporotic patients: the VPHOP integrated project” was one of the 18th selected (from a total of 85 submitted abstracts!) to participate to the “Novel technology that shapes Radiology: EIBIR presents IMAGINE” workshop which will be held during the ECR 2012 in Vienna. VPHOP 3rd Annual Consortium Meeting Oct 14, 2011 Thanks to the kind offer of Keita Ito, WP6 leader, the 3rd Annual Consortium Meeting will be hosted by the Technische Universiteit Eindhoven - TU/e. In Vitro Experiments completed at IOR for Augmentation Model Aug 30, 2011 Together with the University of Bern, in vitro experiments were completed at the Istituto Ortopedico Rizzoli to provide validation data for the interventional treatment planning modules. VPHOP towards end-user applications Jul 2, 2011 The PMO has recently submitted to the EC Project Officer a non-contractual document named \"D1.101 Use cases and architectural paradigm\". A new GPU powered system in CINECA (upgrade of PLX) Jun 22, 2011 CINECA and SCS are announcing a very important upgrade of PLX system which reaches now a peak performance near to 300 TFlops, making it the most powerful Supercomputer in Italy. Statistical modeling of human femurs successfully tested May 10, 2011 The development and validation of algorithms for statistical modeling of shape and mineral density (BMD) of human femurs have now been completed with good results! EOS imaging: the clinical study is ready to start Apr 30, 2011 On the 23rd of March in Paris it was held an important meeting for the VPHOP project which saw the partecipation of representatives of Arts Association (LBM), EOS imaging (BSP), Institut National de la Santé et de la Recherche Médicale (INS) and Istituto Ortopedico Rizzoli (IOR). Actibelt technology offers activity profile of patients Apr 15, 2011 Another deliverable of the VPHOP Project has been completed. Fast FE-solver for nonlinear analyses Mar 30, 2011 On the 21st of January 2011 the deliverable 6.2 of the VPHOP project has been completed. VPHOP: a summary of the activities of the second year Feb 11, 2011 At the end of the second year of its activities, the Osteoporotic Virtual Physiological Human –VPHOP- research project has made crucial steps upfront for the achievement",
    "metadata": {
      "source": "https://simtk.org/projects/vphop",
      "title": "SimTK: The Osteoporotic Virtual Physiological Human: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "vphop"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "eff2f769-f003-4c94-a0b0-aa4cd6d25f62",
    "document_id": "doc_71",
    "content": "imaging (BSP), Institut National de la Santé et de la Recherche Médicale (INS) and Istituto Ortopedico Rizzoli (IOR). Actibelt technology offers activity profile of patients Apr 15, 2011 Another deliverable of the VPHOP Project has been completed. Fast FE-solver for nonlinear analyses Mar 30, 2011 On the 21st of January 2011 the deliverable 6.2 of the VPHOP project has been completed. VPHOP: a summary of the activities of the second year Feb 11, 2011 At the end of the second year of its activities, the Osteoporotic Virtual Physiological Human –VPHOP- research project has made crucial steps upfront for the achievement of the project’s objectives. University of Geneve starts patients enrollment Nov 3, 2010 The University of Geneve, in collaboration with the NeuroZentrum Zurich, has recently started a VPHOP clinical pre-trial with 30 patients which serves to validate a set of software tools the University of Bern has developed. PhysiomeSpace: complete female 3D human skeleton model Jun 28, 2010 Super Computing Solutions –SCS- and the Computational Bioengineering Lab –BIC- by the Istituto Ortopedico Rizzoli are happy to announce the release of the first dataset that composes the Living Human Digital Library –LHDL- multiscale musculoskeletal data collection. PhysiomeSpace: share biomedical data in a free and easy way! Jun 28, 2010 B3C today announces the release of an interactive digital library service, called PhysiomeSpace, designed to manage and share a large collection of heterogeneous biomedical data, such as medical imaging, motion capture, biomedical instrumentation signals, finite element models, etc. VPHOP gets coverage on Biomedical Computation Review Jun 23, 2010 The summer issue of Biomedical Computation Review, a quarterly journal published by the national Center for Biomedical Computing at Stanford, covers the topic of physiome research. The European Virtual Physiological Human Institute Apr 27, 2010 To provide strong support for both the European Union Virtual Physiological Human (VPH) research initiative and the global “Physiome” community, the process to establish a European VPH Institute has now officially started. NMS Physiome started on January 2010 Mar 25, 2010 An international collaboration for musculoskeletal predictive medicine, called Neuro-Musculo-Skeletal Physiome or NMS Physiome for short, officially started on January 27th, 2010. See all News People also viewed OpenMM Zephyr SimTK Website Whole-Cell Computational Model of Mycoplasma... LAPACK linear algebra library (with BLAS) DireX - Conformational Sampling under Low... NAST (The Nucleic Acid Simulation Tool) Stiffness Modulation of Redundant... MemtestG80 and MemtestCL: Memory Testers for CUDA-... See all ForceBalance : Systematic Force Field Optimization Open Knee(s): Virtual Biomechanical... MSMBuilder Simulations of Crouch Gait Data-driven prediction of gait with ankle... Spasticity model in OpenSim ＯｐｅｎＳｉｍＣｏｌａｂ (OpenSim in Google Colab) SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0",
    "metadata": {
      "source": "https://simtk.org/projects/vphop",
      "title": "SimTK: The Osteoporotic Virtual Physiological Human: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "vphop"
      ],
      "content_type": "reference",
      "position": 3,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b8502ab8-83b0-4f73-82b5-64e7903e42a9",
    "document_id": "doc_71",
    "content": ": Systematic Force Field Optimization Open Knee(s): Virtual Biomechanical... MSMBuilder Simulations of Crouch Gait Data-driven prediction of gait with ankle... Spasticity model in OpenSim ＯｐｅｎＳｉｍＣｏｌａｂ (OpenSim in Google Colab) SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/vphop",
      "title": "SimTK: The Osteoporotic Virtual Physiological Human: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "vphop"
      ],
      "content_type": "reference",
      "position": 4,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9af2bb68-fe91-4468-8ae8-3adf495ded8f",
    "document_id": "doc_177",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/99549288/Performance",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "99549288",
        "Performance"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9e2f53e3-e0c2-4ac6-8c64-0f5bb879f041",
    "document_id": "doc_102",
    "content": "Neuromuscular Models for the Predictive Treatment of Parkinson's Disease Share Follow Project Follow publicly Follow privately Unfollow See followers (6) List Map More info 945 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow This project aims to model and simulate the function of the brain and of the neuromuscular system as a whole, in order to explore new treatments of Parkinson's Disease. Download Latest Releases Saccade Simulator: SaccadeSimulator.zip License: Saccade Simulator NoTremor aims to provide patient specific computational models of the coupled brain and neuromuscular systems that will be subsequently used to improve the quality of analysis, prediction and progression of Parkinson’s disease. In particular, it aspires to establish the neglected link between brain modelling and neuromuscular systems that will result in a holistic representation of the physiology for PD patients. 124 downloads 2 forum posts 6 followers Last updated Sep 4, 2017 Project Statistics Join Mailing Lists Suggest Idea Chris Papapavlou Dimitar Stanev Konstantinos Moustakas People also viewed Evaluation of In Vivo Knee Load Predictions Using... EMG-informed Computed Muscle Control for Dynamic... Are subject-specific musculoskeletal... Spasticity model in OpenSim MB Knee: Multibody Models of the Human Knee Simulations of Crouch Gait Below-Knee Amputee Model Stiff-knee walking simulations See all An OpenSim plugin to minimize joint reaction forces and... Efficient Methods for Multi-Domain Biomechanical... A Visualization Tool for OpenSim Functional Electrical Stimulation... Multidimensional Cubic B-Spline Model of the Scapulothoracic Joint Dynamic Musculoskeletal Model of the... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/notremor/",
      "title": "SimTK: Neuromuscular Models for the Predictive Treatment of Parkinson's Disease: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "notremor"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "726c4ea1-860d-4154-bdf3-8fbd3ecfc407",
    "document_id": "doc_188",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Protected Member Functions | Protected Attributes OpenSim::Actuator Class Reference abstract Base class for an actuator (e.g., a torque motor, muscle, ...) that requires a generic external input (a vector of controls) to generate force. More... Inheritance diagram for OpenSim::Actuator: OpenSim Properties, Sockets, Outputs, Inputs Outputs double power Provides the value of getPower() and is available at stage SimTK::Stage::Dynamics . More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Force bool appliesForce \"Flag indicating whether the force is applied or not. If true the force\" \"is applied to the MultibodySystem otherwise the force is not applied.\" \"NOTE: Prior to OpenSim 4.0, this behavior was controlled by the \" \"'isDisabled' property, where 'true' meant that force was not being \" \"applied. Thus, if 'isDisabled' is true, then 'appliesForce` is false.\" More... double potential_energy Provides the value of computePotentialEnergy() and is available at stage SimTK::Stage::Velocity . More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Component Component components \"List of components that this component owns and serializes.\" More... Public Member Functions Actuator () virtual int numControls () const =0 virtual const SimTK::Vector getDefaultControls () Actuator default controls are zero. More... virtual const SimTK::VectorView_< double > getControls (const SimTK::State &s) const virtual void getControls (const SimTK::Vector &modelControls, SimTK::Vector &actuatorControls) const Convenience methods for getting, setting and adding to actuator controls from/into the model controls. More... virtual void setControls (const SimTK::Vector &actuatorControls, SimTK::Vector &modelControls) const set actuator controls subvector into the right slot in the system-wide model controls More... virtual void addInControls (const SimTK::Vector &actuatorControls, SimTK::Vector &modelControls) const add actuator controls to the values already occupying the slot in the system-wide model controls More... virtual double getPower (const SimTK::State &s) const =0 virtual void computeEquilibrium (SimTK::State &s) const Public Member Functions inherited from OpenSim::Force virtual bool shouldBeParallelized () const Tell SimBody to parallelize this force. More... bool appliesForce (const SimTK::State &s) const Return if the Force is applied (or enabled) or not. More... void setAppliesForce (SimTK::State &s, bool applyForce) const Set whether or not the Force is applied. More... virtual OpenSim::Array < std::string > getRecordLabels () const Methods to query a Force for the value actually applied during simulation. More... virtual OpenSim::Array < double > getRecordValues (const SimTK::State &state) const Given SimTK::State object extract all the values necessary to report forces, application location frame, etc. More... virtual bool hasVisualPath () const Return a flag indicating whether the Force is applied along a path that can be visualized. More... const bool & get_appliesForce () const Get the value of the appliesForce property. More... bool & upd_appliesForce () Get a writable reference to the appliesForce property. More... void set_appliesForce (const bool &value) Set the value of the appliesForce property. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::ModelComponent ModelComponent () Default constructor. More... ModelComponent (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct ModelComponent from an XML file. More... ModelComponent (SimTK::Xml::Element &aNode)",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "002acfbe-4432-4791-bdf6-91436f43f6d6",
    "document_id": "doc_188",
    "content": "const Return a flag indicating whether the Force is applied along a path that can be visualized. More... const bool & get_appliesForce () const Get the value of the appliesForce property. More... bool & upd_appliesForce () Get a writable reference to the appliesForce property. More... void set_appliesForce (const bool &value) Set the value of the appliesForce property. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::ModelComponent ModelComponent () Default constructor. More... ModelComponent (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct ModelComponent from an XML file. More... ModelComponent (SimTK::Xml::Element &aNode) Construct ModelComponent from a specific node in an XML document. More... virtual ~ModelComponent () Destructor is virtual to allow concrete model component cleanup. More... void connectToModel ( Model &model) Connect this ModelComponent to its aggregate- a Model . More... const Model & getModel () const Get a const reference to the Model this component is part of. More... Model & updModel () Get a modifiable reference to the Model this component is part of. More... bool hasModel () const Does this ModelComponent have a Model associated with it? More... void preScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... void scale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... void postScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::Component Component () Default constructor. More... Component (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct Component from an XML file. More... Component (SimTK::Xml::Element &aNode) Construct Component from a specific node in an XML document. More... Component (const Component &)=default Use default copy constructor and assignment operator. More... Component & operator= (const Component &)=default virtual ~Component ()=default Destructor is virtual to allow concrete Component to cleanup. More... virtual void generateDecorations (bool fixed, const ModelDisplayHints &hints, const SimTK::State &state, SimTK::Array_< SimTK::DecorativeGeometry > &appendToThis) const Optional method for generating arbitrary display geometry that reflects this Component at the specified state . More... const SimTK::MultibodySystem & getSystem () const Get the underlying MultibodySystem that this component is connected to. More... bool hasSystem () const Check if this component has an underlying MultibodySystem. More... bool isComponentInOwnershipTree (const Component *component) const Does the provided component already exist anywhere in the ownership tree (not just subcomponents of this component)? More... void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9effbcfc-8746-4bb1-85f3-a2376b6f3d36",
    "document_id": "doc_188",
    "content": "MultibodySystem. More... bool isComponentInOwnershipTree (const Component *component) const Does the provided component already exist anywhere in the ownership tree (not just subcomponents of this component)? More... void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const Uses getComponentList<T>() to count the number of underlying subcomponents of the specified type. More... std::string getAbsolutePathString () const Get the complete (absolute) pathname for this Component to its ancestral Component , which is the root of the tree to which this Component belongs. More... ComponentPath getAbsolutePath () const Return a ComponentPath of the absolute path of this Component . More... std::string getRelativePathString (const Component &wrt) const Get the relative path of this Component with respect to another Component , as a string. More... ComponentPath getRelativePath (const Component &wrt) const Get the relative path of this Component with respect to another Component . More... bool hasComponent (const std::string &pathname) const Query if there is a component (of any type) at the specified path name. More... template<class C = Component> bool hasComponent (const std::string &pathname) const Query if there is a component of a given type at the specified path name. More... template<class C = Component> const C & getComponent (const std::string &pathname) const Get a unique subcomponent of this Component by its path name and type 'C'. More... template<class C = Component> const C & getComponent (const ComponentPath &pathname) const const Component & getComponent (const std::string &pathname) const Similar to the templatized getComponent() , except this returns the component as the generic Component type. More... template<class C = Component> C & updComponent (const std::string &name) Get a writable reference to a subcomponent. More... template<class C = Component> C & updComponent (const ComponentPath &name) Component & updComponent (const std::string &pathname) Similar to the templatized updComponent() , except this returns the component as the generic Component type. More... unsigned printComponentsMatching (const std::string &substring) const Print a list to the console of all components whose absolute path name contains the given string. More... int getNumStateVariables () const Get the number of \"continuous\" state variables maintained by the Component and its subcomponents. More... Array < std::string > getStateVariableNames () const Get the names of \"continuous\" state variables maintained by the Component and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name)",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "10ac6af6-1f87-45af-8874-e448d39baea3",
    "document_id": "doc_188",
    "content": "maintained by the Component and its subcomponents. More... Array < std::string > getStateVariableNames () const Get the names of \"continuous\" state variables maintained by the Component and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name) as input. More... const StateVariable * traverseToStateVariable (const std::string &pathName) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... const StateVariable * traverseToStateVariable (const ComponentPath &path) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... void finalizeFromProperties () Define a Component 's internal data members and structure according to its properties. More... void finalizeConnections ( Component &root) Satisfy the Component 's connections specified by its Sockets and Inputs. More... void clearConnections () Disconnect/clear this Component from its aggregate component. More... void addToSystem (SimTK::MultibodySystem &system) const Have the Component add itself to the underlying computational System. More... void initStateFromProperties (SimTK::State &state) const Initialize Component 's state variable values from its properties. More... void setPropertiesFromState (const SimTK::State &state) Set Component 's properties given a state. More... int getNumSockets () const Get the number of Sockets in this Component . More... std::vector< std::string > getSocketNames () const Collect and return the names of the sockets in this component. More... template<typename T > const T & getConnectee (const std::string &name) const Get the \"connectee\" object that the Component 's Socket is bound to. More... const Object & getConnectee (const std::string &name) const Get the connectee as an Object . More... const AbstractSocket & getSocket (const std::string &name) const Get an AbstractSocket for the given socket name. More... AbstractSocket & updSocket (const std::string &name) Get a writable reference to the AbstractSocket for the given socket name. More... template<typename T > const Socket < T > & getSocket (const std::string &name) const Get a const reference to the concrete Socket provided by this Component by name. More... template<typename T > Socket < T > & updSocket (const std::string &name) Get a writable reference to the concrete Socket provided by this Component by name. More... void printSubcomponentInfo () const List all subcomponents by name and recurse into these components to list their subcomponents, and so on. More... void printSocketInfo () const List all the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs ()",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e0e1c98d-cbc6-4fac-9c1c-07b0b2428a3d",
    "document_id": "doc_188",
    "content": "() const List all subcomponents by name and recurse into these components to list their subcomponents, and so on. More... void printSocketInfo () const List all the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs () const Access the number of Outputs that this component has. More... std::vector< std::string > getInputNames () const Collect and return the names of Inputs in this component as an std::vector. More... std::vector< std::string > getOutputNames () const Collect and return the names of Outputs in this component as an std::vector. More... const AbstractInput & getInput (const std::string &name) const Get an Input provided by this Component by name. More... AbstractInput & updInput (const std::string &name) Get a writable reference to an Input provided by this Component by name. More... template<typename T > const Input < T > & getInput (const std::string &name) const Get a concrete Input that you can directly ask for its values. More... const AbstractOutput & getOutput (const std::string &name) const Get the Output provided by this Component by name. More... AbstractOutput & updOutput (const std::string &name) Get a writable reference to an Output provided by this Component by name. More... SimTK::IteratorRange< OutputConstIterator > getOutputs () const Iterate through all Outputs of this component. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... int getModelingOption (const SimTK::State &state, const std::string &name) const Get a ModelingOption flag for this Component by name. More... void setModelingOption (SimTK::State &state, const std::string &name, int flag) const Set the value of a ModelingOption flag for this Component . More... template<typename T > const T & getInputValue (const SimTK::State &state, const std::string &name) const Get the Input value that this component is dependent on. More... template<typename T > const T & getOutputValue (const SimTK::State &state, const std::string &name) const Get the Output value provided by this Component by name. More... double getStateVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable allocated by this Component . More... double getStateVariableValue (const SimTK::State &state, const ComponentPath &path) const Get the value of a state variable allocated by this Component . More... void setStateVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9aba4446-470f-47eb-88a6-590b38851c66",
    "document_id": "doc_188",
    "content": "&state, const ComponentPath &path) const Get the value of a state variable allocated by this Component . More... void setStateVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed by this Component . More... double getDiscreteVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a discrete variable allocated by this Component by name. More... void setDiscreteVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a discrete variable allocated by this Component by name. More... template<class T > SimTK::CacheEntryIndex getCacheVariableIndex (const CacheVariable < T > &cv) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... SimTK::CacheEntryIndex getCacheVariableIndex (const std::string &name) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a cache variable allocated by this Component by name. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Get the value of a cache variable allocated by this Component . More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const std::string &k, T value) const Set the value of a cache variable, identified by name , to a new value and mark the cache variable as valid. More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv, T value) const Set the value of a cache variable to a new value and mark the cache variable as valid. More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const std::string &name) const Returns a mutable reference to the value of a cache variable identified by name . More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Returns a mutable reference to the value of a cache variable. More... bool isCacheVariableValid (const SimTK::State &state, const std::string &name) const Returns true if the cache variable, identified by name , is valid. More... template<class T > bool isCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Returns true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "712cc8a8-6f14-4dde-bf15-63d303e40c19",
    "document_id": "doc_188",
    "content": "the cache variable, identified by name , is valid. More... template<class T > bool isCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Returns true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as invalid. More... template<class T > void markCacheVariableInvalid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as invalid. More... const Component & getOwner () const Access the owner of this Component . More... bool hasOwner () const (For advanced users) Check if this Component has an owner. More... const Component & getRoot () const Obtain the root Component, which is this component if it is orphaned. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "66b70b38-94ff-465e-8945-88d525ab5a85",
    "document_id": "doc_188",
    "content": "number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string &",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "aff6c211-a1d9-4bc6-8529-4cdbff39f404",
    "document_id": "doc_188",
    "content": "int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef Actuator Self This typedef might be useful within the member functions of this class. More... typedef Force Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Force typedef Force Self This typedef might be useful within the member functions of this class. More... typedef ModelComponent Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::ModelComponent typedef ModelComponent Self This typedef might be useful within the member functions of this class. More... typedef Component Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Component typedef Component Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... typedef std::map< std::string, SimTK::ClonePtr< AbstractOutput > >::const_iterator OutputConstIterator Define OutputConstIterator for convenience. More... Protected Member Functions void extendAddToSystem (SimTK::MultibodySystem &system) const override Add appropriate Simbody elements (if needed) to the System corresponding to this component and specify needed state resources. More... Protected Member Functions inherited from OpenSim::Force Force () Default constructor sets up Force-level properties; can only be called from a derived class constructor. More... Force (SimTK::Xml::Element &node) Deserialization from XML, necessary so that derived classes can (de)serialize. More... void extendInitStateFromProperties (SimTK::State &state) const override Subclass should override; be sure to invoke Super::extendInitStateFromProperties() at the beginning of the overriding method. More... void extendAddToSystem (SimTK::MultibodySystem &system) const override Default is to create a ForceAdapter which is a SimTK::Force::Custom as the underlying computational component. More... void extendSetPropertiesFromState (const SimTK::State &state) override Subclass should override; be sure to invoke Force::extendSetPropertiesFromState() at the beginning of the overriding method. More... virtual void computeForce (const SimTK::State &state, SimTK::Vector_< SimTK::SpatialVec > &bodyForces, SimTK::Vector &generalizedForces) const Subclasses must implement this method to compute the forces that should be applied to bodies and generalized speeds. More... virtual double computePotentialEnergy (const SimTK::State &state) const Subclasses may optionally override this method to compute a contribution to the potential energy of the system. More... void applyForceToPoint (const SimTK::State &state, const PhysicalFrame &body, const SimTK::Vec3 &point, const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "69859b8f-5766-49c1-aef6-02c1fa4d0b2f",
    "document_id": "doc_188",
    "content": "is a SimTK::Force::Custom as the underlying computational component. More... void extendSetPropertiesFromState (const SimTK::State &state) override Subclass should override; be sure to invoke Force::extendSetPropertiesFromState() at the beginning of the overriding method. More... virtual void computeForce (const SimTK::State &state, SimTK::Vector_< SimTK::SpatialVec > &bodyForces, SimTK::Vector &generalizedForces) const Subclasses must implement this method to compute the forces that should be applied to bodies and generalized speeds. More... virtual double computePotentialEnergy (const SimTK::State &state) const Subclasses may optionally override this method to compute a contribution to the potential energy of the system. More... void applyForceToPoint (const SimTK::State &state, const PhysicalFrame &body, const SimTK::Vec3 &point, const SimTK::Vec3 &force, SimTK::Vector_< SimTK::SpatialVec > &bodyForces) const Apply a force at a particular point (a \"station\") on a given body. More... void applyTorque (const SimTK::State &state, const PhysicalFrame &body, const SimTK::Vec3 &torque, SimTK::Vector_< SimTK::SpatialVec > &bodyForces) const Apply a torque to a particular body. More... void applyGeneralizedForce (const SimTK::State &state, const Coordinate &coord, double force, SimTK::Vector &generalizedForces) const Apply a generalized force. More... void updateFromXMLNode (SimTK::Xml::Element &node, int versionNumber) override Handle a change in XML syntax for Sockets. More... Protected Member Functions inherited from OpenSim::ModelComponent const SimTK::Vec3 & getScaleFactors (const ScaleSet &scaleSet, const Frame &frame) const Get the scale factors corresponding to the base OpenSim::Body of the specified Frame . More... virtual void extendPreScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... virtual void extendScale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... virtual void extendPostScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void updateFromXMLNode (SimTK::Xml::Element &aNode, int versionNumber) override Handle a change in XML syntax for Sockets. More... void extendFinalizeFromProperties () override Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. More... virtual void extendConnectToModel ( Model &model) Perform any necessary initializations required to connect the component into the Model , and check for error conditions. More... Protected Member Functions inherited from OpenSim::Component SimTK_DEFINE_UNIQUE_INDEX_TYPE ( MemberSubcomponentIndex ) template<class C = Component> MemberSubcomponentIndex constructSubcomponent (const std::string &name) Construct a subcomponent as a data member of this Component . More... template<class C = Component> const C & getMemberSubcomponent ( MemberSubcomponentIndex ix) const template<class C = Component> C & updMemberSubcomponent ( MemberSubcomponentIndex ix) void adoptSubcomponent ( Component *subcomponent) Adopt a component as a subcomponent of this Component . More... size_t getNumImmediateSubcomponents () const Get the number of Subcomponents immediately owned by this Component . More... size_t getNumMemberSubcomponents () const Get the number of Subcomponents that are data members of this Component . More... size_t getNumPropertySubcomponents () const Get the number of Subcomponents that are properties of this Component . More... size_t getNumAdoptedSubcomponents () const Get the number of Subcomponents adopted by this Component . More... std::vector< SimTK::ReferencePtr< const Component > > getImmediateSubcomponents () const Access this Component 's immediate subcomponents",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f7dcb9a4-9c3f-4462-8c37-053c3e83c2de",
    "document_id": "doc_188",
    "content": "( MemberSubcomponentIndex ix) void adoptSubcomponent ( Component *subcomponent) Adopt a component as a subcomponent of this Component . More... size_t getNumImmediateSubcomponents () const Get the number of Subcomponents immediately owned by this Component . More... size_t getNumMemberSubcomponents () const Get the number of Subcomponents that are data members of this Component . More... size_t getNumPropertySubcomponents () const Get the number of Subcomponents that are properties of this Component . More... size_t getNumAdoptedSubcomponents () const Get the number of Subcomponents adopted by this Component . More... std::vector< SimTK::ReferencePtr< const Component > > getImmediateSubcomponents () const Access this Component 's immediate subcomponents (not those owned by subcomponents) More... template<class C > const C * traversePathToComponent ( ComponentPath path) const void setNextSubcomponentInSystem (const Component &sub) const Helper method to enable Component makers to specify the order of their subcomponents to be added to the System during addToSystem() . More... void resetSubcomponentOrder () resetSubcomponentOrder clears this Component 's list of ordered subcomponents (but otherwise leaves subcomponents untouched). More... const Component & get_components (int i) const Get the value of the i-th element of the components property. More... Component & upd_components (int i) Get a writable reference to the i-th element of the components property. More... void set_components (int i, const Component &value) Set the value of the i-th element of components property. More... int append_components (const Component &value) Append an element to the components property. More... virtual void extendAddComponent ( Component *subcomponent) Perform any secondary operations, e.g. More... void initComponentTreeTraversal (const Component &root) const Build the tree of Components from this component through its descendants. More... virtual void extendAddToSystemAfterSubcomponents (SimTK::MultibodySystem &system) const Add appropriate Simbody elements (if needed) to the System after your component's subcomponents have had a chance to add themselves to the system. More... virtual void computeStateVariableDerivatives (const SimTK::State &s) const If a model component has allocated any continuous state variables using the addStateVariable() method, then computeStateVariableDerivatives() must be implemented to provide time derivatives for those states. More... void setStateVariableDerivativeValue (const SimTK::State &state, const std::string &name, double deriv) const Set the derivative of a state variable by name when computed inside of this Component 's computeStateVariableDerivatives() method. More... virtual void extendRealizeTopology (SimTK::State &state) const Obtain state resources that are needed unconditionally, and perform computations that depend only on the system topology. More... virtual void extendRealizeModel (SimTK::State &state) const Obtain and name state resources (like state variables allocated by an underlying Simbody component) that may be needed, depending on modeling options. More... virtual void extendRealizeInstance (const SimTK::State &state) const Perform computations that depend only on instance variables, like lengths and masses. More... virtual void extendRealizeTime (const SimTK::State &state) const Perform computations that depend only on time and earlier stages. More... virtual void extendRealizePosition (const SimTK::State &state) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). More... virtual void extendRealizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... virtual",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 10,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "aacfca37-24d4-4060-aeb8-c50b6e541735",
    "document_id": "doc_188",
    "content": "that may be needed, depending on modeling options. More... virtual void extendRealizeInstance (const SimTK::State &state) const Perform computations that depend only on instance variables, like lengths and masses. More... virtual void extendRealizeTime (const SimTK::State &state) const Perform computations that depend only on time and earlier stages. More... virtual void extendRealizePosition (const SimTK::State &state) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). More... virtual void extendRealizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... virtual void extendRealizeDynamics (const SimTK::State &state) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. More... virtual void extendRealizeAcceleration (const SimTK::State &state) const Perform computations that may depend on applied forces. More... virtual void extendRealizeReport (const SimTK::State &state) const Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. More... void addModelingOption (const std::string &optionName, int maxFlagValue) const Add a modeling option (integer flag stored in the State) for use by this Component . More... void addStateVariable (const std::string &stateVariableName, const SimTK::Stage &invalidatesStage=SimTK::Stage::Dynamics, bool isHidden=false) const Add a continuous system state variable belonging to this Component , and assign a name by which to refer to it. More... void addStateVariable ( Component::StateVariable *stateVariable) const The above method provides a convenient interface to this method, which automatically creates an 'AddedStateVariable' and allocates resources in the SimTK::State for this variable. More... void addDiscreteVariable (const std::string &discreteVariableName, SimTK::Stage invalidatesStage) const Add a system discrete variable belonging to this Component , give it a name by which it can be referenced, and declare the lowest Stage that should be invalidated if this variable's value is changed. More... SimTK::MultibodySystem & updSystem () const Get writable reference to the MultibodySystem that this component is connected to. More... int getStateIndex (const std::string &name) const Get the index of a Component 's continuous state variable in the Subsystem for allocations. More... SimTK::SystemYIndex getStateVariableSystemIndex (const std::string &stateVariableName) const Get the System Index of a state variable allocated by this Component . More... const SimTK::DiscreteVariableIndex getDiscreteVariableIndex (const std::string &name) const Get the index of a Component 's discrete variable in the Subsystem for allocations. More... template<typename T > PropertyIndex constructSocket (const std::string &name, const std::string &propertyComment) Construct a specialized Socket for this Component 's dependence on another Component . More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output for a member function of the same component. More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, const T &(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) This variant handles component member functions that return the output value by const reference (const T&). More... template<typename T , typename CompType",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 11,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ddd04bc5-b360-4cb4-b232-9c277aa66c0b",
    "document_id": "doc_188",
    "content": "T > PropertyIndex constructSocket (const std::string &name, const std::string &propertyComment) Construct a specialized Socket for this Component 's dependence on another Component . More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output for a member function of the same component. More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, const T &(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) This variant handles component member functions that return the output value by const reference (const T&). More... template<typename T , typename CompType > bool constructListOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &, const std::string &channel) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output that can have multiple channels. More... bool constructOutputForStateVariable (const std::string &name) Construct an Output for a StateVariable . More... template<typename T > PropertyIndex constructInput (const std::string &name, bool isList, const std::string &propertyComment, const SimTK::Stage &requiredAtStage=SimTK::Stage::Instance) Construct an Input (socket) for this Component 's dependence on an Output signal. More... template<class T > CacheVariable < T > addCacheVariable (std::string name, T variablePrototype, SimTK::Stage dependsOnStage) const Add a state cache entry belonging to this Component to hold calculated values that must be automatically invalidated when certain state values change. More... void setOwner (const Component &owner) Set this Component's reference to its owning Component More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 12,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4a2f4af9-fa5f-4f52-8403-72485fa5bc88",
    "document_id": "doc_188",
    "content": "a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Protected Attributes int _controlIndex Protected Attributes inherited from OpenSim::Force SimTK::ResetOnCopy< SimTK::ForceIndex > _index ID for the force in Simbody. More... Protected Attributes inherited from OpenSim::ModelComponent SimTK::ReferencePtr< Model > _model The model this component belongs to. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Auto-generated functions static Actuator * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Actuator\". More... void assign ( Object &aObject) override This allows copy assignment in",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 13,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f0fabf74-3f70-4b67-adb8-15335fe33fd7",
    "document_id": "doc_188",
    "content": "object. More... Protected Attributes int _controlIndex Protected Attributes inherited from OpenSim::Force SimTK::ResetOnCopy< SimTK::ForceIndex > _index ID for the force in Simbody. More... Protected Attributes inherited from OpenSim::ModelComponent SimTK::ReferencePtr< Model > _model The model this component belongs to. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Auto-generated functions static Actuator * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Actuator\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Actuator * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::Force static Force * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Force\". More... Static Public Member Functions inherited from OpenSim::ModelComponent static ModelComponent * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"ModelComponent\". More... Static Public Member Functions inherited from OpenSim::Component static Component * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Component\". More... Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 14,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6de31134-e63a-4f56-86a3-e0a0977fc552",
    "document_id": "doc_188",
    "content": "type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Static Protected Member Functions inherited from OpenSim::Component static void prependComponentPathToConnecteePath ( Component &subcomponent) For internal use. More... Static Protected Attributes inherited from OpenSim::ModelComponent static const SimTK::Vec3 InvalidScaleFactors Returned by getScaleFactors() if the ScaleSet does not contain scale factors for the base Body associated with the specified Frame . More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 15,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b46dddf6-a9c6-469f-86c1-04371b64ecbd",
    "document_id": "doc_188",
    "content": "the ScaleSet does not contain scale factors for the base Body associated with the specified Frame . More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description Base class for an actuator (e.g., a torque motor, muscle, ...) that requires a generic external input (a vector of controls) to generate force. This class therefore covers scalarActautor as a special case with scalar control value. Author Ajay Seth Member Typedef Documentation ◆ Self typedef Actuator OpenSim::Actuator::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Force OpenSim::Actuator::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ Actuator() OpenSim::Actuator::Actuator ( ) Member Function Documentation ◆ addInControls() virtual void OpenSim::Actuator::addInControls ( const SimTK::Vector & actuatorControls , SimTK::Vector & modelControls ) const virtual add actuator controls to the values already occupying the slot in the system-wide model controls ◆ assign() void OpenSim::Actuator::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Actuator . ◆ clone() Actuator * OpenSim::Actuator::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Force . Implemented in OpenSim::Millard2012AccelerationMuscle , OpenSim::Millard2012EquilibriumMuscle , OpenSim::ScalarActuator , OpenSim::Thelen2003Muscle , OpenSim::DeGrooteFregly2016Muscle , OpenSim::Muscle , OpenSim::ClutchedPathSpring , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::ActivationFiberLengthMuscle , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::TorqueActuator , OpenSim::BodyActuator , OpenSim::PointActuator , OpenSim::Thelen2003Muscle_Deprecated , OpenSim::PointToPointActuator , OpenSim::ActivationCoordinateActuator , OpenSim::CoordinateActuator , OpenSim::McKibbenActuator , and OpenSim::PathActuator . ◆ computeEquilibrium() virtual void OpenSim::Actuator::computeEquilibrium ( SimTK::State & s ) const inline virtual Reimplemented in OpenSim::Muscle . ◆ extendAddToSystem() void OpenSim::Actuator::extendAddToSystem ( SimTK::MultibodySystem & system ) const override protected virtual Add appropriate Simbody elements (if",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 16,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6f7d4b09-881d-4284-acce-3edd94ddcf8c",
    "document_id": "doc_188",
    "content": "overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Force . Implemented in OpenSim::Millard2012AccelerationMuscle , OpenSim::Millard2012EquilibriumMuscle , OpenSim::ScalarActuator , OpenSim::Thelen2003Muscle , OpenSim::DeGrooteFregly2016Muscle , OpenSim::Muscle , OpenSim::ClutchedPathSpring , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::ActivationFiberLengthMuscle , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::TorqueActuator , OpenSim::BodyActuator , OpenSim::PointActuator , OpenSim::Thelen2003Muscle_Deprecated , OpenSim::PointToPointActuator , OpenSim::ActivationCoordinateActuator , OpenSim::CoordinateActuator , OpenSim::McKibbenActuator , and OpenSim::PathActuator . ◆ computeEquilibrium() virtual void OpenSim::Actuator::computeEquilibrium ( SimTK::State & s ) const inline virtual Reimplemented in OpenSim::Muscle . ◆ extendAddToSystem() void OpenSim::Actuator::extendAddToSystem ( SimTK::MultibodySystem & system ) const override protected virtual Add appropriate Simbody elements (if needed) to the System corresponding to this component and specify needed state resources. extendAddToSystem() is called when the Simbody System is being created to represent a completed system (model) for computation. That is, connect() will already have been invoked on all components before any addToSystem() call is made. Helper methods for adding modeling options, state variables and their derivatives, discrete variables, and cache entries are available and can be called within extendAddToSystem() only. Note that this method is const; you may not modify your model component or the containing model during this call. Any modifications you need should instead be performed in finalizeFromProperties() or at the latest connect(), which are non-const. The only exception is that you may need to record access information for resources you create in the system , such as an index number. For most Components, OpenSim base classes either provide convenience methods or handle indices automatically. Otherwise, you must declare indices as mutable data members so that you can set them here. If you override this method, be sure to invoke the base class method at the beginning, using code like this: void MyComponent::extendAddToSystem(SimTK::MultibodySystem& system) const { // Perform any additions to the system required by your Super Super::extendAddToSystem (system); // ... your code goes here } This method assumes that this Component 's addToSystem will be invoked before its subcomponents. If you need your subcomponents to be added to the system, first (e.g. require of a Force to be anchored to a SimTK::MobilizedBody specified by subcomponents) then you must implement: extendAddToSystemAfterSubcomponents() . It is possible to implement both method to add system elements before and then after your subcomponents have added themselves. Caution is required that Simbody elements are not added twice especially when order is unimportant. Parameters [in,out] system The MultibodySystem being added to. See also addModelingOption() , addStateVariable() , addDiscreteVariables(), addCacheVariable() Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Muscle , and OpenSim::ScalarActuator . ◆ getClassName() static const std::string& OpenSim::Actuator::getClassName ( ) inline static This returns \"Actuator\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::Actuator::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 17,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9113890a-9d41-4421-8368-ee07ce56fb24",
    "document_id": "doc_188",
    "content": "See also addModelingOption() , addStateVariable() , addDiscreteVariables(), addCacheVariable() Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Muscle , and OpenSim::ScalarActuator . ◆ getClassName() static const std::string& OpenSim::Actuator::getClassName ( ) inline static This returns \"Actuator\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::Actuator::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::Force . Implemented in OpenSim::Millard2012AccelerationMuscle , OpenSim::Millard2012EquilibriumMuscle , OpenSim::ScalarActuator , OpenSim::Thelen2003Muscle , OpenSim::DeGrooteFregly2016Muscle , OpenSim::Muscle , OpenSim::ClutchedPathSpring , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::ActivationFiberLengthMuscle , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::TorqueActuator , OpenSim::BodyActuator , OpenSim::PointActuator , OpenSim::Thelen2003Muscle_Deprecated , OpenSim::PointToPointActuator , OpenSim::ActivationCoordinateActuator , OpenSim::CoordinateActuator , OpenSim::McKibbenActuator , and OpenSim::PathActuator . ◆ getControls() [1/2] virtual const SimTK::VectorView_<double> OpenSim::Actuator::getControls ( const SimTK::State & s ) const virtual ◆ getControls() [2/2] virtual void OpenSim::Actuator::getControls ( const SimTK::Vector & modelControls , SimTK::Vector & actuatorControls ) const virtual Convenience methods for getting, setting and adding to actuator controls from/into the model controls. These methods have no effect on the realization stage. ◆ getDefaultControls() virtual const SimTK::Vector OpenSim::Actuator::getDefaultControls ( ) inline virtual Actuator default controls are zero. ◆ getPower() virtual double OpenSim::Actuator::getPower ( const SimTK::State & s ) const pure virtual Implemented in OpenSim::ScalarActuator , and OpenSim::PathActuator . ◆ numControls() virtual int OpenSim::Actuator::numControls ( ) const pure virtual Implemented in OpenSim::ScalarActuator . ◆ safeDownCast() static Actuator * OpenSim::Actuator::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Actuator.safeDownCast(obj) . This is equivalent to dynamic_cast<Actuator*>(obj) in C++. ◆ setControls() virtual void OpenSim::Actuator::setControls ( const SimTK::Vector & actuatorControls , SimTK::Vector & modelControls ) const virtual set actuator controls subvector into the right slot in the system-wide model controls Member Data Documentation ◆ _controlIndex int OpenSim::Actuator::_controlIndex protected OpenSim Property, Socket, Output, Input Documentation ◆ power double OpenSim::Actuator::power Provides the value of getPower() and is available at stage SimTK::Stage::Dynamics . This output was generated with the OpenSim_DECLARE_OUTPUT macro. The documentation for this class was generated from the following file: OpenSim/Simulation/Model/Actuator.h OpenSim Actuator Generated on Thu Mar 21 2024 15:02:49 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 18,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "907eb7e8-a158-4993-a542-0c5f3b254556",
    "document_id": "doc_188",
    "content": "this class was generated from the following file: OpenSim/Simulation/Model/Actuator.h OpenSim Actuator Generated on Thu Mar 21 2024 15:02:49 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Actuator.html",
      "title": "API: OpenSim::Actuator Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Actuator.html"
      ],
      "content_type": "api",
      "position": 19,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "29d3b500-d811-44dd-a33d-3d637e09f24c",
    "document_id": "doc_2",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/display/OpenSim/Tutorials",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "OpenSim",
        "Tutorials"
      ],
      "content_type": "tutorial",
      "position": 0,
      "tags": [
        "tutorial",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1aa28b94-d7db-4c7c-9ac9-13432314fa7f",
    "document_id": "doc_174",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/99352581/Rehabilitation",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "99352581",
        "Rehabilitation"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6c3ddd37-8fa7-4df8-b8a0-979d1f3d7698",
    "document_id": "doc_103",
    "content": "SimTK Our Pledge and Your Responsibility Our pledge When you visit or use Simtk.org, you maintain control over your personal data. When you set up an account, we do not use the information you provide for purposes other than sending you communication. We do not share this information with outside parties. We will use only non-identifying and aggregate information to better design our Web site and to gather internal usage statistics. For example, we may disclose the number of people that visited a site or downloaded information from a certain area on our Web site, but we do not use any of the information to track the usage pattern of a specific user without permission. Your responsibility Any contribution to Simtk.org must be appropriate for sharing with our user community. In particular, if your contribution includes any patient data, all such data must de-identified in accordance with U.S. confidentiality and security laws and requirements, and your disclosure of such data must be properly authorized and in compliance with all applicable laws and regulations. SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/pledge.php",
      "title": "SimTK",
      "section": "",
      "hierarchy": [
        "pledge.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "edc961ab-8cd9-4018-9e06-a8b63a20c22b",
    "document_id": "doc_136",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089591/Induced+Acceleration+Analysis",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089591",
        "Induced+Acceleration+Analysis"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "070f3194-791d-4705-8f90-5730aedd5423",
    "document_id": "doc_140",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089440/Command+Line+Utilities",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089440",
        "Command+Line+Utilities"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c22621d3-bf0d-4043-8f3f-54ebf9df40bb",
    "document_id": "doc_143",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089275/Developer+Pages",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089275",
        "Developer+Pages"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6d7b7698-60de-4778-93f6-2a710f23a17b",
    "document_id": "doc_77",
    "content": "Sam's Simulations Share Follow Project Follow publicly Follow privately Unfollow See followers (4) List Map More info 252 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Develop a muscle-actuated simulation of human running. This project is intended to serve as a repository for software developed for physics-based simulation of human motion, as part of the work in the Neuromuscular Biomechanics Lab. 39 downloads 3 forum posts 4 followers Last updated Nov 3, 2010 Project Statistics Join Mailing Lists Suggest Idea Sam Hamner People also viewed Muscle contributions to mass center... OpenSim Analysis of arm swing during human walking EMG-informed Computed Muscle Control for Dynamic... Dynamic Simulation of Movement Based on OpenSim and... Hamstring Function During Running Examining Muscle Forces during Sit to Stand Transfer... Chand's Simulations See all How much muscle strength is required to walk in... Upper and Lower Body Model Multiple Speed Walking Simulations Dynamic Arm Simulator A Visualization Tool for OpenSim Simulated Assistive Devices for Loaded Walking Platform for Dynamic Simulation and Control of... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/samsim",
      "title": "SimTK: Sam's Simulations: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "samsim"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "abe9ff6b-4b33-47fe-9423-caf9d99dabab",
    "document_id": "doc_82",
    "content": "Chand's Simulations Share Follow Project Follow publicly Follow privately Unfollow See followers (1) List Map More info 55 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Contains simulation code and supplemental files. Download Latest Releases BioE215 Include/Libraries: BioE215_SimTK_IncludeAndLibs.zip This project is intended to serve as a repository for software I develop for physics-based simulation of human motion, as part of the work in the Neuromuscular Biomechanics Lab. 109 downloads 3 forum posts 1 followers Last updated Aug 27, 2014 Project Statistics Join Mailing Lists Suggest Idea Chand John People also viewed Multiple Speed Walking Simulations Efficient Methods for Multi-Domain Biomechanical... Muscle contributions to mass center... Platform for Dynamic Simulation and Control of... Neuromusculoskeletal Modeling (NMSM) Pipeline Simbody: Multibody Physics API How much muscle strength is required to walk in... MB Knee: Multibody Models of the Human Knee See all EMG-informed Computed Muscle Control for Dynamic... Stiff-knee walking simulations Dynamic Arm Simulator Analysis of arm swing during human walking Laplacian field mapping of skeletal muscle fibers. Sam's Simulations How Robust is Human Gait to Calf Muscle Shortening? SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/cimtj/",
      "title": "SimTK: Chand's Simulations: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "cimtj"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "93d5bc1a-ba4f-4153-9af6-551464b355a8",
    "document_id": "doc_81",
    "content": "Chand's Simulations Share Follow Project Follow publicly Follow privately Unfollow See followers (1) List Map More info 55 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Contains simulation code and supplemental files. Download Latest Releases BioE215 Include/Libraries: BioE215_SimTK_IncludeAndLibs.zip This project is intended to serve as a repository for software I develop for physics-based simulation of human motion, as part of the work in the Neuromuscular Biomechanics Lab. 109 downloads 3 forum posts 1 followers Last updated Aug 27, 2014 Project Statistics Join Mailing Lists Suggest Idea Chand John People also viewed Multiple Speed Walking Simulations Efficient Methods for Multi-Domain Biomechanical... Muscle contributions to mass center... Platform for Dynamic Simulation and Control of... Neuromusculoskeletal Modeling (NMSM) Pipeline Simbody: Multibody Physics API How much muscle strength is required to walk in... MB Knee: Multibody Models of the Human Knee See all EMG-informed Computed Muscle Control for Dynamic... Stiff-knee walking simulations Dynamic Arm Simulator Analysis of arm swing during human walking Laplacian field mapping of skeletal muscle fibers. Sam's Simulations How Robust is Human Gait to Calf Muscle Shortening? SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/cimtj",
      "title": "SimTK: Chand's Simulations: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "cimtj"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "55f50f5c-4582-48d2-bf73-baea1c81ce42",
    "document_id": "doc_72",
    "content": "The Musculoskeletal Modeler's Kitchen Share Follow Project Follow publicly Follow privately Unfollow See followers (11) List Map More info 559 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Wiki Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Wiki Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provide a space for people developing and using musculoskeletal models to collaborate and learn from each other. Download Latest Releases modelerskitchen: CMakeLists_OS22_VS9.txt modelerskitchen: CMakeLists_OS24_VS10.txt OpenSim API Programs: CMakeLists.txt OpenSim API Programs: musclestrengthscaler.zip Plots to Share: MaxOutExampleTA.tif Tools in Other Programs: BatchOpenSimInMatlab.zip Tools in Other Programs: mslFileAutomation.zip Making musculoskeletal models and simulations is a lot like cooking. Anything complicated is going to take a while to get just right and there will probably be a few failed attempts along the way. Unfortunately, in research we only see the tasty, beautifully presented, dish served at the fancy party (the paper in a journal) and not the burnt, over-salted, misshapen disasters that preceded it (all those failed simulations and ideas that didn't pan out). But there's a lot of great stuff in those failed attempts and we should document it somewhere. Did you spend 2 weeks debugging something that was fixed with one line of code? Share it! Do you have a simulation that you need help with? Ask for help here! Did someone give you a great time saving tip? Pass it on! Did you make something cool but unpublishable? Brag about it! Have strong opinions about modeling and simulation? Climb on that soapbox! Fail proudly. 1,578 downloads 38 forum posts 11 followers Last updated Mar 17, 2025 Project Statistics Join Mailing Lists Suggest Idea Edith Arnold jimmy d Downloads Anything goes. Most stuff will happen in the Wiki and Forum. GO TO ADVANCED>PUBLIC FORUMS. Contact the Project Lead to get Read/Write permissions to add stuff. See all Downloads Related Projects The project owner recommends the following other projects: OpenSim Neuromuscular Models Library Lower Limb Model 2010 Matlab-Opensim Interfaces People also viewed Convert .c3d and .csv files to OpenSim files... Muscle-actuated Simulation of Human Running Platform for Dynamic Simulation and Control of... London Lower Limb Model Muscle contributions to mass center... Simbody: Multibody Physics API EMG-informed Computed Muscle Control for Dynamic... OpenSim plugin to extract the muscle lines of action See all Calibrated EMG-Informed Neuromusculoskeletal... ForceBalance : Systematic Force Field Optimization Whole-Cell Computational Model of Mycoplasma... How much muscle strength is required to walk in... OpenSim Motion and Simulation Data Open Knee(s): Virtual Biomechanical... Drop Landing Model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health",
    "metadata": {
      "source": "https://simtk.org/projects/modelerskitchen",
      "title": "SimTK: The Musculoskeletal Modeler's Kitchen: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "modelerskitchen"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "118acb23-7768-46e7-8cd1-c0aff3c44117",
    "document_id": "doc_72",
    "content": "also viewed Convert .c3d and .csv files to OpenSim files... Muscle-actuated Simulation of Human Running Platform for Dynamic Simulation and Control of... London Lower Limb Model Muscle contributions to mass center... Simbody: Multibody Physics API EMG-informed Computed Muscle Control for Dynamic... OpenSim plugin to extract the muscle lines of action See all Calibrated EMG-Informed Neuromusculoskeletal... ForceBalance : Systematic Force Field Optimization Whole-Cell Computational Model of Mycoplasma... How much muscle strength is required to walk in... OpenSim Motion and Simulation Data Open Knee(s): Virtual Biomechanical... Drop Landing Model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/modelerskitchen",
      "title": "SimTK: The Musculoskeletal Modeler's Kitchen: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "modelerskitchen"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9a784e0c-64ab-47f2-9372-16bd45ff5713",
    "document_id": "doc_183",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Public Attributes | Protected Attributes OpenSim::Analysis Class Reference abstract An abstract class for specifying the interface for an analysis plugin. More... Inheritance diagram for OpenSim::Analysis: Public Member Functions Analysis ( Model *aModel=0) Default constructor. More... Analysis (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct an object from file. More... Analysis (const Analysis &aAnalysis) Copy constructor. More... virtual ~Analysis () Analysis & operator= (const Analysis &aAnalysis) Assignment operator. More... virtual int begin (const SimTK::State &s) virtual int step (const SimTK::State &s, int stepNumber) virtual int end (const SimTK::State &s) virtual void setModel ( Model &aModel) set pointer to model to be analyzed. More... virtual void setStatesStore (const Storage &aStatesStore) set states storage for analysis. More... void setOn (bool aTrueFalse) bool getOn () const void setStartTime (double aStartTime) double getStartTime () const void setEndTime (double aEndTime) double getEndTime () const void setInDegrees (bool aTrueFalse) Set whether or not to write the output of angles in degrees. More... bool getInDegrees () const virtual bool proceed (int aStep=0) void setStepInterval (int aStepInterval) int getStepInterval () const void setColumnLabels (const Array < std::string > &aLabels) Set the column labels for this analysis. More... const Array < std::string > & getColumnLabels () const void setStorageInterval (int aInterval) int getStorageInterval () const virtual ArrayPtrs < Storage > & getStorageList () void setPrintResultFiles (bool aToWrite) bool getPrintResultFiles () const virtual int printResults (const std::string &aBaseName, const std::string &aDir=\"\", double aDT=-1.0, const std::string &aExtension=\".sto\") Print the results of the analysis. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "8af30d91-b254-48a6-a099-2f339e5f88a9",
    "document_id": "doc_183",
    "content": "this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... virtual void updateFromXMLNode (SimTK::Xml::Element &objectElement, int versionNumber) Use this method to deserialize an object from a SimTK::Xml::Element. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion ()",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "cb878341-1784-47ed-b8bc-aba63eef3696",
    "document_id": "doc_183",
    "content": "deserialize an object from a SimTK::Xml::Element. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef Analysis Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... Public Attributes Model * _model const Storage * _statesStore Protected Attributes PropertyInt _stepIntervalProp Step interval. More... int & _stepInterval PropertyBool _onProp On, off flag. More... bool & _on PropertyDbl _startTimeProp Start time for the callback in normalized time. More... double & _startTime PropertyDbl _endTimeProp End time for the callback in normalized time. More... double & _endTime ArrayPtrs < Storage > _storageList bool _printResultFiles Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Auto-generated functions static Analysis * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Analysis\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Analysis * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "a17843b8-8c54-4fce-a3cf-a53576cd6763",
    "document_id": "doc_183",
    "content": "the Java GUI. More... Analysis * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "7bce102b-b491-4c1c-bb6c-5101518bc983",
    "document_id": "doc_183",
    "content": "which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "037ab5b6-d904-497c-a65a-5b41afbc35cb",
    "document_id": "doc_183",
    "content": "std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description An abstract class for specifying the interface for an analysis plugin. Author Frank C. Anderson, Ajay Seth Version 1.0 Member Typedef Documentation ◆ Self typedef Analysis OpenSim::Analysis::Self This typedef might be useful within the member functions of this class. This",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "b09ac9d7-1b0e-45c4-ba6c-03afc190d4af",
    "document_id": "doc_183",
    "content": "OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description An abstract class for specifying the interface for an analysis plugin. Author Frank C. Anderson, Ajay Seth Version 1.0 Member Typedef Documentation ◆ Self typedef Analysis OpenSim::Analysis::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Object OpenSim::Analysis::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ Analysis() [1/3] OpenSim::Analysis::Analysis ( Model * aModel = 0 ) explicit Default constructor. Parameters aModel Model on which the analysis is to be performed. ◆ Analysis() [2/3] OpenSim::Analysis::Analysis ( const std::string & aFileName , bool aUpdateFromXMLNode = true ) Construct an object from file. The object is constructed from the root element of the XML document. The type of object is the tag name of the XML root element. Parameters aFileName File name of the document. aUpdateFromXMLNode ◆ Analysis() [3/3] OpenSim::Analysis::Analysis ( const Analysis & aAnalysis ) Copy constructor. Parameters aAnalysis Object to be copied. See also Analysis(const XMLDocument *aDocument) Analysis(const char *aFileName) generateXMLDocument() ◆ ~Analysis() virtual OpenSim::Analysis::~Analysis ( ) virtual Member Function Documentation ◆ assign() void OpenSim::Analysis::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Analysis . ◆ begin() virtual int OpenSim::Analysis::begin ( const SimTK::State & s ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ clone() Analysis * OpenSim::Analysis::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Object . Implemented in OpenSim::ProbeReporter , OpenSim::IMUDataReporter , OpenSim::OutputReporter , OpenSim::InducedAccelerations , OpenSim::PointKinematics , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::Actuation , OpenSim::StatesReporter , OpenSim::StaticOptimization , OpenSim::ForceReporter , OpenSim::BodyKinematics , and OpenSim::Kinematics . ◆ end() virtual int OpenSim::Analysis::end ( const SimTK::State & s ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "9a1fc948-78d6-4412-bc01-2024725b07c8",
    "document_id": "doc_183",
    "content": "the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Object . Implemented in OpenSim::ProbeReporter , OpenSim::IMUDataReporter , OpenSim::OutputReporter , OpenSim::InducedAccelerations , OpenSim::PointKinematics , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::Actuation , OpenSim::StatesReporter , OpenSim::StaticOptimization , OpenSim::ForceReporter , OpenSim::BodyKinematics , and OpenSim::Kinematics . ◆ end() virtual int OpenSim::Analysis::end ( const SimTK::State & s ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ getClassName() static const std::string& OpenSim::Analysis::getClassName ( ) inline static This returns \"Analysis\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getColumnLabels() const Array <std::string>& OpenSim::Analysis::getColumnLabels ( ) const ◆ getConcreteClassName() const std::string& OpenSim::Analysis::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::Object . Implemented in OpenSim::ProbeReporter , OpenSim::IMUDataReporter , OpenSim::OutputReporter , OpenSim::InducedAccelerations , OpenSim::PointKinematics , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::Actuation , OpenSim::StatesReporter , OpenSim::StaticOptimization , OpenSim::ForceReporter , OpenSim::BodyKinematics , and OpenSim::Kinematics . ◆ getEndTime() double OpenSim::Analysis::getEndTime ( ) const ◆ getInDegrees() bool OpenSim::Analysis::getInDegrees ( ) const ◆ getOn() bool OpenSim::Analysis::getOn ( ) const ◆ getPrintResultFiles() bool OpenSim::Analysis::getPrintResultFiles ( ) const inline ◆ getStartTime() double OpenSim::Analysis::getStartTime ( ) const ◆ getStepInterval() int OpenSim::Analysis::getStepInterval ( ) const ◆ getStorageInterval() int OpenSim::Analysis::getStorageInterval ( ) const ◆ getStorageList() virtual ArrayPtrs < Storage >& OpenSim::Analysis::getStorageList ( ) virtual ◆ operator=() Analysis & OpenSim::Analysis::operator= ( const Analysis & aAnalysis ) Assignment operator. Returns Reference to this object. ◆ printResults() virtual int OpenSim::Analysis::printResults ( const std::string & aBaseName , const std::string & aDir = \"\" , double aDT = -1.0 , const std::string & aExtension = \".sto\" ) virtual Print the results of the analysis. Parameters aBaseName Base name of file to which to print the data. aDir Directory name. aDT Time interval between results (linear interpolation is used). If not supplied as an argument or negative, all time steps are printed without interpolation. aExtension File extension if not the default \".sto\". Returns -1 on error, 0 otherwise. Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::ProbeReporter , OpenSim::PointKinematics , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ proceed() virtual bool OpenSim::Analysis::proceed ( int aStep = 0 ) virtual ◆ safeDownCast() static Analysis * OpenSim::Analysis::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "d8bdf52b-040f-445d-ac56-59bb5668c4db",
    "document_id": "doc_183",
    "content": "aDT Time interval between results (linear interpolation is used). If not supplied as an argument or negative, all time steps are printed without interpolation. aExtension File extension if not the default \".sto\". Returns -1 on error, 0 otherwise. Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::ProbeReporter , OpenSim::PointKinematics , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . ◆ proceed() virtual bool OpenSim::Analysis::proceed ( int aStep = 0 ) virtual ◆ safeDownCast() static Analysis * OpenSim::Analysis::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Analysis.safeDownCast(obj) . This is equivalent to dynamic_cast<Analysis*>(obj) in C++. ◆ setColumnLabels() void OpenSim::Analysis::setColumnLabels ( const Array < std::string > & aLabels ) Set the column labels for this analysis. Parameters aLabels an Array of strings (labels). ◆ setEndTime() void OpenSim::Analysis::setEndTime ( double aEndTime ) ◆ setInDegrees() void OpenSim::Analysis::setInDegrees ( bool aTrueFalse ) Set whether or not to write the output of angles in degrees. This flag must be set before an analysis is performed to ensure that the results are in the proper format. Parameters aTrueFalse Output will be in degrees if \"true\" and in radians if \"false\". ◆ setModel() virtual void OpenSim::Analysis::setModel ( Model & aModel ) virtual set pointer to model to be analyzed. Parameters aModel Reimplemented in OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::MuscleAnalysis , OpenSim::ProbeReporter , OpenSim::PointKinematics , OpenSim::StaticOptimization , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , and OpenSim::Kinematics . ◆ setOn() void OpenSim::Analysis::setOn ( bool aTrueFalse ) ◆ setPrintResultFiles() void OpenSim::Analysis::setPrintResultFiles ( bool aToWrite ) inline ◆ setStartTime() void OpenSim::Analysis::setStartTime ( double aStartTime ) ◆ setStatesStore() virtual void OpenSim::Analysis::setStatesStore ( const Storage & aStatesStore ) virtual set states storage for analysis. Parameters aStatesStore ◆ setStepInterval() void OpenSim::Analysis::setStepInterval ( int aStepInterval ) ◆ setStorageInterval() void OpenSim::Analysis::setStorageInterval ( int aInterval ) ◆ step() virtual int OpenSim::Analysis::step ( const SimTK::State & s , int stepNumber ) virtual Reimplemented in OpenSim::MuscleAnalysis , OpenSim::InducedAccelerations , OpenSim::JointReaction , OpenSim::PointKinematics , OpenSim::ProbeReporter , OpenSim::StaticOptimization , OpenSim::IMUDataReporter , OpenSim::BodyKinematics , OpenSim::ForceReporter , OpenSim::Actuation , OpenSim::Kinematics , OpenSim::StatesReporter , and OpenSim::OutputReporter . Member Data Documentation ◆ _endTime double& OpenSim::Analysis::_endTime protected ◆ _endTimeProp PropertyDbl OpenSim::Analysis::_endTimeProp protected End time for the callback in normalized time. ◆ _model Model * OpenSim::Analysis::_model ◆ _on bool& OpenSim::Analysis::_on protected ◆ _onProp PropertyBool OpenSim::Analysis::_onProp protected On, off flag. ◆ _printResultFiles bool OpenSim::Analysis::_printResultFiles protected ◆ _startTime double& OpenSim::Analysis::_startTime protected ◆ _startTimeProp PropertyDbl OpenSim::Analysis::_startTimeProp protected Start time for the callback in normalized time. ◆ _statesStore const Storage * OpenSim::Analysis::_statesStore ◆ _stepInterval int& OpenSim::Analysis::_stepInterval protected ◆ _stepIntervalProp PropertyInt OpenSim::Analysis::_stepIntervalProp protected Step interval. ◆ _storageList ArrayPtrs < Storage > OpenSim::Analysis::_storageList protected The documentation for this class was generated from the following file: OpenSim/Simulation/Model/Analysis.h OpenSim Analysis Generated on Thu Mar 21 2024 15:02:49 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "4f906197-38aa-4143-ac6d-d295cdfc5e9e",
    "document_id": "doc_183",
    "content": "◆ _startTimeProp PropertyDbl OpenSim::Analysis::_startTimeProp protected Start time for the callback in normalized time. ◆ _statesStore const Storage * OpenSim::Analysis::_statesStore ◆ _stepInterval int& OpenSim::Analysis::_stepInterval protected ◆ _stepIntervalProp PropertyInt OpenSim::Analysis::_stepIntervalProp protected Step interval. ◆ _storageList ArrayPtrs < Storage > OpenSim::Analysis::_storageList protected The documentation for this class was generated from the following file: OpenSim/Simulation/Model/Analysis.h OpenSim Analysis Generated on Thu Mar 21 2024 15:02:49 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Analysis.html",
      "title": "API: OpenSim::Analysis Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Analysis.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "2bc90c00-bc88-4f46-b76f-b078510a9e15",
    "document_id": "doc_22",
    "content": "IMAG-MSM Public Dissemination & Education Working Group Programming computer models of biological systems is a fun and powerful way to learn about the complex processes that control human health and disease. For example, computer models can help us better understand how our bodies work, identify the underlying causes of diseases, and identify new therapies to treat and cure diseases. The purpose of this community is to provide examples of biological models that can be used to teach learners of all ages -- from kindergarten through college, and beyond -- how to model biology with computer simulations. This community is managed by the IMAG-MSM's Public Dissemination & Education Working Group. Featured projects Related communities Recently updated projects total projects 10 projects with downloads See all community projects Add project to community News The Reference Model for COVID-19 - The First Multi-Scale Ensemble Disease Model The Reference Model for Disease Progression Jun 6, 2021 The Reference Model now models COVID-19 The Reference Model for Disease Progression Jul 31, 2020 New file added: Muscle_atrophy.nlogo Agent-based model of skeletal muscle disuse-induced atrophy Apr 1, 2016 Publications Choy JS, Leng S, Acevedo-Bolton G, Shaul S, Guo X, Zhong L, Guccione JM, Kassab GS. Efficacy of Intramyocardial Injection of Algisyl-LVR for the treatment of Ischemic Heart Failure in Swine. (Under Review in Circulation Research) Inouye JM, Handsfield GG, and Blemker SS. Fiber tractography for finite-element modeling of transversely isotropic material structures of arbitrary shape using computational fluid dynamics. Proceedings of the 2015 Summer Simulation Multi-Conference. Martin, Peirce, and Blemker. Agent-Based Computational Model of Skeletal Muscle Investigates Muscle-Specific Responses to Disuse-Induced Muscle Atrophy Journal of Applied Physiology, 2015. Discussion Innate immune response to bacterial infection in a superficial, acute wound Public Forum Innate immune response to bacterial infection in a superficial, acute wound Jan 4, 2018 Agent based model of Norovirus transmission on a cruise ship Public Forum Agent based model of Norovirus transmission on a cruise ship Dec 7, 2017 Collagen remodeling in tendon injury Public Forum Collagen remodeling in tendon injury Dec 7, 2017 Administrators Shayn Peirce-Cottler Silvia Blemker David Basanta SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/communityPage.php?cat=1005&sort=date&page=0&srch=&",
      "title": "SimTK: Community",
      "section": "",
      "hierarchy": [
        "category",
        "communityPage.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "028fd733-5ab2-4fad-9737-67bb96340d89",
    "document_id": "doc_63",
    "content": "Ayman Habib Stanford University Neuromuscular Biomechanics Lab Contact Interests Musculoskeletal modeling and simulation. Biomechanics. Control. Other Interests: Modeling and simulation. Modular GUI design. Member since Apr 1, 2005 Member of 49 projects Total forum posts: 2255 Last forum post: Feb 6, 2025 Projects Ayman Habib is a member of the following projects: Ayman s Private Project Chand's Simulations Easy-to-use interactive musculoskeletal... Java wrap simbody LAPACK linear algebra library (with BLAS) Matlab-Opensim Interfaces May Liu's Walking Simulations ME/BIOE 485 (Modeling and Simulation of Human... See all Myosin Resources and Communication Neuromuscular Models Library OpenSense OpenSense: Validation of IMU-based estimates... OpenSim OpenSim 3D World Objects Library OpenSim Advanced User and Developer Workshop, August... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced Users Workshop, April 28-30, 2010 OpenSim Advanced Users Workshop, August 12-14, 2009 OpenSim and NMS Physiome Workshop OpenSim Developer Jamboree - July 12-14, 2010 OpenSim Developer's Jamboree 2008 OpenSim Developers Jamboree - October 28-30, 2009 OpenSim Developer's Jamboree | Winter 2009 OpenSim for the Warrior Web ＯｐｅｎＳｉｍＣｏｌａｂ (OpenSim in Google Colab) OpenSim Science Advisors OpenSim Soccer Ball Kicking Example OpenSim Utilities Predictive Simulation of Standing Long Jumps... QSim: C++/Qt Prototype GUI for easy-to-use... Simbios Dissemination Simbody: Multibody Physics API SimTK Core Toolset (obsolete project) SimTK Framework Modeling Layer PROTOTYPE SimTK Planning Project SimTK Resources Project Simulation Labs utilizing OpenSim software Spasticity model in OpenSim SUNDIALS Suite of nonlinear differential... ToRNADo UW-Madison Workflow for Gait VTK Binaries for the SimTK Core xerces-c Followed projects Ayman Habib is following the project below: 2017 Fall OpenSim Virtual Workshop SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/users/aymanh",
      "title": "SimTK: Ayman Habib",
      "section": "",
      "hierarchy": [
        "users",
        "aymanh"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f3b8cf00-c117-4b48-a53e-8af30e1efe71",
    "document_id": "doc_128",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53084382/IMU+Placer",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53084382",
        "IMU+Placer"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "44048050-83eb-4a90-91b6-9bc5451d88cf",
    "document_id": "doc_90",
    "content": "Volumetric & Time Series Models of Muscle Deformation Share Follow Project Follow publicly Follow privately Unfollow See followers (15) List Map More info 1617 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News The OpenArm data sets are designed to enable study of force- and kinematic-induced muscle deformation for applications in biomechanics research, computer graphics, and assistive device development. **NEW:** The OpenArm Multisensor 2.0 data set contains new time series of ultrasound-measured brachioradialis deformation, surface electromyography (sEMG)-measured activation, force, and goal trajectory data, for various force-, deformation-, and activation-based trajectory tracking tasks, under refined conditions from those of the 1.0 data set. Also included are all analysis, real-time muscle deformation tracking, and display code. The OpenArm Multisensor 1.0 data set contains time series cross-sectional ultrasound scans of the brachioradialis muscle under variable elbow loading, alongside corresponding surface electromyography (sEMG), acoustic myography (AMG), and force data. The OpenArm 1.0 and 2.0 data sets encompass factorial sets of volumetric scans of the arm, generated using ultrasound and motion capture, that allow for analysis of both force- and configuration-associated muscle deformation. We invite anyone in the research community to use the OpenArm and OpenArm Multisensor data sets to validate existing muscle deformation models or to devise new ones. Full details can be found in the following papers: Laura A. Hallock, Bhavna Sud, Chris Mitchell, Eric Hu, Fayyaz Ahamed, Akash Velu, Amanda Schwartz, and Ruzena Bajcsy. \"Toward Real-Time Muscle Force Inference and Device Control via Optical-Flow-Tracked Muscle Deformation.\" In IEEE Transactions on Neural Systems and Rehabilitation Engineering (TNSRE). IEEE, 2021. (Under review.) Laura Hallock, Akash Velu, Amanda Schwartz, and Ruzena Bajcsy. \"Muscle deformation correlates with output force during isometric contraction.\" In IEEE RAS/EMBS International Conference on Biomedical Robotics & Biomechatronics (BioRob). IEEE, 2020. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/hallock2020biorob .) Yonatan Nozik*, Laura A. Hallock*, Daniel Ho, Sai Mandava, Chris Mitchell, Thomas Hui Li, and Ruzena Bajcsy, \"OpenArm 2.0: Automated Segmentation of 3D Tissue Structures for Multi-Subject Study of Muscle Deformation Dynamics,\" in International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC), IEEE, 2019. *Equal contribution. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/nozikhallock2019embc .) Laura Hallock, Akira Kato, and Ruzena Bajcsy. \"Empirical quantification and modeling of muscle deformation: Toward ultrasound-driven assistive device control.\" In IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2018. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/hallock2018icra .) This project is currently in development in the Human-Assistive Robotic Technologies (HART) Lab at the University of California, Berkeley ( http://hart.berkeley.edu ). 16,401 downloads 2 forum posts 15 followers Last updated Mar 28, 2025 Project Statistics Suggest Idea Laura Hallock Christopher",
    "metadata": {
      "source": "https://simtk.org/projects/openarm/",
      "title": "SimTK: OpenArm: Volumetric & Time Series Models of Muscle Deformation: Project Home",
      "section": "OpenArm:",
      "hierarchy": [
        "projects",
        "openarm"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3c574941-747c-4ee4-bc48-582be4f64664",
    "document_id": "doc_90",
    "content": "of Muscle Deformation Dynamics,\" in International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC), IEEE, 2019. *Equal contribution. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/nozikhallock2019embc .) Laura Hallock, Akira Kato, and Ruzena Bajcsy. \"Empirical quantification and modeling of muscle deformation: Toward ultrasound-driven assistive device control.\" In IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2018. (Available at https://people.eecs.berkeley.edu/~lhallock/publication/hallock2018icra .) This project is currently in development in the Human-Assistive Robotic Technologies (HART) Lab at the University of California, Berkeley ( http://hart.berkeley.edu ). 16,401 downloads 2 forum posts 15 followers Last updated Mar 28, 2025 Project Statistics Suggest Idea Laura Hallock Christopher Mitchell Bhavna Sud Akash Velu Eric Hu Fayyaz Ahamed Yonatan Nozik Akira Kato Gregorij Kurillo Jaeyun Seo Daniel Ho News Links updated/fixed for all data downloads! Jan 23, 2023 We apologize to those having download issues over the last few weeks — our old Box hosting solution was no longer viable, so files have been moved to Google Drive. OpenArm Multisensor data set and muscle contour tracking code released + slated for presentation at ASB & BioRob! Jul 24, 2020 Our new time series muscle force/deformation/sEMG data set, OpenArm Multisensor, has now been released to the OpenArm database! OpenArm 2.0 data set released + scheduled for presentation at EMBC Berlin! Jul 16, 2019 The OpenArm 2.0 muscle deformation data set has now been released to SimTK, and is scheduled for presentation at EMBC 2019 in Berlin! First OpenArm 3D muscle deformation data set released! Nov 29, 2018 The first generation of the OpenArm data set has now been ported from our lab website to the SimTK community! See all News Downloads Download our time series and volumetric muscle deformation data sets here, as well as tracking and segmentation code! See all Downloads Related Projects The project owner recommends the following other projects: OpenRobotRehab: Data Sets & Platforms for Robot-Mediated Rehabilitation People also viewed Calibrated EMG-Informed Neuromusculoskeletal... Muscle Wrapping Over Multiple Smooth Surfaces OpenSim plugin to extract the muscle lines of action Fiber Tractography for Finite-Element Modeling of... Neuromusculoskeletal Modeling (NMSM) Pipeline Grand Challenge Competition to Predict In Vivo... Lower Limb Model 2010 OpenSim plugin to optimize musculotendon... See all Multidimensional Cubic B-Spline Muscle contributions to mass center... Muscle-actuated Simulation of Human Running How much muscle strength is required to walk in... Model of the Scapulothoracic Joint Hip Musculoskeletal Model London Lower Limb Model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/openarm/",
      "title": "SimTK: OpenArm: Volumetric & Time Series Models of Muscle Deformation: Project Home",
      "section": "OpenArm:",
      "hierarchy": [
        "projects",
        "openarm"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9f2b78ca-4db1-4a94-90fa-651123b9d11e",
    "document_id": "doc_90",
    "content": "from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/openarm/",
      "title": "SimTK: OpenArm: Volumetric & Time Series Models of Muscle Deformation: Project Home",
      "section": "OpenArm:",
      "hierarchy": [
        "projects",
        "openarm"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a1e6a08c-3c6c-4fd7-b56c-18898bd5aa35",
    "document_id": "doc_51",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Displaying results 1‒25 out of 138 total. Displaying 10 25 50 100 1000 results. Submit new issue Advanced queries Simple Filtering and Sorting Build Query Assignee: Unassigned Joy Ku Ayman Habib Ajay Seth Jennifer Hicks Scott Delp Thomas Uchida Diane Bush Jacqueline Tran Carmichael Ong Matt Petrucci Nicholas Bianco Matt DeMers Shrinidhi KL Michael Sherman Apoorva Rajagopal Any State: Any Open Closed Deleted Order by: Id Priority Summary Open Date Last Modified Date Close Date Submitter Assignee # Votes # Voters % Votes Ascending Descending Id Summary Open Date Assigned to Submitted by 982 Have the ability to run InducedAccelerations analysis using results from static optimization * 2009-12-14 02:06 Ajay Seth Tim Dorn 1164 cmc crash - no intermediate results available * 2010-04-30 18:49 Nobody Scott Delp 1275 Model Building * 2010-07-20 23:16 Nobody Ajay Seth 1321 Cannot use less than 8 data points in .mot file without OpenSim crash. * 2010-08-25 20:09 Ajay Seth Paul Mitiguy 659 Error display in the Messages Window * 2008-10-20 15:04 Ayman Habib Craig Goehler 1254 Ligaments (and Forces in general) are not visible in the GUI except through previewer * 2010-07-15 20:15 Ayman Habib Ajay Seth 482 Vicon motion files import * 2007-09-03 09:46 Nobody francois asseman 1304 States file written out after failed CMC cannot be reloaded in OpenSim * 2010-08-06 23:12 Nobody Ajay Seth 1320 Misinterprets <x> <y> data when <x> data is not in ascending order. * 2010-08-25 20:06 Ajay Seth Paul Mitiguy 1266 Add the ability to compute/report end-effect/point forces * 2010-07-19 22:50 Nobody Ayman Habib 609 save output file (txt or log) to specific file after executing a tool * 2008-05-30 16:02 Ayman Habib Sam Hamner 1116 More consistent data output * 2010-04-05 18:33 Ayman Habib Sam Hamner 899 output states from static optimization * 2009-08-13 21:21 Nobody Tim Dorn 1273 Request to reduce file redundancy and data duplication * 2010-07-20 22:44 Ayman Habib Ajay Seth 737 manual muscle parameter scaling * 2009-03-03 23:12 Ayman Habib Tim Dorn 749 More control over static optimization objective function * 2009-03-27 01:25 Ayman Habib Tim Dorn 754 toggle display of GRF * 2009-04-01 00:22 Ayman Habib Tim Dorn 757 move wrapping objects around in the GUI just like muscle points * 2009-04-06 23:36 Ayman Habib Tim Dorn 780 view model as stick figure * 2009-04-17 00:36 Ayman Habib Tim",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=323&group_id=91&func=browse",
      "title": "SimTK: OpenSim: Features",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "55d1a52c-d3fb-4c7e-a723-65b18eed5193",
    "document_id": "doc_51",
    "content": "Sam Hamner 899 output states from static optimization * 2009-08-13 21:21 Nobody Tim Dorn 1273 Request to reduce file redundancy and data duplication * 2010-07-20 22:44 Ayman Habib Ajay Seth 737 manual muscle parameter scaling * 2009-03-03 23:12 Ayman Habib Tim Dorn 749 More control over static optimization objective function * 2009-03-27 01:25 Ayman Habib Tim Dorn 754 toggle display of GRF * 2009-04-01 00:22 Ayman Habib Tim Dorn 757 move wrapping objects around in the GUI just like muscle points * 2009-04-06 23:36 Ayman Habib Tim Dorn 780 view model as stick figure * 2009-04-17 00:36 Ayman Habib Tim Dorn 816 plot the optimal fibre length in plotter tool * 2009-06-11 02:00 Ayman Habib Tim Dorn 891 plot GeneralizedForce(s) in plotter tool (GUI) * 2009-08-03 09:22 Nobody Tim Dorn 902 Would like each body to know all the forces/moments applied to it * 2009-08-14 18:46 Nobody David Wagner 936 plotter tool loses information when \"switching\" models * 2009-09-16 02:39 Ayman Habib Tim Dorn 941 Populate MuscleAnalysis moment file with muscle moments due to passive and active muscle forces * 2009-09-23 00:16 Ajay Seth Tim Dorn 954 Right click in 3D view * 2009-10-22 23:44 Ayman Habib Tim Dorn 1 2 3 4 5 6 next → * Denotes requests > 45 Days Old SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=323&group_id=91&func=browse",
      "title": "SimTK: OpenSim: Features",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c155008e-fe86-4dc1-9449-598d5f3cc862",
    "document_id": "doc_54",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Required fields outlined in blue",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=2089&group_id=91&func=add",
      "title": "SimTK: OpenSim: Submit New",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e54e5bed-b365-408c-bbec-d85a62ff6dde",
    "document_id": "doc_131",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090088/Static+Optimization",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090088",
        "Static+Optimization"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9722e235-923f-414f-9238-91dd2addecf3",
    "document_id": "doc_185",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Public Attributes | Friends OpenSim::SimbodyEngine Class Reference A wrapper class to use the SimTK Simbody dynamics engine as the underlying engine for OpenSim . More... Inheritance diagram for OpenSim::SimbodyEngine: Public Member Functions virtual ~SimbodyEngine () SimbodyEngine () SimbodyEngine (const std::string &aFileName) SimbodyEngine (const SimbodyEngine &aEngine) SimbodyEngine & operator= (const SimbodyEngine &aEngine) const Model & getModel () const Model & getModel () void setModel ( Model &aModel) void connectSimbodyEngineToModel ( Model &aModel) void getUnlockedCoordinates (const SimTK::State &s, CoordinateSet &rUnlockedCoordinates) const virtual void computeReactions (const SimTK::State &s, SimTK::Vector_< SimTK::Vec3 > &rForces, SimTK::Vector_< SimTK::Vec3 > &rTorques) const void formCompleteStorages (const SimTK::State &s, const OpenSim::Storage &aQIn, OpenSim::Storage *&rQComplete, OpenSim::Storage *&rUComplete) const From a potentially partial specification of the generalized coordinates, form a complete storage of the generalized coordinates (q's) and generalized speeds (u's) in radians and radians/s respectively. More... void convertRadiansToDegrees ( Storage &rStorage) const void convertRadiansToDegrees ( TimeSeriesTable &table) const void convertDegreesToRadians ( Storage &rStorage) const void convertDegreesToRadians ( TimeSeriesTable &table) const void convertDegreesToRadians (double *aQDeg, double *rQRad) const void convertRadiansToDegrees (double *aQRad, double *rQDeg) const void convertAnglesToDirectionCosines (double aE1, double aE2, double aE3, double rDirCos[3][3]) const void convertAnglesToDirectionCosines (double aE1, double aE2, double aE3, double *rDirCos) const void convertDirectionCosinesToAngles (double aDirCos[3][3], double *rE1, double *rE2, double *rE3) const void convertDirectionCosinesToAngles (double *aDirCos, double *rE1, double *rE2, double *rE3) const void convertDirectionCosinesToQuaternions (double aDirCos[3][3], double *rQ1, double *rQ2, double *rQ3, double *rQ4) const void convertDirectionCosinesToQuaternions (double *aDirCos, double *rQ1, double *rQ2, double *rQ3, double *rQ4) const void convertQuaternionsToDirectionCosines (double aQ1, double aQ2, double aQ3, double aQ4, double rDirCos[3][3]) const void convertQuaternionsToDirectionCosines (double aQ1, double aQ2, double aQ3, double aQ4, double *rDirCos) const Deprecated void getPosition (const SimTK::State &s, const PhysicalFrame &aBody, const SimTK::Vec3 &aPoint, SimTK::Vec3 &rPos) const (Deprecated) Use Frame::getPositionInGround() instead. More... void getVelocity (const SimTK::State &s, const PhysicalFrame &aBody, const SimTK::Vec3 &aPoint, SimTK::Vec3 &rVel) const (Deprecated) Use Frame::getVelocityInGround() instead. More... void getAcceleration (const SimTK::State &s, const PhysicalFrame &aBody, const SimTK::Vec3 &aPoint, SimTK::Vec3 &rAcc) const (Deprecated) Use Frame::getAccelerationInGround() instead. More... void getDirectionCosines (const SimTK::State &s, const PhysicalFrame &aBody, double rDirCos[3][3]) const (Deprecated) Use Frame::getTransformInGround() .R() instead. More... void getDirectionCosines (const SimTK::State &s, const PhysicalFrame &aBody, double *rDirCos) const (Deprecated) Use Frame::getTransformInGround() .R() instead. More... void getAngularVelocity (const SimTK::State &s, const PhysicalFrame &aBody, SimTK::Vec3 &rAngVel) const (Deprecated) Use Frame::getVelocityInGround() [0] instead. More... void getAngularVelocityBodyLocal (const SimTK::State &s, const PhysicalFrame &aBody, SimTK::Vec3 &rAngVel) const (Deprecated) See Frame::getVelocityInGround() [0]. More... void getAngularAcceleration (const SimTK::State &s, const PhysicalFrame &aBody, SimTK::Vec3 &rAngAcc) const (Deprecated) Use Frame::getAccelerationInGround() [0] instead. More... void getAngularAccelerationBodyLocal (const SimTK::State &s, const PhysicalFrame &aBody, SimTK::Vec3 &rAngAcc) const (Deprecated) See Frame::getAccelerationInGround() [0]. More... SimTK::Transform getTransform (const SimTK::State &s, const PhysicalFrame &aBody) const (Deprecated) Use Frame::getTransformInGround() instead. More... void transform (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const double aVec[3], const PhysicalFrame &aBodyTo, double rVec[3]) const (Deprecated) Use Frame::expressVectorInAnotherFrame() instead. More... void transform (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const SimTK::Vec3 &aVec, const PhysicalFrame &aBodyTo, SimTK::Vec3 &rVec) const (Deprecated) Use Frame::expressVectorInAnotherFrame()",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c5759a82-43ed-4cb6-a314-47fa647c6d9c",
    "document_id": "doc_185",
    "content": "const PhysicalFrame &aBody, SimTK::Vec3 &rAngVel) const (Deprecated) See Frame::getVelocityInGround() [0]. More... void getAngularAcceleration (const SimTK::State &s, const PhysicalFrame &aBody, SimTK::Vec3 &rAngAcc) const (Deprecated) Use Frame::getAccelerationInGround() [0] instead. More... void getAngularAccelerationBodyLocal (const SimTK::State &s, const PhysicalFrame &aBody, SimTK::Vec3 &rAngAcc) const (Deprecated) See Frame::getAccelerationInGround() [0]. More... SimTK::Transform getTransform (const SimTK::State &s, const PhysicalFrame &aBody) const (Deprecated) Use Frame::getTransformInGround() instead. More... void transform (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const double aVec[3], const PhysicalFrame &aBodyTo, double rVec[3]) const (Deprecated) Use Frame::expressVectorInAnotherFrame() instead. More... void transform (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const SimTK::Vec3 &aVec, const PhysicalFrame &aBodyTo, SimTK::Vec3 &rVec) const (Deprecated) Use Frame::expressVectorInAnotherFrame() instead. More... void transformPosition (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const double aPos[3], const PhysicalFrame &aBodyTo, double rPos[3]) const (Deprecated) Use Frame::findStationLocationInAnotherFrame() instead. More... void transformPosition (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const SimTK::Vec3 &aPos, const PhysicalFrame &aBodyTo, SimTK::Vec3 &rPos) const (Deprecated) Use Frame::findStationLocationInAnotherFrame() instead. More... void transformPosition (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const double aPos[3], double rPos[3]) const (Deprecated) Use Frame::findStationLocationInGround() instead. More... void transformPosition (const SimTK::State &s, const PhysicalFrame &aBodyFrom, const SimTK::Vec3 &aPos, SimTK::Vec3 &rPos) const (Deprecated) Use Frame::findStationLocationInGround() instead. More... double calcDistance (const SimTK::State &s, const PhysicalFrame &aBody1, const SimTK::Vec3 &aPoint1, const PhysicalFrame &aBody2, const SimTK::Vec3 &aPoint2) const (Deprecated) Use Point::calcDistanceBetween() or Frame::findStationLocationInGround() instead More... double calcDistance (const SimTK::State &s, const PhysicalFrame &aBody1, const double aPoint1[3], const PhysicalFrame &aBody2, const double aPoint2[3]) const (Deprecated) Use Point::calcDistanceBetween() or Frame::findStationLocationInGround() instead More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a50902c5-079a-4441-93c4-90de67c62c38",
    "document_id": "doc_185",
    "content": "or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... virtual void updateFromXMLNode (SimTK::Xml::Element &objectElement, int versionNumber) Use this method to deserialize an object from a SimTK::Xml::Element. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "43885045-e0eb-4efa-a88a-23ae724100e8",
    "document_id": "doc_185",
    "content": "represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef SimbodyEngine Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... Public Attributes Model * _model Pointer to the model that owns this dynamics engine. More... Friends class Body class Coordinate class Joint class Constraint class WeldConstraint class CoordinateCouplerConstraint Auto-generated functions static SimbodyEngine * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"SimbodyEngine\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... SimbodyEngine * clone () const override Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d1fb81a2-5ab2-4804-9d7c-c691a2cb8d76",
    "document_id": "doc_185",
    "content": "is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0523f784-ecc7-4574-9771-8561dca17283",
    "document_id": "doc_185",
    "content": "current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c1022e81-a858-4747-98df-d51f9bfec8bd",
    "document_id": "doc_185",
    "content": "return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description A wrapper class to use the SimTK Simbody dynamics engine as the underlying engine for OpenSim . Authors Frank C. Anderson, Ajay Seth Version 1.0 Member Typedef Documentation ◆ Self typedef SimbodyEngine OpenSim::SimbodyEngine::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Object OpenSim::SimbodyEngine::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "43529334-9e24-4d8a-b2b6-e8b1fcf66c46",
    "document_id": "doc_185",
    "content": "Detailed Description A wrapper class to use the SimTK Simbody dynamics engine as the underlying engine for OpenSim . Authors Frank C. Anderson, Ajay Seth Version 1.0 Member Typedef Documentation ◆ Self typedef SimbodyEngine OpenSim::SimbodyEngine::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Object OpenSim::SimbodyEngine::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ ~SimbodyEngine() virtual OpenSim::SimbodyEngine::~SimbodyEngine ( ) virtual ◆ SimbodyEngine() [1/3] OpenSim::SimbodyEngine::SimbodyEngine ( ) ◆ SimbodyEngine() [2/3] OpenSim::SimbodyEngine::SimbodyEngine ( const std::string & aFileName ) ◆ SimbodyEngine() [3/3] OpenSim::SimbodyEngine::SimbodyEngine ( const SimbodyEngine & aEngine ) Member Function Documentation ◆ assign() void OpenSim::SimbodyEngine::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type SimbodyEngine . ◆ calcDistance() [1/2] double OpenSim::SimbodyEngine::calcDistance ( const SimTK::State & s , const PhysicalFrame & aBody1 , const SimTK::Vec3 & aPoint1 , const PhysicalFrame & aBody2 , const SimTK::Vec3 & aPoint2 ) const (Deprecated) Use Point::calcDistanceBetween() or Frame::findStationLocationInGround() instead ◆ calcDistance() [2/2] double OpenSim::SimbodyEngine::calcDistance ( const SimTK::State & s , const PhysicalFrame & aBody1 , const double aPoint1 [3], const PhysicalFrame & aBody2 , const double aPoint2 [3] ) const (Deprecated) Use Point::calcDistanceBetween() or Frame::findStationLocationInGround() instead ◆ clone() SimbodyEngine * OpenSim::SimbodyEngine::clone ( ) const inline override virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Object . ◆ computeReactions() virtual void OpenSim::SimbodyEngine::computeReactions ( const SimTK::State & s , SimTK::Vector_< SimTK::Vec3 > & rForces , SimTK::Vector_< SimTK::Vec3 > & rTorques ) const virtual ◆ connectSimbodyEngineToModel() void OpenSim::SimbodyEngine::connectSimbodyEngineToModel ( Model & aModel ) ◆ convertAnglesToDirectionCosines() [1/2] void OpenSim::SimbodyEngine::convertAnglesToDirectionCosines ( double aE1 , double aE2 , double aE3 , double rDirCos [3][3] ) const ◆ convertAnglesToDirectionCosines() [2/2] void OpenSim::SimbodyEngine::convertAnglesToDirectionCosines ( double aE1 , double aE2 , double aE3 , double * rDirCos ) const ◆ convertDegreesToRadians() [1/3] void OpenSim::SimbodyEngine::convertDegreesToRadians ( Storage & rStorage ) const Referenced by OpenSim::TableProcessor::processAndConvertToRadians() . ◆ convertDegreesToRadians() [2/3] void OpenSim::SimbodyEngine::convertDegreesToRadians ( TimeSeriesTable & table ) const ◆ convertDegreesToRadians() [3/3] void OpenSim::SimbodyEngine::convertDegreesToRadians ( double * aQDeg , double * rQRad ) const ◆ convertDirectionCosinesToAngles() [1/2] void OpenSim::SimbodyEngine::convertDirectionCosinesToAngles ( double aDirCos [3][3], double * rE1 , double * rE2 , double * rE3 ) const ◆ convertDirectionCosinesToAngles() [2/2] void OpenSim::SimbodyEngine::convertDirectionCosinesToAngles ( double * aDirCos , double * rE1 , double * rE2 , double * rE3 )",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "39d6cf95-25ea-4006-9d01-3866595cb187",
    "document_id": "doc_185",
    "content": "( double aE1 , double aE2 , double aE3 , double * rDirCos ) const ◆ convertDegreesToRadians() [1/3] void OpenSim::SimbodyEngine::convertDegreesToRadians ( Storage & rStorage ) const Referenced by OpenSim::TableProcessor::processAndConvertToRadians() . ◆ convertDegreesToRadians() [2/3] void OpenSim::SimbodyEngine::convertDegreesToRadians ( TimeSeriesTable & table ) const ◆ convertDegreesToRadians() [3/3] void OpenSim::SimbodyEngine::convertDegreesToRadians ( double * aQDeg , double * rQRad ) const ◆ convertDirectionCosinesToAngles() [1/2] void OpenSim::SimbodyEngine::convertDirectionCosinesToAngles ( double aDirCos [3][3], double * rE1 , double * rE2 , double * rE3 ) const ◆ convertDirectionCosinesToAngles() [2/2] void OpenSim::SimbodyEngine::convertDirectionCosinesToAngles ( double * aDirCos , double * rE1 , double * rE2 , double * rE3 ) const ◆ convertDirectionCosinesToQuaternions() [1/2] void OpenSim::SimbodyEngine::convertDirectionCosinesToQuaternions ( double aDirCos [3][3], double * rQ1 , double * rQ2 , double * rQ3 , double * rQ4 ) const ◆ convertDirectionCosinesToQuaternions() [2/2] void OpenSim::SimbodyEngine::convertDirectionCosinesToQuaternions ( double * aDirCos , double * rQ1 , double * rQ2 , double * rQ3 , double * rQ4 ) const ◆ convertQuaternionsToDirectionCosines() [1/2] void OpenSim::SimbodyEngine::convertQuaternionsToDirectionCosines ( double aQ1 , double aQ2 , double aQ3 , double aQ4 , double rDirCos [3][3] ) const ◆ convertQuaternionsToDirectionCosines() [2/2] void OpenSim::SimbodyEngine::convertQuaternionsToDirectionCosines ( double aQ1 , double aQ2 , double aQ3 , double aQ4 , double * rDirCos ) const ◆ convertRadiansToDegrees() [1/3] void OpenSim::SimbodyEngine::convertRadiansToDegrees ( Storage & rStorage ) const ◆ convertRadiansToDegrees() [2/3] void OpenSim::SimbodyEngine::convertRadiansToDegrees ( TimeSeriesTable & table ) const ◆ convertRadiansToDegrees() [3/3] void OpenSim::SimbodyEngine::convertRadiansToDegrees ( double * aQRad , double * rQDeg ) const ◆ formCompleteStorages() void OpenSim::SimbodyEngine::formCompleteStorages ( const SimTK::State & s , const OpenSim::Storage & aQIn , OpenSim::Storage *& rQComplete , OpenSim::Storage *& rUComplete ) const From a potentially partial specification of the generalized coordinates, form a complete storage of the generalized coordinates (q's) and generalized speeds (u's) in radians and radians/s respectively. Parameters s Used as working memory. aQIn Storage containing the q's or a subset of the q's. rQComplete Storage containing all the q's. If q's were not in aQIn, the values are set to 0.0. When a q is constrained, its value is altered to be consistent with the constraint. The caller is responsible for deleting the memory associated with this storage. Units are radians. rUComplete Storage containing all the u's. The generalized speeds are obtained by spline fitting the q's and differentiating the splines. When a u is constrained, its value is altered to be consistent with the constraint. The caller is responsible for deleting the memory associated with this storage. Units are radians/s. ◆ getAcceleration() void OpenSim::SimbodyEngine::getAcceleration ( const SimTK::State & s , const PhysicalFrame & aBody , const SimTK::Vec3 & aPoint , SimTK::Vec3 & rAcc ) const (Deprecated) Use Frame::getAccelerationInGround() instead. ◆ getAngularAcceleration() void OpenSim::SimbodyEngine::getAngularAcceleration ( const SimTK::State & s , const PhysicalFrame & aBody , SimTK::Vec3 & rAngAcc ) const (Deprecated) Use Frame::getAccelerationInGround() [0] instead. ◆ getAngularAccelerationBodyLocal() void OpenSim::SimbodyEngine::getAngularAccelerationBodyLocal ( const SimTK::State & s , const PhysicalFrame & aBody , SimTK::Vec3 & rAngAcc ) const (Deprecated) See Frame::getAccelerationInGround() [0]. ◆ getAngularVelocity() void OpenSim::SimbodyEngine::getAngularVelocity ( const SimTK::State & s , const PhysicalFrame & aBody , SimTK::Vec3 & rAngVel )",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9cf43849-a39d-488f-865d-044ae288cfb2",
    "document_id": "doc_185",
    "content": "Units are radians/s. ◆ getAcceleration() void OpenSim::SimbodyEngine::getAcceleration ( const SimTK::State & s , const PhysicalFrame & aBody , const SimTK::Vec3 & aPoint , SimTK::Vec3 & rAcc ) const (Deprecated) Use Frame::getAccelerationInGround() instead. ◆ getAngularAcceleration() void OpenSim::SimbodyEngine::getAngularAcceleration ( const SimTK::State & s , const PhysicalFrame & aBody , SimTK::Vec3 & rAngAcc ) const (Deprecated) Use Frame::getAccelerationInGround() [0] instead. ◆ getAngularAccelerationBodyLocal() void OpenSim::SimbodyEngine::getAngularAccelerationBodyLocal ( const SimTK::State & s , const PhysicalFrame & aBody , SimTK::Vec3 & rAngAcc ) const (Deprecated) See Frame::getAccelerationInGround() [0]. ◆ getAngularVelocity() void OpenSim::SimbodyEngine::getAngularVelocity ( const SimTK::State & s , const PhysicalFrame & aBody , SimTK::Vec3 & rAngVel ) const (Deprecated) Use Frame::getVelocityInGround() [0] instead. ◆ getAngularVelocityBodyLocal() void OpenSim::SimbodyEngine::getAngularVelocityBodyLocal ( const SimTK::State & s , const PhysicalFrame & aBody , SimTK::Vec3 & rAngVel ) const (Deprecated) See Frame::getVelocityInGround() [0]. ◆ getClassName() static const std::string& OpenSim::SimbodyEngine::getClassName ( ) inline static This returns \"SimbodyEngine\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::SimbodyEngine::getConcreteClassName ( ) const inline override virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::Object . ◆ getDirectionCosines() [1/2] void OpenSim::SimbodyEngine::getDirectionCosines ( const SimTK::State & s , const PhysicalFrame & aBody , double rDirCos [3][3] ) const (Deprecated) Use Frame::getTransformInGround() .R() instead. ◆ getDirectionCosines() [2/2] void OpenSim::SimbodyEngine::getDirectionCosines ( const SimTK::State & s , const PhysicalFrame & aBody , double * rDirCos ) const (Deprecated) Use Frame::getTransformInGround() .R() instead. ◆ getModel() [1/2] const Model & OpenSim::SimbodyEngine::getModel ( ) const inline ◆ getModel() [2/2] Model & OpenSim::SimbodyEngine::getModel ( ) inline ◆ getPosition() void OpenSim::SimbodyEngine::getPosition ( const SimTK::State & s , const PhysicalFrame & aBody , const SimTK::Vec3 & aPoint , SimTK::Vec3 & rPos ) const (Deprecated) Use Frame::getPositionInGround() instead. ◆ getTransform() SimTK::Transform OpenSim::SimbodyEngine::getTransform ( const SimTK::State & s , const PhysicalFrame & aBody ) const (Deprecated) Use Frame::getTransformInGround() instead. ◆ getUnlockedCoordinates() void OpenSim::SimbodyEngine::getUnlockedCoordinates ( const SimTK::State & s , CoordinateSet & rUnlockedCoordinates ) const ◆ getVelocity() void OpenSim::SimbodyEngine::getVelocity ( const SimTK::State & s , const PhysicalFrame & aBody , const SimTK::Vec3 & aPoint , SimTK::Vec3 & rVel ) const (Deprecated) Use Frame::getVelocityInGround() instead. ◆ operator=() SimbodyEngine & OpenSim::SimbodyEngine::operator= ( const SimbodyEngine & aEngine ) ◆ safeDownCast() static SimbodyEngine * OpenSim::SimbodyEngine::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = SimbodyEngine.safeDownCast(obj) . This is equivalent to dynamic_cast<SimbodyEngine*>(obj) in C++. ◆ setModel() void OpenSim::SimbodyEngine::setModel ( Model & aModel ) inline ◆ transform() [1/2] void OpenSim::SimbodyEngine::transform ( const SimTK::State & s , const PhysicalFrame & aBodyFrom , const double aVec [3], const PhysicalFrame & aBodyTo ,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0111f467-6dd2-4622-b663-495d6aee9c44",
    "document_id": "doc_185",
    "content": "PhysicalFrame & aBody , const SimTK::Vec3 & aPoint , SimTK::Vec3 & rVel ) const (Deprecated) Use Frame::getVelocityInGround() instead. ◆ operator=() SimbodyEngine & OpenSim::SimbodyEngine::operator= ( const SimbodyEngine & aEngine ) ◆ safeDownCast() static SimbodyEngine * OpenSim::SimbodyEngine::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = SimbodyEngine.safeDownCast(obj) . This is equivalent to dynamic_cast<SimbodyEngine*>(obj) in C++. ◆ setModel() void OpenSim::SimbodyEngine::setModel ( Model & aModel ) inline ◆ transform() [1/2] void OpenSim::SimbodyEngine::transform ( const SimTK::State & s , const PhysicalFrame & aBodyFrom , const double aVec [3], const PhysicalFrame & aBodyTo , double rVec [3] ) const (Deprecated) Use Frame::expressVectorInAnotherFrame() instead. ◆ transform() [2/2] void OpenSim::SimbodyEngine::transform ( const SimTK::State & s , const PhysicalFrame & aBodyFrom , const SimTK::Vec3 & aVec , const PhysicalFrame & aBodyTo , SimTK::Vec3 & rVec ) const (Deprecated) Use Frame::expressVectorInAnotherFrame() instead. ◆ transformPosition() [1/4] void OpenSim::SimbodyEngine::transformPosition ( const SimTK::State & s , const PhysicalFrame & aBodyFrom , const double aPos [3], const PhysicalFrame & aBodyTo , double rPos [3] ) const (Deprecated) Use Frame::findStationLocationInAnotherFrame() instead. ◆ transformPosition() [2/4] void OpenSim::SimbodyEngine::transformPosition ( const SimTK::State & s , const PhysicalFrame & aBodyFrom , const SimTK::Vec3 & aPos , const PhysicalFrame & aBodyTo , SimTK::Vec3 & rPos ) const (Deprecated) Use Frame::findStationLocationInAnotherFrame() instead. ◆ transformPosition() [3/4] void OpenSim::SimbodyEngine::transformPosition ( const SimTK::State & s , const PhysicalFrame & aBodyFrom , const double aPos [3], double rPos [3] ) const (Deprecated) Use Frame::findStationLocationInGround() instead. ◆ transformPosition() [4/4] void OpenSim::SimbodyEngine::transformPosition ( const SimTK::State & s , const PhysicalFrame & aBodyFrom , const SimTK::Vec3 & aPos , SimTK::Vec3 & rPos ) const (Deprecated) Use Frame::findStationLocationInGround() instead. Friends And Related Function Documentation ◆ Body friend class Body friend ◆ Constraint friend class Constraint friend ◆ Coordinate friend class Coordinate friend ◆ CoordinateCouplerConstraint friend class CoordinateCouplerConstraint friend ◆ Joint friend class Joint friend ◆ WeldConstraint friend class WeldConstraint friend Member Data Documentation ◆ _model Model * OpenSim::SimbodyEngine::_model Pointer to the model that owns this dynamics engine. The documentation for this class was generated from the following file: OpenSim/Simulation/SimbodyEngine/SimbodyEngine.h OpenSim SimbodyEngine Generated on Thu Mar 21 2024 15:03:00 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1SimbodyEngine.html",
      "title": "API: OpenSim::SimbodyEngine Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1SimbodyEngine.html"
      ],
      "content_type": "api",
      "position": 10,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "df61b1e8-76e7-4d19-9be2-9b463f8e4156",
    "document_id": "doc_100",
    "content": "Tibial forces in independently ambulatory children with spina bifida Share Follow Project Follow publicly Follow privately Unfollow See followers (0) List Map More info 2380 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Bone strength data, kinematic and kinetic overground walking data, and simulation results from 16 independently ambulatory children with spina bifida and 16 age- and sex-matched children with typical development. Download Latest Releases Dataset and Code: repo.zip Experimental motion capture and bone strength data and simulation results from 16 independently ambulatory children with spina bifida and 16 age- and sex-matched children with typical development. Additional motion capture and EMG data and simulation results for 6 independently ambulatory children with spina bifida and 1 child with typical development. Custom scripts were used to calculate joint kinematics, moments, and forces. Post-simulation analyses were conducted to compare these waveforms between the group with spina bifida and the group with typical development. The manuscript using these data and simulations can be found here: Lee MR, Hicks JL, Wren TAL, and Delp SL (2022). Independently ambulatory children with spina bifida experience near-typical knee and ankle joint moments and forces during walking. Gait and Posture, 99:1-8. https://doi.org/10.1016/j.gaitpost.2022.10.010 64 downloads 1 forum posts Last updated Oct 24, 2022 Project Statistics Suggest Idea Marissa Lee Sinopoli Tishya Wren Jennifer Hicks Scott Delp News File updated: repo.zip Oct 24, 2022 We updated our analyses with our paper revision!. Code and analyses have been updated. See all News People also viewed JointReaction: OpenSim joint load analysis plugin Spasticity model in OpenSim A three-dimensional musculoskeletal model of the dog Evertor and invertor muscle co-activation... Muscle contributions to mass center... Multidimensional Cubic B-Spline Examining Muscle Forces during Sit to Stand Transfer... SPAN: Simulated parallel annealing by neighborhood See all Analysis of arm swing during human walking OpenSim OpenSim Moco Enhanced Model Assembly for Intervertebral... Human Posture and Balance Platform in OpenSim Sensory Components for Simulating Postural Feedback... Sky Higher: Dynamic Optimization of Maximum Jump Height... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/sb_force/",
      "title": "SimTK: Tibial forces in independently ambulatory children with spina bifida: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "sb_force"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4eb1941b-4e36-4a69-a3d1-ab7cd0f3b9d5",
    "document_id": "doc_74",
    "content": "Muscle contributions to mass center accelerations over a range of running speeds Share Follow Project Follow publicly Follow privately Unfollow See followers (9) List Map More info 603 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Hamner SR and Delp SL. Muscle contributions to fore-aft and vertical body mass center accelerations over a range of running speeds. Journal of Biomechanics; 46(4), 780-7. (2013) Abstract View Running is a bouncing gait in which the body mass center slows and lowers during the first half of the stance phase; the mass center is then accelerated forward and upward into flight during the second half of the stance phase. Muscle-driven simulations can be analyzed to determine how muscle forces accelerate the body mass center. However, muscle-driven simulations of running at different speeds have not been previously developed, and it remains unclear how muscle forces modulate mass center accelerations at different running speeds. Thus, to examine how muscles generate accelerations of the body mass center, we created three-dimensional muscle-driven simulations of ten subjects running at 2.0, 3.0, 4.0, and 5.0 m/s. An induced acceleration analysis determined the contribution of each muscle to mass center accelerations. Our simulations included arms, allowing us to investigate the contributions of arm motion to running dynamics. Analysis of the simulations revealed that soleus provides the greatest upward mass center acceleration at all running speeds; soleus generates a peak upward acceleration of 19.8 m/s/s (i.e., the equivalent of approximately 2.0 bodyweights of ground reaction force) at 5.0 m/s. Soleus also provided the greatest contribution to forward mass center acceleration, which increased from 2.5 m/s/s at 2.0 m/s to 4.0 m/s/s at 5.0 m/s. At faster running speeds, greater velocity of the legs produced larger angular momentum about the vertical axis passing through the body mass center; angular momentum about this vertical axis from arm swing simultaneously increased to counterbalance the legs. We provide open-access to data and simulations from this study for further analysis in OpenSim at simtk.org/home/nmbl_running, enabling muscle actions during running to be studied in unprecedented detail. Repository of experimental data (i.e., motion capture, EMG, GRFs), subject-specific models, and muscle-driven simulation results of 10 male subject running across a range of speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Download Latest Releases Raw EMG Data: RAW_EMG_DATA.zip Subject 01: subject01.zip Subject 02: subject02.zip Subject 03: subject03.zip Subject 04: subject04.zip Subject 08: subject08.zip Subject 10: subject10.zip Subject 11: subject11.zip Subject 17: subject17.zip Subject 19: subject19.zip Subject 20: subject20.zip License: Raw EMG Data , Subject",
    "metadata": {
      "source": "https://simtk.org/projects/nmbl_running/",
      "title": "SimTK: Muscle contributions to mass center accelerations over a range of running speeds: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmbl_running"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "22c0cb82-f7ea-48df-894d-db05eda74aad",
    "document_id": "doc_74",
    "content": "and simulations from this study for further analysis in OpenSim at simtk.org/home/nmbl_running, enabling muscle actions during running to be studied in unprecedented detail. Repository of experimental data (i.e., motion capture, EMG, GRFs), subject-specific models, and muscle-driven simulation results of 10 male subject running across a range of speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Download Latest Releases Raw EMG Data: RAW_EMG_DATA.zip Subject 01: subject01.zip Subject 02: subject02.zip Subject 03: subject03.zip Subject 04: subject04.zip Subject 08: subject08.zip Subject 10: subject10.zip Subject 11: subject11.zip Subject 17: subject17.zip Subject 19: subject19.zip Subject 20: subject20.zip License: Raw EMG Data , Subject 01 , Subject 02 , Subject 03 , Subject 04 , Subject 08 , Subject 10 , Subject 11 , Subject 17 , Subject 19 , Subject 20 These simulations were created using OpenSim and the workflow included Scale, Inverse Kinematics (IK), Reduced Residual Algorithm (RRA), Computed Muscle Control (CMC), and Induced Acceleration Analysis (IAA). The following resources provide instructions for using these tools and information on how to generate and evaluate musculoskeletal simulations: • OpenSim User's Guide | http://stanford.io/17cia3U • OpenSim Support Webpage | http://stanford.io/17ciwrn • Webinar on Simulations of Running | http://bit.ly/oDIUOa Muscle contributions to fore-aft and vertical body mass center accelerations over a range of running speeds from Sam Hamner on Vimeo . The goal of this study was to determine how muscles and arm swing affect dynamics of the body at different running speeds. Specifically, we determined how muscles contribute to mass center accelerations during the stance phase of running, and how the arms act to counterbalance the motion of the legs. We achieved this goal by creating and analyzing muscle-driven, forward dynamic simulations of ten subjects running across a range of speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. An induced acceleration analysis determined the contribution of each muscle to mass center accelerations. Our simulations also included arm motion, allowing us to investigate the contributions of arm swing to running dynamics. These simulations use experimental data as inputs, so we also collected data to characterize joint angles, joint moments, and ground reaction forces at different running speeds. 4,002 downloads 3 forum posts 9 followers Last updated Jan 17, 2024 Project Statistics Join Mailing Lists Suggest Idea Sam Hamner Scott Delp Downloads This project serves as a repository of experimental data (i.e., motion capture, EMG, GRFs), subject-specific models, and resulting muscle-driven simulation results for 10 male subjects running at multiple speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Data was collected on an instrumented treadmill in the Human Performance Lab at Stanford University. All subjects were experienced runners, each reporting to run at least 30 miles per week. See all Downloads People also viewed Muscle-actuated Simulation of Human Running Hamstring Function During Running Simbody: Multibody Physics API Sam's Simulations A three-dimensional musculoskeletal model of the dog Multiple Speed Walking Simulations Examining Muscle Forces during Sit to Stand Transfer... Efficient Methods for Multi-Domain Biomechanical... See all OpenArm: Volumetric & Time Series Models of",
    "metadata": {
      "source": "https://simtk.org/projects/nmbl_running/",
      "title": "SimTK: Muscle contributions to mass center accelerations over a range of running speeds: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmbl_running"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5ffd9d65-3344-4cf8-95b6-afd3cb0cb767",
    "document_id": "doc_74",
    "content": "10 male subjects running at multiple speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Data was collected on an instrumented treadmill in the Human Performance Lab at Stanford University. All subjects were experienced runners, each reporting to run at least 30 miles per week. See all Downloads People also viewed Muscle-actuated Simulation of Human Running Hamstring Function During Running Simbody: Multibody Physics API Sam's Simulations A three-dimensional musculoskeletal model of the dog Multiple Speed Walking Simulations Examining Muscle Forces during Sit to Stand Transfer... Efficient Methods for Multi-Domain Biomechanical... See all OpenArm: Volumetric & Time Series Models of Muscle... MB Knee: Multibody Models of the Human Knee Chand's Simulations Multidimensional Cubic B-Spline OpenSim Analysis of arm swing during human walking Calibrated EMG-Informed Neuromusculoskeletal... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/nmbl_running/",
      "title": "SimTK: Muscle contributions to mass center accelerations over a range of running speeds: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmbl_running"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "24fdbcd5-832c-4003-ab57-7c1b67f9322a",
    "document_id": "doc_160",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53114269/About+OpenSim",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53114269",
        "About+OpenSim"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f4c93a09-7800-41a6-9f79-0add78a83e97",
    "document_id": "doc_84",
    "content": "1) develop a model that would be adequate in analyzing the sit to stand (STS) transfer motion 2) examine individual muscle forces, their contributions to the acceleration of the center of mass, as well as inter-limb differences in muscle forces produced during the STS transfer in a young, healthy population. Download Latest Releases osufullbody_sts: Caruthers_FullBodyModel2016_Scaled_Arms.osim osufullbody_sts: Geometry_FINAL.zip Sample STS Transfer Data: Sample Data.zip License: Sample STS Transfer Data Our STS transfer analysis required a three-dimensional musculoskeletal model that had lower extremities, flexibility in the lumbar vertebrae, and arms. Capturing the dynamics of the lower back and arms was critical for 1) ensuring more dynamically accurate calculations of muscle forces and induced accelerations and 2) developing benchmark simulations for young healthy adults using a model that could be applied in future studies to capture possible compensatory strategies (e.g., the use of arms or torso) in various populations completing the STS transfer. Because no previously developed model met these criteria, we created a three-dimensional musculoskeletal model, the Full Body Model 2016, by combining these models: Lower Limb Model 2010, Musculoskeletal Model of the Lumbar Spine, MoBL-ARMS Upper Limb Model, and Head and Neck Musculoskeletal Biomechanics Model. It has 46 degrees of freedom with 194 Hill-type muscle-tendon actuators. A description of how the model was assembled and evaluated is in Appendix 1 of our manuscript, Muscle Forces and Their Contributions to Vertical and Horizontal Acceleration of the Center of Mass during Sit-to-Stand Transfer in Young, Healthy Adults (see publications). Watch this video to get a sneak peek of STS transfer simulation with the Full Body Model 2016. http://www.youtube.com/v/j-o94qfJKvM &showsearch=0&rel=0&fs=1&autoplay=0≈=%2526fmt%3D18\" name=\"movie\" /> View on YouTube 1,813 downloads 4 forum posts 10 followers Last updated Apr 27, 2020 Project Statistics Join Mailing Lists Suggest Idea Elena Caruthers People also viewed Muscle contributions to mass center... Analysis of arm swing during human walking Sam's Simulations OpenSim A three-dimensional musculoskeletal model of the dog Evertor and invertor muscle co-activation... Multiple Speed Walking Simulations Spasticity model in OpenSim See all OpenSim Moco Hamstring Function During Running Full-body Musculoskeletal Model of the Lumbar... SPAN: Simulated parallel annealing by neighborhood Multidimensional Cubic B-Spline Chand's Simulations Tibial forces in independently ambulatory children... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/osufullbody_sts/",
      "title": "SimTK: Examining Muscle Forces during Sit to Stand Transfer with Full Body Model 2016: Project Home",
      "section": "Examining Muscle Forces during Sit to Stand Transfer with Full Body Model 2016 Share Follow Project Follow publicly Follow privately Unfollow See followers (10) List Map More info 951 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow The purpose of this study was to:",
      "hierarchy": [
        "projects",
        "osufullbody_sts"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9b05d770-c789-44cc-9bdb-209ca981d7c6",
    "document_id": "doc_20",
    "content": "SimVascular SimVascular is a freely available open source software platform for image-based modeling and cardiovascular blood flow simulation. The community uses SimVascular for construction of patient-specific anatomic vascular models, and finite element simulations of hemodynamics and wall biomechanics. SimVascular provides a complete pipeline from medical image data to simulation results and analysis. Featured projects Related communities Recently updated projects total projects 2 projects with downloads See all community projects Add project to community News SimVascular Workshop at SB3C 2022 June 23rd SimVascular: Cardiovascular Modeling and Simulation May 26, 2022 Workshop at SB3C Conference June 13, 2021 SimVascular: Cardiovascular Modeling and Simulation Jun 7, 2021 Youtube Tutorial Videos for SimVascular SimVascular: Cardiovascular Modeling and Simulation Aug 28, 2020 Publications Updegrove, A., Wilson, N.M., Merkow, J., Lan, H., Marsden, A.L., Shadden, S. C., “SimVascular - An Open Source Pipeline for Cardiovascular Simulation,” Annals of Biomedical Engineering, Vol 45 (3), pp. 525-541 SimVascular: An Open Source Pipeline for Cardiovascular Simulation Discussion Re: 1Dsover results SimVascular: Cardiovascular Modeling and Simulation Application Mar 26, 2025 Re: reading centerline from VMTK and compute_centerlines does not work SimVascular: Cardiovascular Modeling and Simulation Application Mar 26, 2025 Re: Deformable wall simulation with CMM: Warning and Lacks in the documentation SimVascular: Cardiovascular Modeling and Simulation Application Mar 24, 2025 Administrators Shawn Shadden Nathan Wilson Joy Ku Hongzhi Lan SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/communityPage.php?cat=1003&sort=date&page=0&srch=&",
      "title": "SimTK: Community",
      "section": "",
      "hierarchy": [
        "category",
        "communityPage.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f2b6b65c-164e-4fa0-bead-a50381018f5c",
    "document_id": "doc_150",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/105349122/Join+the+Community",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "105349122",
        "Join+the+Community"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ffad959b-ace0-4ea0-9d1f-fc510687234c",
    "document_id": "doc_95",
    "content": "Hamstring Function During Running Share 642 This is a private project. You must be a member to view its contents. The goal of this project is to determine the contributions of the hamstrings and other muscled to joint accelerations at the hip and knee during running The goal of this project is to determine the contributions of the hamstrings and other muscled to joint accelerations at the hip and knee during running Denny Delp Sam Hamner People also viewed Muscle contributions to mass center... Muscle-actuated Simulation of Human Running EMG-informed Computed Muscle Control for Dynamic... Sam's Simulations How much muscle strength is required to walk in... Multiple Speed Walking Simulations OpenArm: Volumetric & Time Series Models of Muscle... Muscle function of overground running across a range of... See all Stroke gait Chand's Simulations Simulating Ideal Assistive Devices to Reduce the... How Tendon Compliance Affects the Metabolic Cost... Quantification of participant-specific iliotibial band... UW Pipeline Musculoskeletal Modelling of Hopping in Elastic... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/runham",
      "title": "SimTK: Hamstring Function During Running: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "runham"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7d170e2f-39be-41fb-850e-569e7730a9b5",
    "document_id": "doc_106",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/overview?homepageId=53084162",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "overview"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c043d8e1-ab93-4e60-a7b3-091dc2804894",
    "document_id": "doc_64",
    "content": "Muscle-Driven Simulations and Experimental Data... OpenSense: Validation of IMU-based estimates... OpenSim Predicting gait adaptations due to plantarflexor... Predictive Simulation of Loaded and Inclined... Predictive Simulation of Standing Long Jumps... Predictive simulations of cerebellar... SCONE: Open Source Software for Predictive... See all Shoulder model personalization Sky Higher: Dynamic Optimization of Maximum Jump Height... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/users/ongcf",
      "title": "SimTK: Carmichael Ong",
      "section": "Carmichael Ong Stanford University Contact Member since Jan 19, 2012 Member of 10 projects Total forum posts: 407 Last forum post: Feb 12, 2025 Projects Carmichael Ong is a member of the following projects:",
      "hierarchy": [
        "users",
        "ongcf"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e1ea4ba8-d938-4348-9a91-2284aaf4c5d1",
    "document_id": "doc_18",
    "content": "OpenSim OpenSim is a freely available software project for musculoskeletal modeling and dynamic simulation. The community uses OpenSim to uncover the biomechanical causes of movement abnormalities and to design improved treatments. Individuals around the world contribute models, scripts, data, and plugins to enhance the software. Featured projects Related communities Recently updated projects total projects 17 projects with downloads See all community projects Add project to community News OpenSim 4.5 Now Available OpenSim Mar 8, 2024 Webinar: Energetics and Big Data Approach Explain Ecological Running Speeds OpenSim Aug 16, 2022 Webinar: Estimating Energy Expenditure during Exercise Using Wearable Sensors OpenSim Apr 25, 2022 Publications The Neuromusculoskeletal Modeling Pipeline: MATLAB-based Model Personalization and Treatment Optimization Functionality for OpenSim Bianco NA, Franks PW, Hicks JL, Delp SL (2022) Coupled exoskeleton assistance simplifies control and maintains metabolic benefits: A simulation study. PLOS ONE 17(1): e0261318. https://doi.org/10.1371/journal.pone.0261318 Christopher L Dembia, Nicholas A Bianco, Antoine Falisse, Jennifer L Hicks, Scott L Delp. OpenSim Moco: Musculoskeletal optimal control. PLoS Computational Biology; doi: https://doi.org/10.1371/journal.pcbi.1008493 Discussion Re: MocoTrack - GRF Parameter Tuning & Convergence Issues OpenSim Moco Mar 29, 2025 Re: Tutorial may conflict with opensim 4.5 OpenSim Mar 28, 2025 SO runs OK in gui but error in API OpenSim Mar 27, 2025 Administrators Ajay Seth Ayman Habib Jennifer Hicks Joy Ku SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/communityPage.php?cat=1001&sort=date&page=0&srch=&",
      "title": "SimTK: Community",
      "section": "",
      "hierarchy": [
        "category",
        "communityPage.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "41f2b744-6ac2-41df-91d0-b9d273b5fcdf",
    "document_id": "doc_173",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53088325/Teaching+Materials",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53088325",
        "Teaching+Materials"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f5e87b9c-4137-4463-a198-2b9595f2c96f",
    "document_id": "doc_7",
    "content": "Myosin Computational methods are providing new insights into our understanding of myosin, a motor protein critical for muscle contractions. Featured projects Recently updated projects total projects 26 projects with downloads Search projects in this category News OpenSim gets high marks as a multibody system simulator Simbody: Multibody Physics API Aug 3, 2015 Macromolecular Simulation Software Workshop featuring OpenMM OpenMM Jul 15, 2015 OpenMM 6.1 Available OpenMM Sep 30, 2014 Publications P. Eastman, J. Swails, J. D. Chodera, R. T. McGibbon, Y. Zhao, K. A. Beauchamp, L.-P. Wang, A. C. Simmonett, M. P. Harrigan, C. D. Stern, R. P. Wiewiora, B. R. Brooks, and V. S. Pande. \"OpenMM 7: Rapid development of high performance algorithms for molecular dynamics.\" PLOS Comp. Biol. 13(7): e1005659. David A. Sivak, John D. Chodera, and Gavin E. Crooks. Phys. Rev. X 3, 011007 M. Senne, B. Trendelkamp-Schroer, A.S.J.S. Mey, C. Schütte, F. Noe: \"EMMA - A software package for Markov model building and analysis\". J. Chem. Theo. Comput 2012, 8 (7), pp 2223–2238 DOI: 10.1021/ct300274u Discussion THIS FORUM IS MOVING TO GITHUB! OpenMM Feb 24, 2025 Re: Help Needed with Drude Modeling for Molten Salts in OpenMM OpenMM Feb 19, 2025 Re: Combining AMD integrator with Langevin integrator OpenMM Feb 13, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=308&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cdd56706-269e-44f3-ab74-e968b32cb5dc",
    "document_id": "doc_122",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089924/Excitation+Editor",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089924",
        "Excitation+Editor"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8e292f24-fceb-4dc0-a46c-9b5d8b59f050",
    "document_id": "doc_175",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/99614726/Orthopaedics",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "99614726",
        "Orthopaedics"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0f48854c-3b59-4420-8326-44cf65b5260c",
    "document_id": "doc_138",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089593/Probes",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089593",
        "Probes"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "82fde576-8df4-4c46-9972-88eeaa2a5eb3",
    "document_id": "doc_70",
    "content": "GaitExtractToolbox171.zip License: GaitExtractToolbox This toolbox is of benefit to musculoskeletal modellers in the field of biomechanics / bioengineering to assist extracting kinematic, kinetic, and EMG information directly from a C3D file for Matlab manipulation or for input to OpenSim biosimulation software. The scripts can be configured for any laboratory configuration. This software is free without warranty but I do ask for acknowledgement if used in publications. Free download is available with documentation and two examples included. Main features of this script include: Custom markerset extraction Foot-plate detection algorithm Kinetic extraction (ground reaction forces / moments) Center of pressure calculation Transformation to customizable model coordinate system Custom EMG acquisition & processing tools XML file production (for OpenSim) Lab customizable The scripts require Motion Labs C3D Server software (freeware) and XML Toolbox (Marc Molinari)(freeware) which is included with the script download. Also requires Matlab 2008 or greater (32 bit only) with the Signal Processing Toolbox. Additional C3D software may be useful and these are available at http://www.c3d.org/c3dapps.html . Review the included manual for version updates and additions. Please inform me of bugs / suggestions to improve as this will be an ongoing project. 6,689 downloads 45 forum posts 12 followers Last updated Jul 12, 2012 Project Statistics Suggest Idea Tim Dorn Related Projects The project owner recommends the following other projects: Tim's OpenSim Utilities Muscle function of overground running across a range of speeds People also viewed C3D Extraction Toolbox GUI Full Body Model for use in Dynamic Simulations of... Matlab MOtion data elaboration TOolbox for... Cal Poly Human Motion Biomechanics Lab Knee Joint... STO / TRC / MOT files plotter Neuromusculoskeletal Modeling (NMSM) Pipeline OpenSim Utilities Lee-Son's Toolbox: a Toolbox that Converts VICON... See all OpenSim Motion and Simulation Data OpenSIM users group: University of Delaware A Visualization Tool for OpenSim Platform for Dynamic Simulation and Control of... Tim's OpenSim Utilities OpenSim Utilities for Gait and Movement Analysis Dynamic Simulation of Movement Based on OpenSim and... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/c3dtoolbox",
      "title": "SimTK: C3D Extraction Toolbox: Project Home",
      "section": "C3D Extraction Toolbox Share Follow Project Follow publicly Follow privately Unfollow See followers (12) List Map More info 341 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Team members Downloads Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Team members Downloads Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provide a simple and time efficient way to extract raw gait data from a C3D file Download Latest Releases GaitExtractToolbox:",
      "hierarchy": [
        "projects",
        "c3dtoolbox"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d2e54894-8d93-4817-b4de-9caad41cbc1a",
    "document_id": "doc_187",
    "content": "API 4.5 For C++ developers Namespaces | Classes | Typedefs | Enumerations | Functions | Variables OpenSim Namespace Reference The Moco interface is contained within the OpenSim namespace. More... Namespaces DebugUtilities Classes class AbstractChannel One of the values of an Output . More... class AbstractDataTable AbstractDataTable is the base-class of all DataTable_(templated) allowing storage of DataTable_ templated on different types to be stored in a container like std::vector. More... class AbstractGeometryPath A base class that represents a path that has a computable length and lengthening speed. More... class AbstractInput A specialized Socket that connects to an Output signal is an Input . More... class AbstractOutput Output formalizes the access to a value of interest computed by the owning Component . More... class AbstractPathPoint An abstract class implementing a path point interface. More... class AbstractProperty An abstract property is a serializable (name,value) pair, for which we do not know the type of the value. More... class AbstractReporter This abstract class represents a Reporter that generates a report from values generated by Components in a Model during a simulation. More... class AbstractSocket A Socket formalizes the dependency between a Component and another object (typically another Component ) without owning that object. More... class AbstractTool An abstract class for specifying the interface for an investigation. More... class AbstractValueArray ValueArray (of type T) represents an array of SimTK::Value (of type T). More... class AccelerationMotion This class is a thin wrapper to Simbody's SimTK::Motion for prescribing the acceleration of all degrees of freedom (UDot), and is used when enforcing dynamics using implicit differential equations (UDot is supplied by the solver, not by Simbody). More... class AckermannVanDenBogert2010Force This class is still under development. More... class ActivationCoordinateActuator Similar to CoordinateActuator (simply produces a generalized force) but with first-order linear activation dynamics. More... class ActivationFiberLengthMuscle A base class representing a two-state muscle-tendon actuator. More... class ActivationFiberLengthMuscle_Deprecated A base class representing a muscle-tendon actuator. More... class ActiveForceLengthCurve This class serves as a serializable ActiveForceLengthCurve , commonly used to model the active element in muscle models. More... class Actuation A class for recording the basic actuator information for a model during a simulation. More... class Actuator Base class for an actuator (e.g., a torque motor, muscle, ...) that requires a generic external input (a vector of controls) to generate force. More... class ActuatorForceProbe ActuatorForceProbe is a ModelComponent Probe for computing an operation on a force or sum of forces in the model during a simulation. More... class ActuatorForceTarget A Computed Muscle Control ( CMC ) optimization target for controlling dynamic systems whose actuators may be themselves governed by differential equations, meaning there may be non-linear behavior and delays in force production. More... class ActuatorForceTargetFast A Computed Muscle Control ( CMC ) optimization target for controlling dynamic systems whose actuators may be themselves governed by differential equations, meaning there may be non-linear behavior and delays in force production. More... class ActuatorPowerProbe ActuatorPowerProbe is a ModelComponent Probe for computing an operation on a actuator power or sum of actuator powers in the",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c4da5131-bdf3-4611-b1fd-d1cbda7421a7",
    "document_id": "doc_187",
    "content": "the model during a simulation. More... class ActuatorForceTarget A Computed Muscle Control ( CMC ) optimization target for controlling dynamic systems whose actuators may be themselves governed by differential equations, meaning there may be non-linear behavior and delays in force production. More... class ActuatorForceTargetFast A Computed Muscle Control ( CMC ) optimization target for controlling dynamic systems whose actuators may be themselves governed by differential equations, meaning there may be non-linear behavior and delays in force production. More... class ActuatorPowerProbe ActuatorPowerProbe is a ModelComponent Probe for computing an operation on a actuator power or sum of actuator powers in the model during a simulation. More... class Analysis An abstract class for specifying the interface for an analysis plugin. More... class AnalysisSet A class for holding and managing a set of integration callbacks for a model. More... class AnalyticGeometry Abstract class for analytical geometry (e.g. More... class AnalyzeTool An abstract class for specifying the interface for an investigation. More... class APDMDataReader APDMDataReader is a class that reads files produced by IMU manufacturer APDM and produces datatables from them. More... class APDMDataReaderSettings APDMDataReaderSettings is a class that reads files produced by IMU manufacturer APDM and produces datatables from them. More... class Appearance A class that holds the Appearance properties of Geometry displayed in the OpenSim Visualizer. More... class Array A class for storing an array of values of type T. More... class ArrayPtrs class Arrow Arrow is a Geometry subclass used to represent an arrow. More... class AssemblySolver Solve for the coordinates (degrees-of-freedom) of the model that satisfy the set of constraints imposed on the model as well as set of desired coordinate values. More... class BallJoint A class implementing a Ball joint. More... class Bhargava2004MuscleMetabolicsProbe Bhargava2004MuscleMetabolicsProbe is a Probe ModelComponent for computing the net metabolic energy rate of a set of Muscles in the model during a simulation. More... class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter Documentation for this class has been provided with the documentation for the Bhargava2004MuscleMetabolicsProbe class. More... class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet MetabolicMuscleParameterSet is a class that holds the set of MetabolicMuscleParameters for each muscle. More... class Bhargava2004SmoothedMuscleMetabolics This class implements the metabolic energy model of Bhargava et al (2004) and provides an option to use smooth (i.e., twice continuously differentiable) approximations. More... class Bhargava2004SmoothedMuscleMetabolics_MuscleParameters Object class that holds the metabolic parameters required to calculate metabolic power for a single muscle. More... class Blankevoort1991Ligament This class implements a nonlinear spring ligament model introduced by Blankevoort et al. (1991) [1] and further described in Smith et al. (2016) [2]. More... class Body An OpenSim::Body is a PhysicalFrame (reference frame) with associated inertia specified by its mass, center-of-mass located in the PhysicalFrame , and its moment of inertia tensor about the center-of-mass. More... class BodyActuator Apply a spatial force (that is, [torque, force]) on a given point of the given body. More... class BodyKinematics A class for recording the kinematics of the bodies of a model during a simulation. More... class BodyScale A class implementing a set of parameters describing how to scale a body segment. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "dcff30d3-1c2f-46a2-8242-fd924163b47e",
    "document_id": "doc_187",
    "content": "et al. (1991) [1] and further described in Smith et al. (2016) [2]. More... class Body An OpenSim::Body is a PhysicalFrame (reference frame) with associated inertia specified by its mass, center-of-mass located in the PhysicalFrame , and its moment of inertia tensor about the center-of-mass. More... class BodyActuator Apply a spatial force (that is, [torque, force]) on a given point of the given body. More... class BodyKinematics A class for recording the kinematics of the bodies of a model during a simulation. More... class BodyScale A class implementing a set of parameters describing how to scale a body segment. More... class BodyScaleSet A class for holding a set of body scales. More... class BodySet A class for holding a set of bodies. More... class Brick A class to represent Brick geometry. More... class BufferedOrientationsReference Subclass of OrientationsReference that handles live data by providing a DataQueue that allows clients to push data into and allows the InverseKinematicsSolver to draw data from for solving. More... class BushingForce A class implementing a Bushing Force . More... class C3DFileAdapter C3DFileAdapter reads a C3D file into markers and forces tables of type TimeSeriesTableVec3. More... class ClutchedPathSpring The ClutchedPathSpring is an actuator that has passive path spring behavior only when the clutch is engaged. More... class CMC Computed Muscle Control ( CMC ) is an optimization-based control technique designed specifically for controlling dynamic models that are actuated by redundant sets of actuators whose force-generating properties may be nonlinear and governed by differential equations (and so have delays in force production). More... class CMC_Joint A class for specifying the tracking task for a joint. More... class CMC_Orientation A class for tracking the orientation of a body. More... class CMC_Point A class for specifying and computing parameters for tracking a point. More... class CMC_Task An abstract base class for specifying a task objective for a dynamic simulation. More... class CMC_TaskSet An class for holding and managing a set of tasks. More... class CMCTool An abstract class for specifying the interface for an investigation. More... class ColumnIndexOutOfRange class Component The abstract Component class defines the interface used to add computational elements to the underlying SimTK::System (MultibodySystem). More... class ComponentAlreadyPartOfOwnershipTree class ComponentFilter A class to specify a filter to be used to iterate through components. More... class ComponentFilterAbsolutePathNameContainsString A component is considered a match if its absolute path name contains the given string. More... class ComponentFilterMatchAll ComponentFilterMatchAll is a trivial Filter that matches all components. More... class ComponentHasNoName Component Exceptions. More... class ComponentHasNoSystem class ComponentIsAnOrphan class ComponentIsRootWithNoSubcomponents class ComponentList Collection (linked list) of components to iterate through. More... class ComponentListIterator Class used to iterate over subcomponents of a specific type (by default, any Component ). More... class ComponentNotFound class ComponentNotFoundOnSpecifiedPath class ComponentPath A representation of a path within a Component tree. More... class ComponentSet A class for holding a set of miscellaneous model components. More... class Condition A parent class for implementing an OpenSim Condition . More... class ConditionalPathPoint A class implementing a conditional path point, which is a point",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3f1ef163-af8a-40e1-be45-89fc2ccc9bec",
    "document_id": "doc_187",
    "content": "Filter that matches all components. More... class ComponentHasNoName Component Exceptions. More... class ComponentHasNoSystem class ComponentIsAnOrphan class ComponentIsRootWithNoSubcomponents class ComponentList Collection (linked list) of components to iterate through. More... class ComponentListIterator Class used to iterate over subcomponents of a specific type (by default, any Component ). More... class ComponentNotFound class ComponentNotFoundOnSpecifiedPath class ComponentPath A representation of a path within a Component tree. More... class ComponentSet A class for holding a set of miscellaneous model components. More... class Condition A parent class for implementing an OpenSim Condition . More... class ConditionalPathPoint A class implementing a conditional path point, which is a point that is active only for a specified range of a coordinate. More... class Cone A class to represent a Cone geometry. More... class ConnecteeNotSpecified class ConsoleReporter_ A reporter that simply prints quantities to the console (command window or terminal), perhaps to monitor the progress of a simulation as it executes. More... class Constant A class for representing a constant value. More... class ConstantCurvatureJoint A class implementing a ConstantCurvatureJoint joint. More... class ConstantDistanceConstraint A class implementing a constraint that maintains a constant distance between between two points on separate PhysicalFrames. More... class ConstantMuscleActivation This constant muscle activation model simply holds activation at the value that was provided most recently, and can be used to generate an activation signal without relying on an excitation signal. More... class Constraint A parent class for implementing a Simbody Constraint . More... class ConstraintSet A class for holding a set of constraints. More... class ContactGeometry This class represents the physical shape of an object for use in contact modeling. More... class ContactGeometrySet A class for holding a set of ContactGeometry components. More... class ContactHalfSpace This class represents a half space (that is, everything to one side of an infinite plane) for use in contact modeling. More... class ContactMesh This class represents a polygonal mesh for use in contact modeling. More... class ContactSphere This class represents a spherical object for use in contact modeling. More... class Control A class that represents a control in a dynamic simulation. More... class ControlConstant A class that represents a constant control curve. More... class Controller Controller is an abstract ModelComponent that defines the interface for an OpenSim Controller . More... class ControllerSet A class for holding and managing a set of controllers for a model. More... class ControlLinear A class that represents a piece-wise linear control curve. More... class ControlLinearNode A control node used to reconstruct a piecewise linear control. More... class ControlSet A class for holding and managing a set of controls for a dynamic simulation. More... class ControlSetController ControlSetController that simply assigns controls from a ControlSet . More... class Coordinate A Coordinate is a ModelComponent for managing the access and behavior of a model's generalized coordinate including its value, speed and acceleration (once system accelerations have been realized). More... class CoordinateActuator An actuator that applies a generalized force in the direction of a generalized coordinate. More... class CoordinateCouplerConstraint class CoordinateLimitForce Generate a force that acts to limit the range",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e9ca3fce-ed14-4833-b887-0282a0123563",
    "document_id": "doc_187",
    "content": "control node used to reconstruct a piecewise linear control. More... class ControlSet A class for holding and managing a set of controls for a dynamic simulation. More... class ControlSetController ControlSetController that simply assigns controls from a ControlSet . More... class Coordinate A Coordinate is a ModelComponent for managing the access and behavior of a model's generalized coordinate including its value, speed and acceleration (once system accelerations have been realized). More... class CoordinateActuator An actuator that applies a generalized force in the direction of a generalized coordinate. More... class CoordinateCouplerConstraint class CoordinateLimitForce Generate a force that acts to limit the range of motion of a coordinate. More... class CoordinateReference Reference value to be achieved for a specified coordinate that will be used via optimization and/or tracking. More... class CoordinateSet A class for holding a set of coordinates. More... class CorrectionController This is a simple feedback controller to be used in generating a forward dynamic simulation. More... class CSVFileAdapter CSVFileAdapter is a DelimFileAdapter that presets the delimiters appropriately for CSV files. More... class CustomJoint A class implementing a custom joint. More... class Cylinder A class to represent a Cylinder geometry. More... class DataAdapter DataAdapter is an abstract class defining an interface for reading/writing in/out the contents of a DataTable. More... class DataAdapterAlreadyRegistered class DataQueue_ DataQueue is a wrapper around the std::queue customized to handle data processing and synchronization, and limiting the interface to only the subset of operations needed for this use case. More... class DataQueueEntry_ This base class defines the interface for a DataQueue. More... class DataTable_ DataTable_ is an in-memory storage container for data with support for holding metadata (using the base class AbstractDataTable ). More... class DataTypeMismatch class DeGrooteFregly2016Muscle This muscle model was published in De Groote et al. More... class DelimFileAdapter DelimFileAdapter is a FileAdapter that reads and writes text files with given delimiters. More... class Delp1990Muscle_Deprecated A class implementing a SIMM muscle. More... class DiscreteController This component is used internally by Moco for passing a solver's control variables to a Model . More... class DiscreteForces This class is a thin wrapper to Simbody's SimTK::Force::DiscreteForces class. More... class DynamicsTool An abstract Tool for defining tools for performing a dynamics analysis with a given model. More... class ElasticFoundationForce This Force subclass implements an elastic foundation contact model. More... class Ellipsoid A class to represent an Ellipsoid geometry. More... class EllipsoidJoint A class implementing a Ellipsoid joint. More... class EmptyFileName class EmptyTable class EspositoMiller2018Force This contact model uses a continuous equation to transition between in and out of contact. More... struct Event Struct representing an event extracted from a C3D file. More... class Exception A class for basic exception functionality. More... class ExperimentalFrame ExperimentalFrame is a concrete Frame that represents the experimental value of a Frame and can be used to display its frame in the OpenSim Visualizer. More... class ExperimentalMarker ExperimentalMarker is a concrete Point that represents the experimental value of a Marker and can be used to display its location in the OpenSim Visualizer. More... class ExperimentalSensor A",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "87bae07e-221c-4db8-af0b-0be0470dab0d",
    "document_id": "doc_187",
    "content": "class EmptyTable class EspositoMiller2018Force This contact model uses a continuous equation to transition between in and out of contact. More... struct Event Struct representing an event extracted from a C3D file. More... class Exception A class for basic exception functionality. More... class ExperimentalFrame ExperimentalFrame is a concrete Frame that represents the experimental value of a Frame and can be used to display its frame in the OpenSim Visualizer. More... class ExperimentalMarker ExperimentalMarker is a concrete Point that represents the experimental value of a Marker and can be used to display its location in the OpenSim Visualizer. More... class ExperimentalSensor A class representing the experimental sensor, such as IMU , and its association to a model (component) in OpenSim . More... class ExpressionBasedBushingForce A class implementing a bushing force specified by expressions of the deflection between two bushing frames. More... class ExpressionBasedCoordinateForce class ExpressionBasedPointToPointForce A point-to-point Force who's force magnitude is determined by a user-defined expression, with the distance (d) and its time derivative (ddot) as variables. More... class ExternalForce An ExternalForce is a Force class specialized at applying an external force and/or torque to a body as described by arrays (columns) of a Storage object. More... class ExternalLoads A convenience class for managing ExternaForce(s) to be applied to a model. More... class FiberCompressiveForceCosPennationCurve This class serves as a serializable FiberCompressiveForceCosPennationCurve , which is used to ensure that the pennation angle approaches but never reaches an angle of 90 degrees. More... class FiberCompressiveForceLengthCurve This class serves as a serializable FiberCompressiveForceLengthCurve , which is used to ensure that the fiber cannot generate force at, nor shorten beyond a minimum normalized length. More... class FiberForceLengthCurve This class serves as a serializable FiberForceLengthCurve , commonly used to model the parallel elastic element in muscle models. More... class FileAdapter FileAdapter is a DataAdapter that reads and writes files with methods read and writeFile respectively. More... class FileDeletionThrower This class helps a user cause an exception within the code. More... class FileDeletionThrowerException Thrown by FileDeletionThrower::throwIfDeleted() . More... class FileDoesNotExist class FileExtensionNotFound class FileIsEmpty class FileRemover When an instance of this class is destructed, it removes (deletes) the file at the path provided in the constructor. More... class FirstOrderMuscleActivationDynamics Computes muscle activation using a modified version of the first-order dynamic models used by Thelen (2003) and Winters (1995). More... class Force This abstract class represents a force applied to bodies or generalized coordinates during a simulation. More... class ForceAdapter This acts as an adapter to allow a Force or Actuator to be used as a SimTK::Force. More... class ForceReporter A class for recording the Forces applied to a model during a simulation. More... class ForceSet A class for holding and managing a set of forces for a model. More... class ForceVelocityCurve This class serves as a serializable ForceVelocityCurve for use in muscle models. More... class ForceVelocityInverseCurve This class serves as a serializable ForceVelocityInverseCurve for use in equilibrium muscle models. More... class ForwardTool A concrete tool for performing forward dynamics simulations. More... class Frame A Frame is an",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "33502269-68e8-4d29-bae1-2439c7000ebe",
    "document_id": "doc_187",
    "content": "class ForceAdapter This acts as an adapter to allow a Force or Actuator to be used as a SimTK::Force. More... class ForceReporter A class for recording the Forces applied to a model during a simulation. More... class ForceSet A class for holding and managing a set of forces for a model. More... class ForceVelocityCurve This class serves as a serializable ForceVelocityCurve for use in muscle models. More... class ForceVelocityInverseCurve This class serves as a serializable ForceVelocityInverseCurve for use in equilibrium muscle models. More... class ForwardTool A concrete tool for performing forward dynamics simulations. More... class Frame A Frame is an OpenSim representation of a reference frame. More... class FrameGeometry A class to represent Frame geometry. More... class FreeJoint A class implementing a Free joint. More... class Function An abstract class for representing a function. More... class FunctionBasedBushingForce A class implementing a bushing force specified by functions of the frame deflections. More... class FunctionBasedPath A concrete class representing a path for muscles, ligaments, etc., based on Function objects. More... class FunctionSet A class for holding a set of functions. More... class FunctionThresholdCondition FunctionThresholdCondition is a concrete implementation of a Condition . More... class GCVSpline A class for representing a smooth function with a generalized cross-validation spline. More... class GCVSplineSet A class for holding a set of generalized cross-validated splines. More... class GenericModelMaker A class implementing a set of parameters describing a generic musculoskeletal model. More... class Geometry Class Geometry is intended to be used as the base class for all geometry that needs to be represented in the system, including mesh files, and built in analytic shapes. More... class GeometryPath A concrete class representing a path (muscle, ligament, etc.) based on geometry objects in the model (e.g., PathPoints and PathWraps). More... class GimbalJoint A class implementing a Gimbal joint. More... class Ground Ground is an inertial reference frame in which the motion of all Frames and points may conveniently and efficiently be expressed. More... class HuntCrossleyForce This force subclass implements a Hunt-Crossley contact model. More... class IKCoordinateTask class IKMarkerTask class IKTask class IKTaskSet class IMU IMU is a Model Component that represents a virtual IMU along with its Geometry for visualization. More... class IMUDataReader class IMUDataReporter A class for recording the readings off an IMU object placed on a model during a simulation. More... class IMUInverseKinematicsTool A Study that performs an Inverse Kinematics analysis with a given model. More... class IMUPlacer A class implementing a set of parameters describing how to place IMUs on a model to match placement of experimental sensors (IMUs) More... class IncorrectMetaDataLength class IncorrectNumColumnLabels class IncorrectNumColumns class IncorrectNumMetaDataKeys class IncorrectNumRows class IncorrectNumTokens class IncorrectTableType class IndexOutOfRange class InducedAccelerations A class to perform an Induced Accelerations analysis using a constraint- method of replacing external (contact) forces in order to determine the contributions of actuators to external reaction forces and thus model accelerations including that of the center-of-mass. More... class InducedAccelerationsSolver A Solver to compute the induced accelerations of an applied \"force\" acting on the model. More... class Input",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3d381c19-305e-4835-be99-ac859e320b8b",
    "document_id": "doc_187",
    "content": "A class implementing a set of parameters describing how to place IMUs on a model to match placement of experimental sensors (IMUs) More... class IncorrectMetaDataLength class IncorrectNumColumnLabels class IncorrectNumColumns class IncorrectNumMetaDataKeys class IncorrectNumRows class IncorrectNumTokens class IncorrectTableType class IndexOutOfRange class InducedAccelerations A class to perform an Induced Accelerations analysis using a constraint- method of replacing external (contact) forces in order to determine the contributions of actuators to external reaction forces and thus model accelerations including that of the center-of-mass. More... class InducedAccelerationsSolver A Solver to compute the induced accelerations of an applied \"force\" acting on the model. More... class Input An Input<Y> must be connected by an Output<Y> More... class InputNotConnected ComponentSocket Exceptions. More... class InputNotFound class InvalidArgument class InvalidCall class InvalidColumn class InvalidColumnLabel class InvalidComponentName class InvalidPropertyValue Property Exceptions. More... class InvalidRow class InvalidTable class InvalidTemplateArgument class InvalidTimeRange class InvalidTimestamp class InverseDynamicsSolver Solve for the generalized coordinate forces (1 per degree-of- freedom) that satisfy the unconstrained equations of motion given kinematics: q, u, u_dot. More... class InverseDynamicsTool A Tool that performs an Inverse Dynamics analysis with a given model. More... class InverseKinematicsSolver Solve for the coordinates (degrees of freedom) of the model that satisfy the set of constraints imposed on the model and the set of desired coordinate values. More... class InverseKinematicsTool A Tool that performs an Inverse Kinematics analysis with a given model. More... class InverseKinematicsToolBase A Tool that performs an Inverse Kinematics analysis with a given model. More... class IO A class for performing input and output with OpenSim API. More... class IOError class Joint An OpenSim Joint is an OpenSim::ModelComponent which connects two PhysicalFrames together and specifies their relative permissible motion as described in internal coordinates. More... class JointFramesAreTheSame class JointFramesHaveSameBaseFrame class JointHasNoCoordinates class JointInternalPowerProbe JointInternalPowerProbe is a ModelComponent Probe for computing an operation on internal joint power or sum of joint powers in the model during a simulation. More... class JointReaction An analysis for reporting the joint reaction loads from a model. More... class JointSet A class for holding a set of joints. More... class KeyExists class KeyMissing class KeyNotFound class Kinematics A class for recording the kinematics of the generalized coordinates of a model during a simulation. More... class LatinHypercubeDesign A class for generating Latin hypercube designs. More... class Ligament A class implementing a ligament. More... class LinearFunction A class for representing a LinearFunction . More... class LineGeometry LineGeometry is a utility class used to abstract a line segment. More... class Logger This is a singleton class (single instance) for logging messages and controlling how those messages are presented to the user. More... class LogSink Derive from this class to implement your own way of reporting logged messages. More... class Manager A class that manages the execution of a simulation. More... class Marker A class implementing a Mocap marker. More... class MarkerData A class implementing a sequence of marker frames from a TRC/TRB file. More... class MarkerFrame A class implementing a frame of marker data from a TRC/TRB file. More... class MarkerPair A class",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d957ca0a-4587-4a7b-a269-66006f185a6a",
    "document_id": "doc_187",
    "content": "to abstract a line segment. More... class Logger This is a singleton class (single instance) for logging messages and controlling how those messages are presented to the user. More... class LogSink Derive from this class to implement your own way of reporting logged messages. More... class Manager A class that manages the execution of a simulation. More... class Marker A class implementing a Mocap marker. More... class MarkerData A class implementing a sequence of marker frames from a TRC/TRB file. More... class MarkerFrame A class implementing a frame of marker data from a TRC/TRB file. More... class MarkerPair A class for holding the names of a pair of markers (for making measurements on a model). More... class MarkerPairSet A class for holding a set of SimmMarkerPairs. More... class MarkerPlacer A class implementing a set of parameters describing how to place markers on a model (presumably after it has been scaled to fit a subject). More... class MarkerSet A class for holding a set of markers. More... class MarkersReference Reference values to be achieved for specified Markers that will be used via optimization and/or tracking. More... class MarkerWeight class McKibbenActuator McKibben Pneumatic Actuator Model based on the simple cylindrical formulation described in J. More... class Measurement A class implementing a measurement (the distance between one or more pairs of markers, used to scale a model). More... class MeasurementSet A class for holding a set of measurements. More... class Mesh A class to represent Mesh geometry that comes from a file. More... class MetaDataLengthMismatch class MeyerFregly2016Force This contact model is from the following paper: Meyer A. More... class Millard2012AccelerationMuscle This class implements a 3 state (activation,fiber length and fiber velocity) acceleration musculo-tendon model that has several advantages over equilibrium musculo-tendon models: it is possible to simulate 0 activation, it requires fewer integrator steps to simulate, and physiological active force-length (with a minimum value of 0) and force velocity (with true asymptotes at the maximum shortening and lengthening velocities) curves can be employed. More... class Millard2012EquilibriumMuscle This class implements a configurable equilibrium muscle model, as described in Millard et al. (2013). More... class MissingHeader class MissingMetaData class MocoAccelerationTrackingGoal The squared difference between a model frame origin's linear acceleration and a reference acceleration value, summed over the frames for which a reference is provided, and integrated over the phase. More... class MocoAngularVelocityTrackingGoal The squared difference between a model frame's angular velocity and a reference angular velocity value, summed over the frames for which a reference is provided, and integrated over the phase. More... class MocoAverageSpeedGoal This goal requires the average speed of the system to match a desired average speed. More... class MocoBounds Small struct-like class to handle bounds. More... class MocoCasADiSolver This solver uses the CasADi library ( https://casadi.org ) to convert the MocoProblem into a generic nonlinear programming problem. More... class MocoCasADiSolverNotAvailable class MocoConstraintInfo Information for a given constraint in the optimal control problem. More... class MocoContactImpulseTrackingGoal More... class MocoContactImpulseTrackingGoalGroup More... class MocoContactTrackingGoal More... class MocoContactTrackingGoalGroup More... class MocoControlBoundConstraint This class constrains",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ec381862-b1aa-4f6e-a3a8-1f1ff9e5d5f1",
    "document_id": "doc_187",
    "content": "angular velocity value, summed over the frames for which a reference is provided, and integrated over the phase. More... class MocoAverageSpeedGoal This goal requires the average speed of the system to match a desired average speed. More... class MocoBounds Small struct-like class to handle bounds. More... class MocoCasADiSolver This solver uses the CasADi library ( https://casadi.org ) to convert the MocoProblem into a generic nonlinear programming problem. More... class MocoCasADiSolverNotAvailable class MocoConstraintInfo Information for a given constraint in the optimal control problem. More... class MocoContactImpulseTrackingGoal More... class MocoContactImpulseTrackingGoalGroup More... class MocoContactTrackingGoal More... class MocoContactTrackingGoalGroup More... class MocoControlBoundConstraint This class constrains any number of control signals from ScalarActautors to be between two time-based functions. More... class MocoControlGoal Minimize the sum of the absolute value of the controls raised to a given exponent, integrated over the phase. More... class MocoControlTrackingGoal More... class MocoControlTrackingGoalReference Associate a control variable with a column from the reference data. More... class MocoDirectCollocationSolver This is a base class for solvers that use direct collocation to convert an optimal control problem into a generic nonlinear programming problem. More... class MocoFinalBounds Used for specifying the bounds on a variable at the end of a phase. More... class MocoFinalOutputGoal This goal allows you to minimize or constrain a Model Output value at the end of a trajectory. More... class MocoFinalTimeGoal Endpoint cost for final time. More... class MocoFrameDistanceConstraint This path constraint enforces that the distance between the origins of pairs of model frames is kept between minimum and maximum bounds. More... class MocoFrameDistanceConstraintPair class MocoGoal A goal is a term in the cost functional to be minimized, or a set of endpoint constraints that must lie within provided bounds. More... class MocoInitialActivationGoal For all muscles with activation dynamics, the initial activation and initial excitation should be the same. More... class MocoInitialBounds Used for specifying the bounds on a variable at the start of a phase. More... class MocoInitialForceEquilibriumDGFGoal For all DeGrooteFregly2016Muscle s with explicit tendon compliance dynamics, constrain (or minimize) the error computed from the muscle-tendon force equilibrium equation. More... class MocoInitialOutputGoal This goal allows you to minimize or constrain a Model Output value at the beginning of a trajectory. More... class MocoInitialVelocityEquilibriumDGFGoal For DeGrooteFregly2016Muscle components with implicit tendon compliance dynamics, the initial tendon and fiber velocities are determined based the derivative of the linearized muscle-tendon equilibrium equation described in Millard et al. More... class MocoInverse This tool solves problems in which the kinematics are prescribed and you seek the actuator (e.g., muscle) behavior that may have given rise to the provided kinematics. More... class MocoInverseSolution This class holds the solution from MocoInverse . More... class MocoJointReactionGoal Minimize the sum of squares of specified reaction moment and force measures for a given joint, integrated over the phase. More... class MocoKinematicConstraint A model kinematic constraint to be enforced in the optimal control problem. More... class MocoMarkerFinalGoal The squared distance between a single model point location and reference location in the final state. More... class MocoMarkerTrackingGoal More... class MocoOrientationTrackingGoal The squared difference between",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2919e189-66b4-4d70-aecf-366701901f2d",
    "document_id": "doc_187",
    "content": "which the kinematics are prescribed and you seek the actuator (e.g., muscle) behavior that may have given rise to the provided kinematics. More... class MocoInverseSolution This class holds the solution from MocoInverse . More... class MocoJointReactionGoal Minimize the sum of squares of specified reaction moment and force measures for a given joint, integrated over the phase. More... class MocoKinematicConstraint A model kinematic constraint to be enforced in the optimal control problem. More... class MocoMarkerFinalGoal The squared distance between a single model point location and reference location in the final state. More... class MocoMarkerTrackingGoal More... class MocoOrientationTrackingGoal The squared difference between a model frame's orientation and a reference orientation value, summed over the frames for which a reference is provided, and integrated over the phase. More... class MocoOutputBase This abstract base class provides convenience methods and common interfaces for all Output-related MocoGoal 's. More... class MocoOutputConstraint class MocoOutputExtremumGoal This goal permits the integration of only positive or negative values from a model Output . More... class MocoOutputGoal This goal allows you to use model Outputs of type double, SimTK::Vec3, and SimTK::SpatialVec in the integrand of a goal. More... class MocoOutputPeriodicityGoal This goal allows you to minimize or constrain the difference of values from a Model Output from the beginning and end of a trajectory. More... class MocoOutputTrackingGoal This goal allows you to minimize the squared difference between a Model Output value and a user-defined function. More... class MocoParameter A MocoParameter allows you to optimize property values in an OpenSim Model . More... class MocoPathConstraint A path constraint to be enforced in the optimal control problem. More... class MocoPeriodicityGoal This goal enforces equality between initial and final variable values in the optimal control problem. More... class MocoPeriodicityGoalPair Create pair of variables for use with a MocoPeriodicityGoal . More... class MocoPhase The states, controls, dynamics, parameters, goals, and constraints for a phase of the problem. More... class MocoProblem A description of an optimal control problem, backed by OpenSim Model s. More... class MocoProblemInfo This class is mostly for internal use for MocoProblemRep to pass select information about a problem to the MocoGoal s and MocoPathConstraint s of the problem during initializeOnModel(). More... class MocoProblemRep The primary intent of this class is for use by MocoSolver s, but users can also use this class to apply parameter values to the model and evaluate cost terms. More... class MocoScaleFactor A scale factor is a scalar value optimized by Moco that can be used to scale a tracked reference quantity in the cost function. More... class MocoSolution Return type for MocoStudy::solve() . More... class MocoSolver Once the solver is created, you should not make any edits to the MocoProblem . More... class MocoStateTrackingGoal More... class MocoStepLengthAsymmetryGoal Minimize the error between a model's step time asymmetry and a specified target asymmetry value over a gait cycle. More... class MocoStepTimeAsymmetryGoal Minimize the error between a model's step time asymmetry and a specified target asymmetry value over a gait cycle. More... class MocoStepTimeAsymmetryGoalGroup A contact group includes a list",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 10,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b697d502-0891-4bfa-9744-09d03a1c5767",
    "document_id": "doc_187",
    "content": "value optimized by Moco that can be used to scale a tracked reference quantity in the cost function. More... class MocoSolution Return type for MocoStudy::solve() . More... class MocoSolver Once the solver is created, you should not make any edits to the MocoProblem . More... class MocoStateTrackingGoal More... class MocoStepLengthAsymmetryGoal Minimize the error between a model's step time asymmetry and a specified target asymmetry value over a gait cycle. More... class MocoStepTimeAsymmetryGoal Minimize the error between a model's step time asymmetry and a specified target asymmetry value over a gait cycle. More... class MocoStepTimeAsymmetryGoalGroup A contact group includes a list of contact force component paths in the model. More... class MocoStudy The top-level class for solving a custom optimal control problem. More... class MocoStudyFactory This class creates MocoStudies of common interest. More... class MocoSumSquaredStateGoal Minimize the sum of squared states, integrated over the phase. More... class MocoTool This is a base class for solving problems that depend on an observed motion using Moco's optimal control methods. More... class MocoTrack class MocoTrajectory The values of the variables in an optimal control problem. More... class MocoTrajectoryIsSealed This exception is thrown if you try to invoke most methods on MocoTrajectory while the trajectory is sealed. More... class MocoTranslationTrackingGoal The squared difference between a model frame's origin position and a reference position value, summed over the frames for which a reference is provided, and integrated over the phase. More... class MocoTropterSolver Solve the MocoProblem using the tropter direct collocation library. More... class MocoTropterSolverNotAvailable class MocoVariableInfo Bounds on continuous variables (states, controls, multipliers, etc). More... class MocoWeight This class contains a single property that holds a weighting factor to be used in a MocoGoal . More... class MocoWeightSet A container for Moco weights. More... class Model A concrete class that specifies the interface to a musculoskeletal model. More... class ModelComponent This defines the abstract ModelComponent class, which is used to specify components of a musculoskeletal model and the elements they add to the underlying computational SimTK::System (MultibodySystem). More... class ModelComponentSet class ModelDisplayHints This class captures information indicating user or programmer preferences to guide automatic display geometry generation by a Model . More... class ModelFactory This class provides utilities for creating OpenSim models. More... class ModelHasNoSystem Model Exceptions. More... class ModelOperator This abstract base class describes any operation that modifies a Model as part of a ModelProcessor . More... class ModelProcessor This class describes a workflow for processing a Model using ModelOperator s. More... class ModelScaler A class for scaling a model. More... class ModelVisualizer This class manages runtime visualization of a Model that is being manipulated through the OpenSim API. More... class ModelVisualPreferences A class that holds the Visual Preferences of a full OpenSim Model displayed in Visualizer. More... class ModOpAddExternalLoads Add external loads (e.g., ground reaction forces) to the model from a XML file. More... class ModOpAddReserves Add reserve actuators to the model using ModelFactory::createReserveActuators . More... class ModOpFiberDampingDGF Set the fiber damping for all DeGrooteFregly2016Muscle s in the model. More... class ModOpIgnoreActivationDynamics Turn",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 11,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "435b0a0a-4079-494b-a0e7-7423be6944a8",
    "document_id": "doc_187",
    "content": "for processing a Model using ModelOperator s. More... class ModelScaler A class for scaling a model. More... class ModelVisualizer This class manages runtime visualization of a Model that is being manipulated through the OpenSim API. More... class ModelVisualPreferences A class that holds the Visual Preferences of a full OpenSim Model displayed in Visualizer. More... class ModOpAddExternalLoads Add external loads (e.g., ground reaction forces) to the model from a XML file. More... class ModOpAddReserves Add reserve actuators to the model using ModelFactory::createReserveActuators . More... class ModOpFiberDampingDGF Set the fiber damping for all DeGrooteFregly2016Muscle s in the model. More... class ModOpIgnoreActivationDynamics Turn off activation dynamics for all muscles in the model. More... class ModOpIgnorePassiveFiberForcesDGF Turn off passive fiber forces for all DeGrooteFregly2016Muscle s in the model. More... class ModOpIgnoreTendonCompliance Turn off tendon compliance for all muscles in the model. More... class ModOpPassiveFiberStrainAtOneNormForceDGF Set passive fiber stiffness for all DeGrooteFregly2016Muscle s in the model. More... class ModOpRemoveMuscles Remove all muscles contained in the model's ForceSet . More... class ModOpReplaceJointsWithWelds class ModOpReplaceMusclesWithDeGrooteFregly2016 Invoke DeGrooteFregly2016Muscle::replaceMuscles() on the model. More... class ModOpReplaceMusclesWithPathActuators Invoke ModelFactory::replaceMusclesWithPathActuators() on the model. More... class ModOpReplacePathsWithFunctionBasedPaths Invoke ModelFactory::replacePathsWithFunctionBasedPaths() on the model. More... class ModOpScaleActiveFiberForceCurveWidthDGF Scale the active fiber force curve width for all DeGrooteFregly2016Muscle s in the model. More... class ModOpScaleMaxIsometricForce Scale the max isometric force for all muscles in the model. More... class ModOpTendonComplianceDynamicsModeDGF For DeGrooteFregly2016Muscle muscles whose 'ignore_tendon_compliance' property is false, set the tendon compliance dynamics mode to either 'explicit' or 'implicit'. More... class ModOpUseImplicitTendonComplianceDynamicsDGF Set the tendon compliance dynamics mode to \"implicit\" for all DeGrooteFregly2016Muscle s in the model. More... class MomentArmSolver Solve for the effective moment arms at all degrees-of-freedom due to one or more point forces. More... class MovingPathPoint A class implementing a moving muscle point, which is a muscle point that moves in a body's reference frame as a function of a coordinate. More... class MultiplierFunction A class implementing a Function and a scale factor for the function's value. More... class MultivariatePolynomialFunction A multivariate polynomial function. More... class Muscle A base class for modeling a muscle-tendon actuator. More... class MuscleActivationDynamics An abstract class for modeling muscle activation dynamics. More... class MuscleActiveFiberPowerProbe MuscleActiveFiberPowerProbe is a ModelComponent probe for computing an operation on the active fiber power of a muscle. More... class MuscleAnalysis A class for recording and computing basic quantities (length, shortening velocity, tendon length, ...) for muscles during a simulation. More... class MuscleCannotEquilibrate class MuscleFirstOrderActivationDynamicModel This is a muscle modeling utility class that computes the time derivative of activation using a first-order dynamic model. More... class MuscleFixedWidthPennationModel This is a muscle modeling utility class containing kinematic equations that describe the deformation of muscle fibers as they change length using a fixed-width-parallelogram pennation model. More... class MuscleSecondOrderActivationDynamicModel This function is a muscle modeling utility class that simulates dynamics of muscle force development as a function of input excitation. More... class MuscleStateTrackingTask A TrackingTask for that corresponds to a muscle state variable. More... class NoColumnLabels class NonUniqueLabels class NoRegisteredDataAdapter class NoTableFound class Object This is the base class",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 12,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "59d97aa8-24b3-4df8-b9db-30677edcbb5e",
    "document_id": "doc_187",
    "content": "is a muscle modeling utility class that computes the time derivative of activation using a first-order dynamic model. More... class MuscleFixedWidthPennationModel This is a muscle modeling utility class containing kinematic equations that describe the deformation of muscle fibers as they change length using a fixed-width-parallelogram pennation model. More... class MuscleSecondOrderActivationDynamicModel This function is a muscle modeling utility class that simulates dynamics of muscle force development as a function of input excitation. More... class MuscleStateTrackingTask A TrackingTask for that corresponds to a muscle state variable. More... class NoColumnLabels class NonUniqueLabels class NoRegisteredDataAdapter class NoTableFound class Object This is the base class for all OpenSim objects that are serializable (meaning they can be written to and read back from files). More... struct Object_GetClassName struct Object_GetClassName< bool > struct Object_GetClassName< char > struct Object_GetClassName< double > struct Object_GetClassName< float > struct Object_GetClassName< int > struct Object_GetClassName< long double > struct Object_GetClassName< long int > struct Object_GetClassName< long long int > struct Object_GetClassName< short int > struct Object_GetClassName< signed char > struct Object_GetClassName< SimTK::Quaternion_< SimTK::Real > > struct Object_GetClassName< SimTK::Rotation_< SimTK::Real > > struct Object_GetClassName< SimTK::SpatialVec > struct Object_GetClassName< SimTK::Transform > struct Object_GetClassName< SimTK::Vec2 > struct Object_GetClassName< SimTK::Vec3 > struct Object_GetClassName< SimTK::Vec6 > struct Object_GetClassName< SimTK::Vector_< SimTK::Real > > struct Object_GetClassName< SimTK::Vector_< SimTK::SpatialVec > > struct Object_GetClassName< SimTK::Vector_< SimTK::Vec3 > > struct Object_GetClassName< SimTK::Vector_< SimTK::Vec6 > > struct Object_GetClassName< std::string > struct Object_GetClassName< unsigned char > struct Object_GetClassName< unsigned int > struct Object_GetClassName< unsigned long int > struct Object_GetClassName< unsigned long long int > struct Object_GetClassName< unsigned short int > class ObjectGroup A class implementing an object group. More... class ObjectProperty class OffsetFrame An OffsetFrame is a Frame whose transform (translation and orientation) with respect to another (parent) Frame is constant in time. More... class OpenSenseUtilities class OptimizationTarget This class provides an interface specification for optimizing redundant systems. More... class OrientationsReference Reference values for the Orientations of model frames that will be used to to compute tracking errors. More... class OrientationWeight class OrientationWeightSet class Output class OutputNotFound class OutputReporter The OutputReporter Analysis is a wrapper for a TableReporter. More... class PathActuator This is the base class for actuators that apply controllable tension along a path. More... class PathPoint A path point that is stationary with respect to parent's PhysicalFrame . More... class PathPointSet A class for holding a set of path points. More... class PathSpring A class implementing a PathSpring . More... class PathWrapPoint A class implementing a path wrapping point, which is a path point that is produced by a PathWrap. More... class PhysicalFrame A PhysicalFrame is a Frame that locates a physical element of the multi- body system that underlies a Model . More... class PhysicalOffsetFrame A PhysicalOffsetFrame is a PhysicalFrame whose transform is specified as a constant offset from another PhysicalFrame . More... class PhysicalOffsetFramesFormLoop class PiecewiseConstantFunction A class implementing a step function. More... class PiecewiseLinearFunction A class implementing a linear function. More... class PinJoint A Class implementing a Pin joint. More... class PlanarJoint A class implementing a Planar joint. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 13,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2f37ecce-6abe-46c8-86fd-0caf7ba9d9ad",
    "document_id": "doc_187",
    "content": "A class implementing a path wrapping point, which is a path point that is produced by a PathWrap. More... class PhysicalFrame A PhysicalFrame is a Frame that locates a physical element of the multi- body system that underlies a Model . More... class PhysicalOffsetFrame A PhysicalOffsetFrame is a PhysicalFrame whose transform is specified as a constant offset from another PhysicalFrame . More... class PhysicalOffsetFramesFormLoop class PiecewiseConstantFunction A class implementing a step function. More... class PiecewiseLinearFunction A class implementing a linear function. More... class PinJoint A Class implementing a Pin joint. More... class PlanarJoint A class implementing a Planar joint. More... class Point A Point is an OpenSim abstraction for any location in space. More... class PointActuator A class that implements a point actuator acting on the model. More... class PointConstraint A class implementing a Point Constraint . More... class PointForceDirection Convenience class for a generic representation of geometry of a complex Force (or any other object) with multiple points of contact through which forces are applied to bodies. More... class PointKinematics A class for recording the kinematics of a point on a body of a model during a simulation. More... class PointOnLineConstraint A class implementing a Point On Line Constraint . More... class PointToPointActuator A class that implements a force actuator acting between two points on two bodies. More... class PointToPointSpring A simple point to point spring with a resting length and stiffness. More... class PolynomialFunction A class for representing a Polynomial of x. More... class PolynomialPathFitter A utility class for fitting a set of FunctionBasedPath s to existing geometry-path in an OpenSim model using MultivariatePolynomialFunction s. More... class PolynomialPathFitterBounds A helper class for specifying the minimum and maximum bounds for the coordinate at coordinate_path during path fitting. More... class PositionMotion This class prescribes the value, speed, and acceleration of all coordinates in the model using SimTK::Motion. More... class PrescribedController PrescribedController is a concrete Controller that specifies functions that prescribe the control values of its actuators as a function of time. More... class PrescribedForce This applies to a PhysicalFrame a force and/or torque that is specified as a function of time. More... class Probe This class represents a Probe which is designed to query a Vector of model values given system state. More... class ProbeReporter A class for reporting the outputs of all model-connected Probes to file during a simulation. More... class ProbeSet A class for holding a set of probes. More... class Property A Property<T> is a serializable (name, list-of-values) pair, where each value is of type T. More... class Property_Deprecated class PropertyBool Class PropertyBool extends class Property . More... class PropertyBoolArray Class PropertyBoolArray extends class Property . More... class PropertyDbl Class PropertyDbl extends class Property . More... class PropertyDblArray Class PropertyDblArray extends class Property . More... class PropertyDblVec_ Class PropertyDblVec_ extends class Property . More... class PropertyGroup A class implementing a property group. More... class PropertyInt Class PropertyInt extends class Property . More... class PropertyIntArray Class PropertyIntArray extends class Property . More... class PropertyObj Class PropertyObj extends class",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 14,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c062aead-1ca7-44ee-a1de-153adef2e146",
    "document_id": "doc_187",
    "content": "probes. More... class Property A Property<T> is a serializable (name, list-of-values) pair, where each value is of type T. More... class Property_Deprecated class PropertyBool Class PropertyBool extends class Property . More... class PropertyBoolArray Class PropertyBoolArray extends class Property . More... class PropertyDbl Class PropertyDbl extends class Property . More... class PropertyDblArray Class PropertyDblArray extends class Property . More... class PropertyDblVec_ Class PropertyDblVec_ extends class Property . More... class PropertyGroup A class implementing a property group. More... class PropertyInt Class PropertyInt extends class Property . More... class PropertyIntArray Class PropertyIntArray extends class Property . More... class PropertyObj Class PropertyObj extends class Property . More... class PropertyObjArray Class PropertyObjArray extends class Property . More... class PropertyObjPtr Class PropertyObjPtr extends class Property . More... class PropertySet A property set is simply a set of properties. More... class PropertyStr Class PropertyStr extends class Property . More... class PropertyStrArray Class PropertyStrArray extends class Property . More... class PropertyTable A property table is the container that an OpenSim Object uses to hold its properties (each derived from base class AbstractProperty ). More... class PropertyTransform Class PropertyTransform extends class Property . More... class Reference_ This base (abstract) class defines the interface for a Reference signals to be achieved/tracked via optimization and/or tracking controller. More... class Reporter This is an abstract Reporter with a single list Input named \"inputs\" whose type is templated (InputT). More... class RigidTendonMuscle A class implementing a RigidTendonMuscle actuator with no states. More... class RollingOnSurfaceConstraint A class implementing a collection of rolling-without-slipping and non-penetration constraints on a surface. More... class RootSolver A class for finding the N roots of N one-dimensional non-linear equations. More... class RowIndexOutOfRange class RowLengthMismatch class RRATool An abstract class for specifying the interface for an investigation. More... class ScalarActuator This is a derived class from the base class actuator (e.g., a torque motor, muscle, ...) that requires exactly one external input (control) to generate a scalar value force, such as a torque/force magnitude or a tension. More... class Scale class ScaleSet class ScaleTool A class implementing a set of parameters describing how to scale a model to fit a subject, place markers on it, and do IK on one or more motion trials. More... class ScapulothoracicJoint A class implementing a 4-DOF ScapulothoracicJoint . More... class Schutte1993Muscle_Deprecated A class implementing a SIMM muscle. More... class SegmentedQuinticBezierToolkit This is a low level Quintic Bezier curve class that contains functions to design continuous sets of 'C' shaped Bezier curves, and to evaluate their values and derivatives. More... class Set A class for holding a set of pointers to objects. More... class Signal A class for signal processing. More... class SignalGenerator SignalGenerator is a type of Component with no inputs and only one output. More... class SimbodyEngine A wrapper class to use the SimTK Simbody dynamics engine as the underlying engine for OpenSim . More... class SimmSpline A class implementing a smooth function with a cubic spline as implemented in SIMM. More... class SimpleProperty class Sine A class for representing a Sine function. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 15,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3e9cb538-fb7b-48ac-9b95-5a448597382d",
    "document_id": "doc_187",
    "content": "sets of 'C' shaped Bezier curves, and to evaluate their values and derivatives. More... class Set A class for holding a set of pointers to objects. More... class Signal A class for signal processing. More... class SignalGenerator SignalGenerator is a type of Component with no inputs and only one output. More... class SimbodyEngine A wrapper class to use the SimTK Simbody dynamics engine as the underlying engine for OpenSim . More... class SimmSpline A class implementing a smooth function with a cubic spline as implemented in SIMM. More... class SimpleProperty class Sine A class for representing a Sine function. More... class SliderJoint A class implementing a Slider joint. More... class SMC_Joint A class for specifying the tracking task for a joint. More... class SmoothSegmentedFunction This class contains the quintic Bezier curves, x(u) and y(u), that have been created by SmoothSegmentedFunctionFactory to follow a physiologically meaningful muscle characteristic. More... class SmoothSegmentedFunctionFactory This is a class that acts as a user friendly wrapper to QuinticBezerCurveSet to build specific kinds of physiologically plausible muscle curves using C2 continuous sets of quintic Bezier curves. More... class SmoothSphereHalfSpaceForce This compliant contact force model is similar to HuntCrossleyForce , except that this model applies force even when not in contact. More... class Socket class SocketNotFound class Solver The base (abstract) class for a family of objects responsible for solving system equations (statics, dynamic, kinematics, muscle, etc...) given by a model for values of interest. More... class SpatialTransform A class encapsulating the spatial transformation between two bodies that defines the behavior of a custom joint. More... class Sphere A class to represent Sphere geometry. More... class SpringGeneralizedForce A Force that exerts a generalized force based on spring-like characteristics (stiffness and viscosity). More... class StatesReporter A class for recording the states of a model during a simulation. More... class StatesTrajectory class StatesTrajectoryReporter Stores the states during a simulation in a StatesTrajectory . More... class StateTrackingTask A tracking task objective that corresponds to a state variable of a Force component (e.g. More... class StateVector A class which stores a vector of states or data at a specified time. More... class StaticOptimization This class implements static optimization to compute Muscle Forces and activations. More... class StaticOptimizationTarget This class provides an interface specification for static optimization Objective Function . More... class Station A Station is a Point fixed to and located on a PhysicalFrame , which can be a Body , Ground or any PhysicalOffsetFrame . More... class StationPlaneContactForce This class models compliant point contact with a ground plane y=0. More... class StepFunction A class for representing a StepFunction . More... class STODataTypeNotSupported class STOFileAdapter_ STOFileAdapter is a DelimFileAdapter that presets the delimiters appropriately for STO files. More... class Stopwatch Record and report elapsed real time (\"clock\" or \"wall\" time) in seconds. More... class Storage A class for storing an array of statevectors. More... class StorageCreator class StorageFactory class StorageInterface class StreamableReference_ class StringLogSink This sink stores all messages in a string. More... class SubcomponentsWithDuplicateName class SurfaceProperties SurfaceProperties class holds the",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 16,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b955e1ec-3525-4d63-8c00-0a2b260d9a8f",
    "document_id": "doc_187",
    "content": "Ground or any PhysicalOffsetFrame . More... class StationPlaneContactForce This class models compliant point contact with a ground plane y=0. More... class StepFunction A class for representing a StepFunction . More... class STODataTypeNotSupported class STOFileAdapter_ STOFileAdapter is a DelimFileAdapter that presets the delimiters appropriately for STO files. More... class Stopwatch Record and report elapsed real time (\"clock\" or \"wall\" time) in seconds. More... class Storage A class for storing an array of statevectors. More... class StorageCreator class StorageFactory class StorageInterface class StreamableReference_ class StringLogSink This sink stores all messages in a string. More... class SubcomponentsWithDuplicateName class SurfaceProperties SurfaceProperties class holds the appearance properties of a piece of Geometry displayed in the OpenSim visualizer or GUI as a surface. More... class SystemEnergyProbe SystemEnergyProbe is a ModelComponent Probe for computing an operation on a total system energy during a simulation. More... class TableMissingHeader class TableNotFoundException class TableOperator This abstract class describes any operation that consumes and modifies a TimeSeriesTable as part of a TableProcessor . More... class TableProcessor This class describes a workflow for processing a table using TableOperator s. More... class TableReporter_ This concrete Reporter class collects and reports Output<InputT>s within a TimeSeriesTable_ . More... class TableSource_ Component representing a source of data from a TimeSeriesTable_ . More... class TableUtilities class TabOpAppendCoordinateValueDerivativesAsSpeeds Invoke SimulationUtilities::appendCoordinateValueDerivativesAsSpeeds() on the table. More... class TabOpAppendCoupledCoordinateValues Invoke SimulationUtilities::appendCoupledCoordinateValues() on the table. More... class TabOpConvertDegreesToRadians class TabOpLowPassFilter Apply a low-pass filter to the trajectory. More... class TabOpUseAbsoluteStateNames Update table column labels to use post-4.0 state paths instead of pre-4.0 state names. More... class TendonForceLengthCurve This class serves as a serializable TendonForceLengthCurve for use in muscle models. More... class Thelen2003Muscle Implementation of a two state (activation and fiber-length) Muscle model by Thelen 2003. This a complete rewrite of a previous implementation (present in OpenSim 2.4 and earlier) contained numerous errors. More... class Thelen2003Muscle_Deprecated A class implementing a SIMM muscle. More... class ThreadsafeJar This class lets you store objects of a single type for reuse by multiple threads, ensuring threadsafe access to each of those objects. More... class TimeColumnNotIncreasing class TimeOutOfRange class TimeSeriesTable_ TimeSeriesTable_ is a DataTable_ where the independent column is time of type double. More... class TimestampGreaterThanEqualToNext class TimestampLessThanEqualToPrevious class Tool A Tool is an OpenSim abstraction that encapsulates an analysis or series of modeling and analysis steps. More... class TorqueActuator A TorqueActuator applies equal and opposite torques on the two bodies (bodyA and B) that it connects. More... class Torus A class to represent Torus geometry. More... class TrackingController TrackingController is an abstract class from which all tracking type of controllers should be derived. More... class TrackingTask An abstract base class for specifying a target for a tracking problem. More... class TransformAxis A class expressing a transformation of a child body in relation to a parent body along either a translation or about a rotation axis. More... class TRCFileAdapter TRCFileAdapter is a FileAdapter that reads and writes TRC files. More... class TwoFrameLinker TwoFrameLinker is a utility class to extend a Component such that it connects two Frames. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 17,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "91ed0973-9ed1-4eda-9abf-bffb9a6cf145",
    "document_id": "doc_187",
    "content": "class Torus A class to represent Torus geometry. More... class TrackingController TrackingController is an abstract class from which all tracking type of controllers should be derived. More... class TrackingTask An abstract base class for specifying a target for a tracking problem. More... class TransformAxis A class expressing a transformation of a child body in relation to a parent body along either a translation or about a rotation axis. More... class TRCFileAdapter TRCFileAdapter is a FileAdapter that reads and writes TRC files. More... class TwoFrameLinker TwoFrameLinker is a utility class to extend a Component such that it connects two Frames. More... class Umberger2010MuscleMetabolicsProbe Umberger2010MuscleMetabolicsProbe is a Probe ModelComponent for computing the net metabolic energy rate of a set of Muscles in the model during a simulation. More... class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter Documentation for this class has been provided with the documentation for the Umberger2010MuscleMetabolicsProbe class. More... class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet MetabolicMuscleParameterSet is an internal container class containing the set of MetabolicMuscleParameters for each muscle that is probed. More... class UnexpectedColumnLabel class UnexpectedMetaDataKey class UnilateralConstraint An abstract class defining an OpenSim UnilateralConstraint . More... class Units A class implementing various units for measuring quantities. More... class UniversalJoint A class implementing a Universal joint. More... class UnsupportedFileType class ValueArray class ValueArrayDictionary ValueArrayDictionary represents an associative array mapping from a string to an AbstractValueArray . More... class VectorFunction An abstract class for representing a vector function. More... class VectorFunctionForActuators An abstract class for representing a vector function. More... class VectorFunctionUncoupledNxN An abstract class for representing a vector function. More... class VisualizerUtilities class WeldConstraint A class implementing a Weld Constraint . More... class WeldJoint A class implementing a Weld joint. More... class WrapCylinder A class implementing a cylinder for muscle wrapping. More... class WrapEllipsoid A class implementing an ellipsoid for muscle wrapping. More... class WrapObject An abstract class that specifies the interface for a wrapping object. More... class WrapObjectSet A class for holding a set of wrap objects. More... class WrapSphere A class implementing a sphere for muscle wrapping. More... class WrapTorus A class implementing a torus for muscle wrapping. More... class XMLDocument class XsensDataReader XsensDataReader is a class that reads files produced by IMU manufacturer Xsens and produces datatables from them. More... class XsensDataReaderSettings XsensDataReaderSettings is a class that reads files produced by IMU manufacturer Xsens and produces datatables from them. More... class ZerothOrderMuscleActivationDynamics This zeroth-order muscle activation dynamic model simply sets activation to excitation, and can be used when activation dynamics are being ignored. More... Typedefs typedef DataTable_ < double, double > DataTable See DataTable_ for details on the interface. More... typedef DataTable_ < double, SimTK::Vec3 > DataTableVec3 See DataTable_ for details on the interface. More... typedef PropertyDblVec_ < 2 > PropertyDblVec2 typedef PropertyDblVec_ < 3 > PropertyDblVec3 typedef PropertyDblVec_ < 4 > PropertyDblVec4 typedef PropertyDblVec_ < 5 > PropertyDblVec5 typedef PropertyDblVec_ < 6 > PropertyDblVec6 typedef STOFileAdapter_ < double > STOFileAdapter typedef STOFileAdapter_ < SimTK::Vec3 > STOFileAdapterVec3 typedef STOFileAdapter_ < SimTK::Quaternion > STOFileAdapterQuaternion typedef std::map< std::string, std::string, std::less< std::string > > MapKeysToValues typedef std::map< std::string, OpenSim::StorageCreator",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 18,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e8aec1bc-1552-4ec4-a4ad-9972629386ca",
    "document_id": "doc_187",
    "content": "used when activation dynamics are being ignored. More... Typedefs typedef DataTable_ < double, double > DataTable See DataTable_ for details on the interface. More... typedef DataTable_ < double, SimTK::Vec3 > DataTableVec3 See DataTable_ for details on the interface. More... typedef PropertyDblVec_ < 2 > PropertyDblVec2 typedef PropertyDblVec_ < 3 > PropertyDblVec3 typedef PropertyDblVec_ < 4 > PropertyDblVec4 typedef PropertyDblVec_ < 5 > PropertyDblVec5 typedef PropertyDblVec_ < 6 > PropertyDblVec6 typedef STOFileAdapter_ < double > STOFileAdapter typedef STOFileAdapter_ < SimTK::Vec3 > STOFileAdapterVec3 typedef STOFileAdapter_ < SimTK::Quaternion > STOFileAdapterQuaternion typedef std::map< std::string, std::string, std::less< std::string > > MapKeysToValues typedef std::map< std::string, OpenSim::StorageCreator *, std::less< std::string > > mapExtensionsToCreators typedef TableSource_ < SimTK::Real > TableSource This TableSource_ can hold a TimeSeriesTable_<SimTK::Real> and so its list-output 'column' will have channels of type SimTK::Real (double). More... typedef TableSource_ < SimTK::Vec3 > TableSourceVec3 This TableSource_ can hold a TimeSeriesTable_<SimTK::Vec3> and so its list-output 'column' will have channels of type SimTK::Vec3. More... typedef TimeSeriesTable_ < SimTK::Real > TimeSeriesTable See TimeSeriesTable_ for details on the interface. More... typedef TimeSeriesTable_ < SimTK::Vec3 > TimeSeriesTableVec3 See TimeSeriesTable_ for details on the interface. More... typedef TimeSeriesTable_ < SimTK::Quaternion > TimeSeriesTableQuaternion See TimeSeriesTable_ for details on the interface. More... typedef TimeSeriesTable_ < SimTK::Rotation > TimeSeriesTableRotation See TimeSeriesTable_ for details on the interface. More... using VisualRepresentation = SimTK::DecorativeGeometry::Representation VisualRepresentation is the OpenSim name used across the OpenSim API, it is an that describes in what form is Geometry displayed: DrawPoints, DrawWireframe, DrawSurface are supported. More... template<typename T > using SetTModelComponent = Set < T, ModelComponent > This is the base class for sets of ModelComponent subclasses. More... Enumerations enum KinematicLevel { KinematicLevel::Position , KinematicLevel::DtPosition , KinematicLevel::Velocity , KinematicLevel::DtDtPosition , KinematicLevel::DtVelocity , KinematicLevel::Acceleration } The kinematic level for a scalar kinematic constraint within a MocoKinematicConstraint. More... Functions OSIMCOMMON_API void OnAssertionError (char const *failingCode, char const *failingFile, char const *failingFunction, unsigned int failingLine, Object const *maybeSourceObject=nullptr) template<typename T , typename... Args> std::unique_ptr< T > make_unique (Args &&... args) Since OpenSim does not require C++14 (which contains std::make_unique() ), here is an implementation of make_unique() . More... OSIMCOMMON_API std::string getFormattedDateTime (bool appendMicroseconds=false, std::string format=\"%Y-%m-%dT%H%M%S\") Get a string with the current date and time formatted as Y-m-dTHMS (year, month, day, \"T\", hour, minute, second). More... OSIMCOMMON_API SimTK::Vector createVectorLinspace (int length, double start, double end) Create a SimTK::Vector with the provided length whose elements are uniformly spaced between start and end (same as Matlab's linspace()). More... OSIMCOMMON_API SimTK::Vector createVector (std::initializer_list< SimTK::Real > elements) Create a SimTK::Vector using modern C++ syntax. More... OSIMCOMMON_API SimTK::Vector interpolate (const SimTK::Vector &x, const SimTK::Vector &y, const SimTK::Vector &newX, const bool ignoreNaNs=false) Linearly interpolate y(x) at new values of x. More... OSIMCOMMON_API std::string convertRelativeFilePathToAbsoluteFromXMLDocument (const std::string &documentFileName, const std::string &filePathRelativeToDirectoryContainingDocument) An OpenSim XML file may contain file paths that are relative to the directory containing the XML file; use this function to convert that relative path into an absolute path. More... OSIMCOMMON_API SimTK::Real solveBisection (std::function< double(const double &)> calcResidual, double left, double right, const double &tolerance=1e-6, int maxIterations=1000) Solve for the root of a",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 19,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "fd8aace2-d086-4c66-9368-cd6796600d42",
    "document_id": "doc_187",
    "content": "createVector (std::initializer_list< SimTK::Real > elements) Create a SimTK::Vector using modern C++ syntax. More... OSIMCOMMON_API SimTK::Vector interpolate (const SimTK::Vector &x, const SimTK::Vector &y, const SimTK::Vector &newX, const bool ignoreNaNs=false) Linearly interpolate y(x) at new values of x. More... OSIMCOMMON_API std::string convertRelativeFilePathToAbsoluteFromXMLDocument (const std::string &documentFileName, const std::string &filePathRelativeToDirectoryContainingDocument) An OpenSim XML file may contain file paths that are relative to the directory containing the XML file; use this function to convert that relative path into an absolute path. More... OSIMCOMMON_API SimTK::Real solveBisection (std::function< double(const double &)> calcResidual, double left, double right, const double &tolerance=1e-6, int maxIterations=1000) Solve for the root of a scalar function using the bisection method. More... OSIMCOMMON_API SimTK::Matrix computeKNearestNeighbors (const SimTK::Matrix &x, const SimTK::Matrix &y, int k=1) Compute the 'k' nearest neighbors of two matrices 'x' and 'y'. More... template<typename ETX , typename ETY > std::ostream & operator<< (std::ostream &outStream, const DataTable_ < ETX, ETY > &table) Print DataTable out to a stream. More... OSIMCOMMON_API OPENSIM_PORTABLE_HMODULE WINAPI LoadOpenSimLibrary (const std::string &lpLibFileName, bool verbose) Load an OpenSim (plugin) library, using a path to a library (relative or absolute) but without the file extension (.dll, .so, .dylib). More... OSIMCOMMON_API void LoadOpenSimLibrary (const std::string &aLibraryName) Uses LoadOpenSimLibrary(const std::string&, bool) , with verbosity. More... OSIMCOMMON_API bool LoadOpenSimLibraryExact (const std::string &exactPath, bool verbose=true) Load an OpenSim (plugin) library using the exact path specified. More... OSIMCOMMON_API void LoadOpenSimLibraries (int argc, char **argv) Used to process legacy command line arguments that specify plugin libraries to load. More... SimTK_DEFINE_UNIQUE_INDEX_TYPE (PropertyIndex) bool OSIMCOMMON_API readNonCommentStringFromStream (std::istream &aStream, std::string &rBuffer) bool OSIMCOMMON_API readStringFromStream (std::istream &aStream, std::string &rBuffer) bool OSIMCOMMON_API readStringFromString (std::string &aString, std::string &rBuffer) bool OSIMCOMMON_API readTabDelimitedStringFromString (std::string &aString, std::string &rBuffer) bool OSIMCOMMON_API readIntegerFromString (std::string &aString, int *rNumber) bool OSIMCOMMON_API readDoubleFromString (std::string &aString, double *rNumber, bool allowNaNs=false) bool OSIMCOMMON_API readVectorFromString (std::string &aString, SimTK::Vec3 &rVec) bool OSIMCOMMON_API readVectorFromString (std::string &aString, double *rVX, double *rVY, double *rVZ) bool OSIMCOMMON_API readCoordinatesFromString (std::string &aString, double rVec[3], bool allowNaNs=false) int OSIMCOMMON_API findFirstNonWhiteSpace (std::string &aString) int OSIMCOMMON_API findFirstWhiteSpace (std::string &aString) void OSIMCOMMON_API convertString (std::string &aString, bool aPrependUnderscore) std::string OSIMCOMMON_API getCurrentTimeString () std::shared_ptr< DataAdapter > createSTOFileAdapterForReading (const std::string &fileName) std::shared_ptr< DataAdapter > createSTOFileAdapterForWriting (const AbstractDataTable &table) OSIMMOCO_API std::string GetMocoVersionAndDate () OSIMMOCO_API std::string GetMocoVersion () std::ostream & operator<< (std::ostream &stream, const MocoBounds &bounds) template<typename T > TimeSeriesTable_ < T > analyzeMocoTrajectory ( Model model, const MocoTrajectory &trajectory, const std::vector< std::string > &outputPaths) Calculate the requested outputs using the model in the problem and the provided StatesTrajectory and controls table. More... OSIMMOCO_API void prescribeControlsToModel (const MocoTrajectory &trajectory, Model &model, std::string functionType=\"GCVSpline\") Given a MocoTrajectory and the associated OpenSim model, return the model with a prescribed controller appended that will compute the control values from the MocoTrajectory . More... OSIMMOCO_API MocoTrajectory simulateTrajectoryWithTimeStepping (const MocoTrajectory &trajectory, Model model, double integratorAccuracy=SimTK::NaN) Use the controls and initial state in the provided trajectory to simulate the model using an ODE time stepping integrator ( OpenSim::Manager ), and return the resulting states and controls. More... OSIMMOCO_API MocoTrajectory createPeriodicTrajectory (const MocoTrajectory &halfPeriodTrajectory, std::vector< std::string > addPatterns={\".*pelvis_tx/value\"}, std::vector< std::string > negatePatterns={ \".*pelvis_list(?!/value).*\", \".*pelvis_rotation.*\", \".*pelvis_tz(?!/value).*\", \".*lumbar_bending(?!/value).*\", \".*lumbar_rotation.*\"}, std::vector<",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 20,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "12b98d85-3694-4de6-ac2d-72a53065f9fa",
    "document_id": "doc_187",
    "content": "table. More... OSIMMOCO_API void prescribeControlsToModel (const MocoTrajectory &trajectory, Model &model, std::string functionType=\"GCVSpline\") Given a MocoTrajectory and the associated OpenSim model, return the model with a prescribed controller appended that will compute the control values from the MocoTrajectory . More... OSIMMOCO_API MocoTrajectory simulateTrajectoryWithTimeStepping (const MocoTrajectory &trajectory, Model model, double integratorAccuracy=SimTK::NaN) Use the controls and initial state in the provided trajectory to simulate the model using an ODE time stepping integrator ( OpenSim::Manager ), and return the resulting states and controls. More... OSIMMOCO_API MocoTrajectory createPeriodicTrajectory (const MocoTrajectory &halfPeriodTrajectory, std::vector< std::string > addPatterns={\".*pelvis_tx/value\"}, std::vector< std::string > negatePatterns={ \".*pelvis_list(?!/value).*\", \".*pelvis_rotation.*\", \".*pelvis_tz(?!/value).*\", \".*lumbar_bending(?!/value).*\", \".*lumbar_rotation.*\"}, std::vector< std::string > negateAndShiftPatterns={ \".*pelvis_list/value\", \".*pelvis_tz/value\", \".*lumbar_bending/value\"}, std::vector< std::pair< std::string, std::string >> symmetryPatterns={{R\"(_r(\\_|EQUATION: ))\", \"_l1\"}, {R\"(_l(\\_|EQUATION: ))\", \"_r1\"}}) Convert a trajectory covering half the period of a symmetric motion into a trajectory over the full period. More... OSIMMOCO_API int getMocoParallelEnvironmentVariable () This obtains the value of the OPENSIM_MOCO_PARALLEL environment variable. More... OSIMMOCO_API TimeSeriesTable createExternalLoadsTableForGait ( Model model, const StatesTrajectory &trajectory, const std::vector< std::string > &forcePathsRightFoot, const std::vector< std::string > &forcePathsLeftFoot) Obtain the ground reaction forces, centers of pressure, and torques resulting from Force elements (e.g., SmoothSphereHalfSpaceForce ), using a model and states trajectory. More... OSIMMOCO_API TimeSeriesTable createExternalLoadsTableForGait ( Model model, const MocoTrajectory &trajectory, const std::vector< std::string > &forcePathsRightFoot, const std::vector< std::string > &forcePathsLeftFoot) Same as above, but with a MocoTrajectory instead of a StatesTrajectory . More... tropter::Bounds convertBounds (const MocoBounds &mb) tropter::InitialBounds convertBounds (const MocoInitialBounds &mb) tropter::FinalBounds convertBounds (const MocoFinalBounds &mb) template<> SimTK::MobilizedBody::FunctionBased CustomJoint::createMobilizedBody< SimTK::MobilizedBody::FunctionBased > (SimTK::MobilizedBody &inboard, const SimTK::Transform &inboardTransform, const SimTK::Body &outboard, const SimTK::Transform &outboardTransform, int &startingCoorinateIndex) const OSIMSIMULATION_API SimTK::State simulate ( Model &model, const SimTK::State &initialState, double finalTime, bool saveStatesFile=false) Simulate a model from an initial state and return the final state. More... OSIMSIMULATION_API void updateStateLabels40 (const Model &model, std::vector< std::string > &labels) Update a vector of state labels (in place) to use post-4.0 state paths instead of pre-4.0 state names. More... OSIMSIMULATION_API std::unique_ptr< Storage > updatePre40KinematicsStorageFor40MotionType (const Model &pre40Model, const Storage &kinematics) Not available through scripting. More... OSIMSIMULATION_API void updatePre40KinematicsFilesFor40MotionType (const Model &model, const std::vector< std::string > &filePaths, std::string suffix=\"_updated\") This function can be used to upgrade MOT files generated with versions before 4.0 in which some data columns are associated with coordinates that were incorrectly marked as Rotational (rather than Coupled). More... OSIMSIMULATION_API void updateSocketConnecteesBySearch ( Model &model) This function attempts to update the connectee path for any Socket anywhere in the model whose connectee path does not point to an existing component. More... OSIMSIMULATION_API std::vector< std::string > createStateVariableNamesInSystemOrder (const Model &model) The map provides the index of each state variable in SimTK::State::getY() from its each state variable path string. More... OSIMSIMULATION_API std::vector< std::string > createStateVariableNamesInSystemOrder (const Model &model, std::unordered_map< int, int > &yIndexMap) Same as above, but you can obtain a map from the returned state variable names to the index in SimTK::State::getY() that accounts for empty slots in Y. More... OSIMSIMULATION_API std::unordered_map< std::string, int > createSystemYIndexMap (const Model &model) The map provides the index of each state variable in SimTK::State::getY() from its state variable",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 21,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "de44025d-e40e-4e39-831e-7890dc75a064",
    "document_id": "doc_187",
    "content": "does not point to an existing component. More... OSIMSIMULATION_API std::vector< std::string > createStateVariableNamesInSystemOrder (const Model &model) The map provides the index of each state variable in SimTK::State::getY() from its each state variable path string. More... OSIMSIMULATION_API std::vector< std::string > createStateVariableNamesInSystemOrder (const Model &model, std::unordered_map< int, int > &yIndexMap) Same as above, but you can obtain a map from the returned state variable names to the index in SimTK::State::getY() that accounts for empty slots in Y. More... OSIMSIMULATION_API std::unordered_map< std::string, int > createSystemYIndexMap (const Model &model) The map provides the index of each state variable in SimTK::State::getY() from its state variable path string. More... OSIMSIMULATION_API std::vector< std::string > createControlNamesFromModel (const Model &model, std::vector< int > &modelControlIndices) Create a vector of control names based on the actuators in the model for which appliesForce == True. More... OSIMSIMULATION_API std::vector< std::string > createControlNamesFromModel (const Model &model) Same as above, but when there is no mapping to the modelControlIndices. More... OSIMSIMULATION_API std::unordered_map< std::string, int > createSystemControlIndexMap (const Model &model) The map provides the index of each control variable in the SimTK::Vector returned by Model::getControls() , using the control name as the key. More... OSIMSIMULATION_API void checkOrderSystemControls (const Model &model) Throws an exception if the order of the controls in the model is not the same as the order of the actuators in the model. More... OSIMSIMULATION_API void checkLabelsMatchModelStates (const Model &model, const std::vector< std::string > &labels) Throws an exception if any label in the provided list does not match any state variable names in the model. More... template<typename T > TimeSeriesTable_ < T > analyze ( Model model, const TimeSeriesTable &statesTable, const TimeSeriesTable &controlsTable, const std::vector< std::string > &outputPaths, const TimeSeriesTable &discreteVariablesTable={}) Calculate the requested outputs using the model in the problem and the provided states and controls tables. More... OSIMSIMULATION_API TimeSeriesTableVec3 createSyntheticIMUAccelerationSignals (const Model &model, const TimeSeriesTable &statesTable, const TimeSeriesTable &controlsTable, const std::vector< std::string > &framePaths) Calculate \"synthetic\" acceleration signals equivalent to signals recorded from inertial measurement units (IMUs). More... OSIMSIMULATION_API void appendCoupledCoordinateValues ( TimeSeriesTable &table, const Model &model, bool overwriteExistingColumns=true) Compute the values of coordinates defined by CoordinateCouplerConstraint s in the model and append them to the provided TimeSeriesTable . More... OSIMSIMULATION_API void appendCoordinateValueDerivativesAsSpeeds ( TimeSeriesTable &table, const Model &model, bool overwriteExistingColumns=true) Compute and append the coordinate speeds in the model by taking the first derivative of the coordinate values in the provided TimeSeriesTable . More... Variables const char ObjectDEFAULT_NAME [] = \"default\" Detailed Description The Moco interface is contained within the OpenSim namespace. Version 1.0 Author Ayman Habib Typedef Documentation ◆ DataTable typedef DataTable_ <double, double> OpenSim::DataTable See DataTable_ for details on the interface. ◆ DataTableVec3 typedef DataTable_ <double, SimTK::Vec3> OpenSim::DataTableVec3 See DataTable_ for details on the interface. ◆ mapExtensionsToCreators typedef std::map<std::string, OpenSim::StorageCreator *, std::less<std::string> > OpenSim::mapExtensionsToCreators ◆ MapKeysToValues typedef std::map<std::string, std::string, std::less<std::string> > OpenSim::MapKeysToValues ◆ PropertyDblVec2 typedef PropertyDblVec_ <2> OpenSim::PropertyDblVec2 ◆ PropertyDblVec3 typedef PropertyDblVec_ <3> OpenSim::PropertyDblVec3 ◆ PropertyDblVec4 typedef PropertyDblVec_ <4> OpenSim::PropertyDblVec4 ◆ PropertyDblVec5 typedef PropertyDblVec_ <5> OpenSim::PropertyDblVec5 ◆ PropertyDblVec6 typedef PropertyDblVec_ <6> OpenSim::PropertyDblVec6 ◆ SetTModelComponent template<typename T > using OpenSim::SetTModelComponent",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 22,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "602d454e-6007-47ac-8c68-796b7b89731c",
    "document_id": "doc_187",
    "content": "Detailed Description The Moco interface is contained within the OpenSim namespace. Version 1.0 Author Ayman Habib Typedef Documentation ◆ DataTable typedef DataTable_ <double, double> OpenSim::DataTable See DataTable_ for details on the interface. ◆ DataTableVec3 typedef DataTable_ <double, SimTK::Vec3> OpenSim::DataTableVec3 See DataTable_ for details on the interface. ◆ mapExtensionsToCreators typedef std::map<std::string, OpenSim::StorageCreator *, std::less<std::string> > OpenSim::mapExtensionsToCreators ◆ MapKeysToValues typedef std::map<std::string, std::string, std::less<std::string> > OpenSim::MapKeysToValues ◆ PropertyDblVec2 typedef PropertyDblVec_ <2> OpenSim::PropertyDblVec2 ◆ PropertyDblVec3 typedef PropertyDblVec_ <3> OpenSim::PropertyDblVec3 ◆ PropertyDblVec4 typedef PropertyDblVec_ <4> OpenSim::PropertyDblVec4 ◆ PropertyDblVec5 typedef PropertyDblVec_ <5> OpenSim::PropertyDblVec5 ◆ PropertyDblVec6 typedef PropertyDblVec_ <6> OpenSim::PropertyDblVec6 ◆ SetTModelComponent template<typename T > using OpenSim::SetTModelComponent = typedef Set <T, ModelComponent > This is the base class for sets of ModelComponent subclasses. It provides methods for invoking all of the ModelComponent methods on each member of the set. Template Parameters T This must be a concrete class derived from ModelComponent . ◆ STOFileAdapter typedef STOFileAdapter_ <double> OpenSim::STOFileAdapter ◆ STOFileAdapterQuaternion typedef STOFileAdapter_ <SimTK::Quaternion> OpenSim::STOFileAdapterQuaternion ◆ STOFileAdapterVec3 typedef STOFileAdapter_ <SimTK::Vec3> OpenSim::STOFileAdapterVec3 ◆ TableSource typedef TableSource_ <SimTK::Real> OpenSim::TableSource This TableSource_ can hold a TimeSeriesTable_<SimTK::Real> and so its list-output 'column' will have channels of type SimTK::Real (double). Its other output 'row' will be of type SimTK::Vector_<SimTK::Real>. ◆ TableSourceVec3 typedef TableSource_ <SimTK::Vec3> OpenSim::TableSourceVec3 This TableSource_ can hold a TimeSeriesTable_<SimTK::Vec3> and so its list-output 'column' will have channels of type SimTK::Vec3. Its other output 'row' will be of type SimTK::Vector_<SimTK::Vec3>. ◆ TimeSeriesTable typedef TimeSeriesTable_ <SimTK::Real> OpenSim::TimeSeriesTable See TimeSeriesTable_ for details on the interface. ◆ TimeSeriesTableQuaternion typedef TimeSeriesTable_ <SimTK::Quaternion> OpenSim::TimeSeriesTableQuaternion See TimeSeriesTable_ for details on the interface. ◆ TimeSeriesTableRotation typedef TimeSeriesTable_ <SimTK::Rotation> OpenSim::TimeSeriesTableRotation See TimeSeriesTable_ for details on the interface. ◆ TimeSeriesTableVec3 typedef TimeSeriesTable_ <SimTK::Vec3> OpenSim::TimeSeriesTableVec3 See TimeSeriesTable_ for details on the interface. ◆ VisualRepresentation using OpenSim::VisualRepresentation = typedef SimTK::DecorativeGeometry::Representation VisualRepresentation is the OpenSim name used across the OpenSim API, it is an that describes in what form is Geometry displayed: DrawPoints, DrawWireframe, DrawSurface are supported. Enumeration Type Documentation ◆ KinematicLevel enum OpenSim::KinematicLevel strong The kinematic level for a scalar kinematic constraint within a MocoKinematicConstraint . Each scalar constraint is automatically assigned a KinematicLevel enum value when a MocoKinematicConstraint is instantiated. Enumerator Position DtPosition Velocity DtDtPosition DtVelocity Acceleration Function Documentation ◆ convertBounds() [1/3] tropter::Bounds OpenSim::convertBounds ( const MocoBounds & mb ) inline References OpenSim::MocoBounds::getLower() , and OpenSim::MocoBounds::getUpper() . Referenced by OpenSim::MocoTropterSolver::TropterProblemBase< T >::addControlVariables() , OpenSim::MocoTropterSolver::TropterProblemBase< T >::addGenericPathConstraints() , OpenSim::MocoTropterSolver::TropterProblemBase< T >::addKinematicConstraints() , OpenSim::MocoTropterSolver::TropterProblemBase< T >::addParameters() , OpenSim::MocoTropterSolver::TropterProblemBase< T >::addStateVariables() , and OpenSim::MocoTropterSolver::ImplicitTropterProblem< T >::ImplicitTropterProblem() . ◆ convertBounds() [2/3] tropter::InitialBounds OpenSim::convertBounds ( const MocoInitialBounds & mb ) inline References OpenSim::MocoBounds::getLower() , and OpenSim::MocoBounds::getUpper() . ◆ convertBounds() [3/3] tropter::FinalBounds OpenSim::convertBounds ( const MocoFinalBounds & mb ) inline References OpenSim::MocoBounds::getLower() , and OpenSim::MocoBounds::getUpper() . ◆ convertString() void OSIMCOMMON_API OpenSim::convertString ( std::string & aString , bool aPrependUnderscore ) ◆ createSTOFileAdapterForReading() std::shared_ptr< DataAdapter > OpenSim::createSTOFileAdapterForReading ( const std::string & fileName ) ◆ createSTOFileAdapterForWriting() std::shared_ptr< DataAdapter > OpenSim::createSTOFileAdapterForWriting ( const AbstractDataTable & table ) ◆ CustomJoint::createMobilizedBody< SimTK::MobilizedBody::FunctionBased >() template<> SimTK::MobilizedBody::FunctionBased OpenSim::CustomJoint::createMobilizedBody< SimTK::MobilizedBody::FunctionBased > ( SimTK::MobilizedBody & inboard , const SimTK::Transform & inboardTransform , const SimTK::Body & outboard , const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 23,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1e1a3d65-e0fe-4cde-92d9-249ab7547cb9",
    "document_id": "doc_187",
    "content": ">::ImplicitTropterProblem() . ◆ convertBounds() [2/3] tropter::InitialBounds OpenSim::convertBounds ( const MocoInitialBounds & mb ) inline References OpenSim::MocoBounds::getLower() , and OpenSim::MocoBounds::getUpper() . ◆ convertBounds() [3/3] tropter::FinalBounds OpenSim::convertBounds ( const MocoFinalBounds & mb ) inline References OpenSim::MocoBounds::getLower() , and OpenSim::MocoBounds::getUpper() . ◆ convertString() void OSIMCOMMON_API OpenSim::convertString ( std::string & aString , bool aPrependUnderscore ) ◆ createSTOFileAdapterForReading() std::shared_ptr< DataAdapter > OpenSim::createSTOFileAdapterForReading ( const std::string & fileName ) ◆ createSTOFileAdapterForWriting() std::shared_ptr< DataAdapter > OpenSim::createSTOFileAdapterForWriting ( const AbstractDataTable & table ) ◆ CustomJoint::createMobilizedBody< SimTK::MobilizedBody::FunctionBased >() template<> SimTK::MobilizedBody::FunctionBased OpenSim::CustomJoint::createMobilizedBody< SimTK::MobilizedBody::FunctionBased > ( SimTK::MobilizedBody & inboard , const SimTK::Transform & inboardTransform , const SimTK::Body & outboard , const SimTK::Transform & outboardTransform , int & startingCoorinateIndex ) const ◆ findFirstNonWhiteSpace() int OSIMCOMMON_API OpenSim::findFirstNonWhiteSpace ( std::string & aString ) ◆ findFirstWhiteSpace() int OSIMCOMMON_API OpenSim::findFirstWhiteSpace ( std::string & aString ) ◆ getCurrentTimeString() std::string OSIMCOMMON_API OpenSim::getCurrentTimeString ( ) ◆ GetMocoVersion() OSIMMOCO_API std::string OpenSim::GetMocoVersion ( ) ◆ GetMocoVersionAndDate() OSIMMOCO_API std::string OpenSim::GetMocoVersionAndDate ( ) ◆ LoadOpenSimLibraries() OSIMCOMMON_API void OpenSim::LoadOpenSimLibraries ( int argc , char ** argv ) Used to process legacy command line arguments that specify plugin libraries to load. Internally uses LoadOpenSimLibrary(const std::string&, bool) with verbosity. ◆ LoadOpenSimLibrary() [1/2] OSIMCOMMON_API OPENSIM_PORTABLE_HMODULE WINAPI OpenSim::LoadOpenSimLibrary ( const std::string & lpLibFileName , bool verbose ) Load an OpenSim (plugin) library, using a path to a library (relative or absolute) but without the file extension (.dll, .so, .dylib). This method will prefer a debug variant of the library if OpenSim was built in debug. In MATLAB/Python, we suggest you use LoadOpenSimLibraryExact instead of this function. If you insist on using this variant, see the examples below. To load a plugin in MATLAB, use the following: import org.opensim.modeling.*; opensimCommon.LoadOpenSimLibrary( '<path>/osimMyPlugin' ); Do NOT use MATLAB's loadlibrary() . To load a plugin in Python, use the following: import opensim opensim.LoadOpenSimLibrary( '<path>/osimMyPlugin' ) ◆ LoadOpenSimLibrary() [2/2] OSIMCOMMON_API void OpenSim::LoadOpenSimLibrary ( const std::string & aLibraryName ) Uses LoadOpenSimLibrary(const std::string&, bool) , with verbosity. ◆ LoadOpenSimLibraryExact() OSIMCOMMON_API bool OpenSim::LoadOpenSimLibraryExact ( const std::string & exactPath , bool verbose = true ) Load an OpenSim (plugin) library using the exact path specified. Therefore, you must supply an exact path to the library (either relative or absolute), including the file extension (.dll, .so, .dylib). The only change that may be made to the path is to convert forward slashes to backslashes on Windows (and vice versa on UNIX). To load a plugin in MATLAB, use the following: import org.opensim.modeling.*; opensimCommon.LoadOpenSimLibraryExact( '<path>/osimMyPlugin.dll' ); Do NOT use MATLAB's loadlibrary() . To load a plugin in Python, use the following: import opensim opensim.LoadOpenSimLibraryExact( '<path>/osimMyPlugin.dll' ) Note If your (plugin) library depends on other libraries, make sure they are available as well (e.g., by setting the appropriate values for environment variables like PATH (Windows), LD_LIBRARY_PATH (Linux), and DYLD_LIBRARY_PATH (macOS)). Returns true if the library was successfully loaded; false otherwise. ◆ OnAssertionError() OSIMCOMMON_API void OpenSim::OnAssertionError ( char const * failingCode , char const * failingFile , char const * failingFunction , unsigned int failingLine , Object const * maybeSourceObject = nullptr ) ◆ operator<<() [1/2] std::ostream& OpenSim::operator<< ( std::ostream &",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 24,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "233d76fb-e94b-43da-b995-9f33a5a22bf9",
    "document_id": "doc_187",
    "content": "MATLAB's loadlibrary() . To load a plugin in Python, use the following: import opensim opensim.LoadOpenSimLibraryExact( '<path>/osimMyPlugin.dll' ) Note If your (plugin) library depends on other libraries, make sure they are available as well (e.g., by setting the appropriate values for environment variables like PATH (Windows), LD_LIBRARY_PATH (Linux), and DYLD_LIBRARY_PATH (macOS)). Returns true if the library was successfully loaded; false otherwise. ◆ OnAssertionError() OSIMCOMMON_API void OpenSim::OnAssertionError ( char const * failingCode , char const * failingFile , char const * failingFunction , unsigned int failingLine , Object const * maybeSourceObject = nullptr ) ◆ operator<<() [1/2] std::ostream& OpenSim::operator<< ( std::ostream & stream , const MocoBounds & bounds ) inline References OpenSim::MocoBounds::getLower() , OpenSim::MocoBounds::getUpper() , and OpenSim::MocoBounds::isEquality() . ◆ operator<<() [2/2] template<typename ETX , typename ETY > std::ostream& OpenSim::operator<< ( std::ostream & outStream , const DataTable_ < ETX, ETY > & table ) Print DataTable out to a stream. References OpenSim::DataTable_< ETX, ETY >::toString() . ◆ readCoordinatesFromString() bool OSIMCOMMON_API OpenSim::readCoordinatesFromString ( std::string & aString , double rVec [3], bool allowNaNs = false ) ◆ readDoubleFromString() bool OSIMCOMMON_API OpenSim::readDoubleFromString ( std::string & aString , double * rNumber , bool allowNaNs = false ) ◆ readIntegerFromString() bool OSIMCOMMON_API OpenSim::readIntegerFromString ( std::string & aString , int * rNumber ) ◆ readNonCommentStringFromStream() bool OSIMCOMMON_API OpenSim::readNonCommentStringFromStream ( std::istream & aStream , std::string & rBuffer ) ◆ readStringFromStream() bool OSIMCOMMON_API OpenSim::readStringFromStream ( std::istream & aStream , std::string & rBuffer ) ◆ readStringFromString() bool OSIMCOMMON_API OpenSim::readStringFromString ( std::string & aString , std::string & rBuffer ) ◆ readTabDelimitedStringFromString() bool OSIMCOMMON_API OpenSim::readTabDelimitedStringFromString ( std::string & aString , std::string & rBuffer ) ◆ readVectorFromString() [1/2] bool OSIMCOMMON_API OpenSim::readVectorFromString ( std::string & aString , SimTK::Vec3 & rVec ) ◆ readVectorFromString() [2/2] bool OSIMCOMMON_API OpenSim::readVectorFromString ( std::string & aString , double * rVX , double * rVY , double * rVZ ) ◆ SimTK_DEFINE_UNIQUE_INDEX_TYPE() OpenSim::SimTK_DEFINE_UNIQUE_INDEX_TYPE ( PropertyIndex ) Variable Documentation ◆ ObjectDEFAULT_NAME const char OpenSim::ObjectDEFAULT_NAME[] = \"default\" OpenSim Generated on Thu Mar 21 2024 15:02:49 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/namespaceOpenSim.html",
      "title": "API: OpenSim Namespace Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "namespaceOpenSim.html"
      ],
      "content_type": "api",
      "position": 25,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1577c4c6-afc8-4acd-ac3c-a9a1af35f946",
    "document_id": "doc_99",
    "content": "Tibial forces in independently ambulatory children with spina bifida Share Follow Project Follow publicly Follow privately Unfollow See followers (0) List Map More info 2380 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Bone strength data, kinematic and kinetic overground walking data, and simulation results from 16 independently ambulatory children with spina bifida and 16 age- and sex-matched children with typical development. Download Latest Releases Dataset and Code: repo.zip Experimental motion capture and bone strength data and simulation results from 16 independently ambulatory children with spina bifida and 16 age- and sex-matched children with typical development. Additional motion capture and EMG data and simulation results for 6 independently ambulatory children with spina bifida and 1 child with typical development. Custom scripts were used to calculate joint kinematics, moments, and forces. Post-simulation analyses were conducted to compare these waveforms between the group with spina bifida and the group with typical development. The manuscript using these data and simulations can be found here: Lee MR, Hicks JL, Wren TAL, and Delp SL (2022). Independently ambulatory children with spina bifida experience near-typical knee and ankle joint moments and forces during walking. Gait and Posture, 99:1-8. https://doi.org/10.1016/j.gaitpost.2022.10.010 64 downloads 1 forum posts Last updated Oct 24, 2022 Project Statistics Suggest Idea Marissa Lee Sinopoli Tishya Wren Jennifer Hicks Scott Delp News File updated: repo.zip Oct 24, 2022 We updated our analyses with our paper revision!. Code and analyses have been updated. See all News People also viewed JointReaction: OpenSim joint load analysis plugin Spasticity model in OpenSim A three-dimensional musculoskeletal model of the dog Evertor and invertor muscle co-activation... Muscle contributions to mass center... Multidimensional Cubic B-Spline Examining Muscle Forces during Sit to Stand Transfer... SPAN: Simulated parallel annealing by neighborhood See all Analysis of arm swing during human walking OpenSim OpenSim Moco Enhanced Model Assembly for Intervertebral... Human Posture and Balance Platform in OpenSim Sensory Components for Simulating Postural Feedback... Sky Higher: Dynamic Optimization of Maximum Jump Height... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/sb_force",
      "title": "SimTK: Tibial forces in independently ambulatory children with spina bifida: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "sb_force"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a1f971c7-8dc2-4150-8bf7-da6e8db75b4f",
    "document_id": "doc_1",
    "content": "Welcome to the OpenSim User's Guide! To begin learning more about how to use the OpenSim software, step through the pages in this user guide. The chapters are listed below. Or if you know what you would like to read about, use the search bar in the top right to expedite the process. Chapters of the User's Guide Introducing OpenSim Installation Guide Graphical User Interface Loading and Saving Models and Motion Data Navigator Window Coordinates Window Snapshots and Movies Model Editing Excitation Editor Plotting Overview of OpenSim Workflows Preparing Your Data Scaling Inverse Kinematics IMU Placer IMU Inverse Kinematics Inverse Dynamics Static Optimization Forward Dynamics Residual Reduction Algorithm Computed Muscle Control Analyses Induced Acceleration Analysis Joint Reactions Analysis Probes OpenSim Models Command Line Utilities Video Gallery",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/display/OpenSim/User%27s+Guide",
      "title": "User's Guide - OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "OpenSim",
        "User%27s+Guide"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e9df7e34-7e6a-4132-b6c5-17cb8907b0bb",
    "document_id": "doc_119",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090545/Coordinates+Window",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090545",
        "Coordinates+Window"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9e23c790-b783-4995-bb6d-9f796d52197c",
    "document_id": "doc_44",
    "content": "Ayman Habib OpenSim IEEE transaction on Biomedical Engineering 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/docman/?group_id=91",
      "title": "SimTK: OpenSim: Documents",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Documents All OpenSim Resources NCSRR Support Letter Template Feb 2, 2015 Author: Joy Ku Template for letter of support for NCSRR renewal Support Site Apr 4, 2012 Author: Jennifer Hicks Browse and Search all OpenSim resources at our new Support Site Quick Links Doxygen Documentation Oct 10, 2012 Author: Ayman Habib OpenSim IEEE Paper 2007 Oct 10, 2007 Author:",
      "hierarchy": [
        "docman"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3ddffdaa-27b1-4f83-8799-43315f56ed64",
    "document_id": "doc_117",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089215/Loading+and+Saving+Models+and+Motion+Data",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089215",
        "Loading+and+Saving+Models+and+Motion+Data"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "64a020f8-ab72-49f7-b404-b13c4f7d099f",
    "document_id": "doc_164",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53114311/Intermediate+Examples",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53114311",
        "Intermediate+Examples"
      ],
      "content_type": "example",
      "position": 0,
      "tags": [
        "example",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "313c9101-2883-4efa-bee0-b1471dde8638",
    "document_id": "doc_23",
    "content": "The Science of Sports, Robotics, and Rehabilitation . These resources can be used by students to further explore the concepts presented in the book, by instructors to enhance their teaching materials, and by researchers who want to get moving. Featured projects Related communities Recently updated projects total projects 29 projects with downloads See all community projects Add project to community News OpenSim 4.5 Now Available OpenSim Mar 8, 2024 Webinar: Energetics and Big Data Approach Explain Ecological Running Speeds OpenSim Aug 16, 2022 Webinar: Estimating Energy Expenditure during Exercise Using Wearable Sensors OpenSim Apr 25, 2022 Publications Ong CF, Geijtenbeek T, Hicks JL, Delp SL. Predicting gait adaptations due to ankle plantarflexor muscle weakness and contracture using physics-based musculoskeletal simulations. Seth, A., Hicks, J. L., Uchida, T. K., Habib, A., Dembia, C. L., Dunne, J. J., … Delp, S. L. (2018). OpenSim: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement. PLoS Computational Biology, 14(7), 1–20. Cervical Spine Injuries: A Whole-Body Musculoskeletal Model for the Analysis of Spinal Loading. PLOS ONE. 4 Jan 2017. Dario Cazzola , Timothy P. Holsgrove, Ezio Preatoni, Harinderjit S. Gill, Grant Trewartha http://dx.doi.org/10.1371/journal.pone.0169329 Discussion Re: Tutorial may conflict with opensim 4.5 OpenSim Mar 28, 2025 SO runs OK in gui but error in API OpenSim Mar 27, 2025 Re: Issue browsing for files with Inverse Dynamics Tool OpenSim Mar 27, 2025 Administrators Thomas Uchida Scott Delp David Delp SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/communityPage.php?cat=1006&sort=date&page=0&srch=&",
      "title": "SimTK: Community",
      "section": "Biomechanics of Movement Experimental data, musculoskeletal models, and simulation results that appear in Uchida TK and Delp SL (2020) Biomechanics of Movement:",
      "hierarchy": [
        "category",
        "communityPage.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "86894c91-dc92-44da-8e56-80520fe6e898",
    "document_id": "doc_26",
    "content": "projects 162849 people Primary Content All ( ) Applications ( 0 ) Data Sets ( 0 ) Developer Tools ( 0 ) Educational and Training Material ( 0 ) Miscellaneous ( 0 ) Models ( 0 ) Scripts, Plug-Ins, and Other Utilities ( 0 ) Software Libraries ( 0 ) Web Site ( 0 ) Biocomputational Focus All ( ) Experimental Analysis ( 0 ) Image Processing ( 0 ) Network Modeling and Analysis ( 0 ) Physics-Based Simulation ( 0 ) Statistical Analysis ( 0 ) Visualization ( 0 ) Biological Applications All ( ) Cardiovascular System ( 0 ) Cell ( 0 ) Myosin ( 0 ) Neuromuscular System ( 0 ) Protein ( 0 ) RNA ( 0 ) Tissue ( 0 ) Primary Content All ( ) Applications ( 0 ) Data Sets ( 0 ) Developer Tools ( 0 ) Educational and Training Material ( 0 ) Miscellaneous ( 0 ) Models ( 0 ) Scripts, Plug-Ins, and Other Utilities ( 0 ) Software Libraries ( 0 ) Web Site ( 0 ) Biocomputational Focus All ( ) Experimental Analysis ( 0 ) Image Processing ( 0 ) Network Modeling and Analysis ( 0 ) Physics-Based Simulation ( 0 ) Statistical Analysis ( 0 ) Visualization ( 0 ) Biological Applications All ( ) Cardiovascular System ( 0 ) Cell ( 0 ) Myosin ( 0 ) Neuromuscular System ( 0 ) Protein ( 0 ) RNA ( 0 ) Tissue ( 0 ) SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/search/search.php?srch=&search=search&type_of_search=soft&sort=date&page=0",
      "title": "SimTK: Search",
      "section": "Narrow search results SimTK is home to: 1914 projects 162849 people Project search results: Sort by: Date updated Most relevant Most downloads Title SimTK is home to:",
      "hierarchy": [
        "search",
        "search.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "89d3577a-e7a5-4523-a96b-25cba3382dc7",
    "document_id": "doc_158",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53088813/Menus",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53088813",
        "Menus"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e2e40bc9-c716-497e-967e-7b2295072a74",
    "document_id": "doc_69",
    "content": "OpenSim Motion and Simulation Data Share Follow Project Follow publicly Follow privately Unfollow See followers (12) List Map More info 777 About Project summary Project statistics Project Activity Plots Geography of Use Team members About Project summary Project statistics Project Activity Plots Geography of Use Team members The purpose of this umbrella project is to provide a central repository of user-contributed OpenSim motion and simulation data. This collection is no longer being maintained through this project. To find OpenSim motion and simulation data, you can conduct a search on SimTK. Go to https://simtk.org/search/search.php?srch=neuromuscular&type_of_search=soft and then narrow your search to \"data sets\" by checking the box on the left. ---------------------------------- A repository of motion data from experiments and simulations, contributed by members of the OpenSim community. Please respect your fellow OpenSim Users. In using these data we ask that you respect the hard work of your fellow researchers by citing their work appropriately. When you go to the Download section you will be directed to individual project pages for each model which contain all of the files and documentation. Please carefully review the publications and cite the references in your future papers, presentations, grant applications, etc. Have data to contribute? Do you have simulation or motion data which you would like to make available through this library? Providing others with access to your data can stimulate future studies, provide a foundation for young researchers, and maximize the impact of your work. It’s easy to set up a project page to post your work. This will allow you to track who is using your data and be in contact with them. Please consider contributing! If you would like to have your project included on this site, please contact Jennifer Hicks, listed as one of the Project Leads. No guarantees about quality, correctness or support are provided by the SimTK team or OpenSim team. Use at your own risk. To find out more about the OpenSim project, please visit http://opensim.stanford.edu . 12 followers Last updated May 4, 2016 Project Statistics Jennifer Hicks People also viewed Dynamic Simulation of Movement Based on OpenSim and... Platform for Dynamic Simulation and Control of... Marker registration method informed by anatomical... Batch OpenSim Processing Scripts (BOPS) OpenSim Simulations Library Simple Dynamic Arm Model with Muscles Matlab parallel Opensim state derivative... UW Simulation Tools See all OpenSim Utilities Muscle-actuated Simulation of Human Running Calibrated EMG-Informed Neuromusculoskeletal... Muscle contributions to mass center... Simbody: Multibody Physics API OpenSim plugin to extract the muscle lines of action Neuromusculoskeletal Modeling (NMSM) Pipeline SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563",
    "metadata": {
      "source": "https://simtk.org/projects/opensim_data",
      "title": "SimTK: OpenSim Motion and Simulation Data: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "opensim_data"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "19e5b7be-e1d1-4ab8-a36d-b2ea29d2841a",
    "document_id": "doc_69",
    "content": "mass center... Simbody: Multibody Physics API OpenSim plugin to extract the muscle lines of action Neuromusculoskeletal Modeling (NMSM) Pipeline SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/opensim_data",
      "title": "SimTK: OpenSim Motion and Simulation Data: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "opensim_data"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "09c9ee73-d97d-4049-b9ce-8ea9dc7fd508",
    "document_id": "doc_94",
    "content": "Dynamic Simulation of Movement Based on OpenSim and MATLAB®/Simulink® Share 470 This is a private project. You must be a member to view its contents. This project overcomes neuromusculoskeletal systems limitations of MATLAB®/Simulink® and robust design & control limitations of OpenSim through an interface between these two software packages that combines relevant strengths of each individual package. Numerical simulations are playing an increasingly important role in solving complex engineering problems, and have the potential to revolutionize medical decision making and treatment design. Musculoskeletal diseases cost the United States economy an estimated $849 billion a year (equal to 7.7% of the gross domestic product) and place great demands on the healthcare system. This research area could greatly benefit from computational tools that offer greater understanding of neuromuscular biomechanics, and predictive capabilities for optimal surgical and rehabilitation treatment planning. The MATLAB®/Simulink® package is the world’s leading mathematical computing software for engineers and scientists in industry, government, and education. Although Simulink® extends MATLAB® with a graphical environment for rapid design, control, and simulation of complex dynamic systems, this powerful package has limited resources for simulations of neuromusculoskeletal systems. On the contrary, OpenSim is a popular open-source platform for modeling, simulating, and analyzing neuromusculoskeletal systems, but it is lacks the robust design and control tools of Simulink®. This project is an interface between OpenSim and MATLAB®/Simulink® that combines relevant strengths (e.g., neuromusculoskeletal dynamics, rapid model-based design, control systems, and numerical simulation) of each individual software package. The foundation of this interface is a MATLAB® S-function (system-function) based on an OpenSim model as a Simulink® block written in C++ and compiled as a MEX-file using the MATLAB® mex utility. Misagh Mansouri Jeff Reinbolt People also viewed Platform for Dynamic Simulation and Control of... EMG-informed Computed Muscle Control for Dynamic... Batch OpenSim Processing Scripts (BOPS) OpenSim Simulations Library OpenSim Motion and Simulation Data Sam's Simulations Neuromusculoskeletal Modeling (NMSM) Pipeline How much muscle strength is required to walk in... See all Convert .c3d and .csv files to OpenSim files... Dynamic Arm Simulator Upper and Lower Body Model A Visualization Tool for OpenSim Tim's OpenSim Utilities London Lower Limb Model Marker registration method informed by anatomical... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/opensim_matlab/",
      "title": "SimTK: Dynamic Simulation of Movement\r\nBased on OpenSim and MATLAB®/Simulink®: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "opensim_matlab"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "eec7bff9-a847-41cb-8f69-2306e9076419",
    "document_id": "doc_28",
    "content": "Access files from your laptop or your mobile device from anywhere you have an Internet connection. Cloud-based execution of code (beta): Let others run your code in the cloud. They can reproduce your results or use a web-based form to update your code and generate new results. Click on the “Simulations” link in the OpenKnee project to see how this works. Customized privacy options: You choose what to share and with whom. Automated statistics: Track visits to your project webpages and file downloads. A plethora of tools for sharing and communicating with users: Post downloads and documents to share. Plus each project can create a repository with version control, a wiki, mailing lists, discussion forums, and issue trackers. Integration of GitHub: You can connect your public GitHub repository to your SimTK project. Automatically download files from your GitHub repository to disseminate through your SimTK project. Automated backups: SimTK has multiple layers of backup, so your data is safe and secure. Assignment of DOIs to your files: Comply with publishers’ data-sharing policies by just checking a box and requesting a permanent identifier (a DOI) for any publicly shared resource on SimTK. Communities created around projects: Create a collection of projects and automatically keep abreast of the latest news, publications, and discussions happening within that community. Check out the OpenSim community . Project recommendations: SimTK automatically links your projects with other projects on the site through the “People also viewed” feature, increasing the visibility of your work. SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/features.php",
      "title": "SimTK",
      "section": "SimTK Features Cloud-based storage:",
      "hierarchy": [
        "features.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "15c6df15-3e50-43eb-ae79-2c963e3e97d4",
    "document_id": "doc_112",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089279/Documentation",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089279",
        "Documentation"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1157092f-e9b1-434a-8640-5fc5abd4365f",
    "document_id": "doc_60",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Required fields outlined in blue",
    "metadata": {
      "source": "https://simtk.org/tracker?atid=2089&group_id=91&func=add",
      "title": "SimTK: OpenSim: Submit New",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2eb8df1b-56ae-4347-947e-3a935eefdd7a",
    "document_id": "doc_176",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/100040712/Ergonomics",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "100040712",
        "Ergonomics"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ba634a43-3c79-4625-bbc8-db1004f25eba",
    "document_id": "doc_169",
    "content": "No results",
    "metadata": {
      "source": "https://opensim.stanford.edu/moco",
      "title": "Page not found – OpenSim Community",
      "section": "",
      "hierarchy": [
        "moco"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "41223f6d-053e-4d99-8524-a4b6d0532738",
    "document_id": "doc_40",
    "content": "Forum Statistics User name Posts (total) Posts (previous 30 days) Topics (total) Topics (previous 30 days) Ayman Habib 2196 0 1587 0 Thomas Uchida 1767 4 1217 3 jimmy d 1361 0 1094 0 Dimitar Stanev 1075 0 764 0 Carmichael Ong 395 0 351 0 Mohammadreza Rezaie 392 1 236 1 Christopher Dembia 286 0 170 0 Michael Sherman 270 0 152 0 Nicos Haralabidis 164 2 110 1 Nithin Kurup 149 0 68 0 Ajay Seth 131 0 110 0 Ton van den Bogert 121 0 66 0 Nicholas Bianco 116 9 77 5 Krishnakumar Sankar 113 0 58 0 Aaron Fox 111 0 70 0 Sina Porsa 99 0 45 0 Radhakrishnan Vignesh 94 0 42 0 Hide Kimpara 92 0 44 0 Jack Zhao 90 0 41 0 Jiang Ping 90 0 52 0 Tim Dorn 85 0 62 0 RAHUL GHARATE 84 0 57 0 Andrea Morelli 80 0 46 0 Brad Humphreys 78 0 38 0 Yi Wang 77 0 31 0 Anne Schmitz 76 0 42 0 David John Saxby 76 0 37 0 Daniel Leib 75 0 36 0 Ross Miller 74 0 44 0 Bryce Killen 66 0 41 0 Sietse Achterop 66 0 30 0 Rodrigo Mateus 59 0 34 0 Gautam Ramachandra 58 0 24 0 Michael Asmussen 58 0 30 0 Axel Koussou 56 0 23 0 Aaron Godfrey 54 0 31 0 John Davis 54 0 46 0 Kang Li 54 0 33 0 Sam Hamner 54 0 38 0 Sheeba Davis 53 0 22 0 Nur Adila Faruk Senan 52 0 28 0 Samane Amini 52 1 38 1 Emil Walczak 50 0 26 0 Colin Smith 49 0 37 0 Pagnon David 49 0 17 0 Shivangi Giri 49 0 31 0 Pia Stefanek 48 0 28 0 hamed kouchebaghi 47 0 13 0 Linjie Wang 47 0 17 0 Musa Audu 47 0 27 0 Ursula Trinler 47 0 18 0 Ali Khalilianmotamed Bonab 46 0 18 0 Rudolf Klemetti 46 0 26 0 Marc Carmichael 45 0 23 0 Chris Zirker 43 0 26 0 John Rogers 43 0 22 0 Moe Curtin 43 0 29 0 Rahul Agrawal 43 0 22 0 Vishal R 42 0 27 0 Yusuke Okita 42 0 22 0 Adrian Lai 41 0 16 0 Dario Cazzola 41 0 26 0 Kaiwen Yang 41 0 20 0 shayan moradkhani 41 0 18 0 abeer mohamed 40 0 24 0 Tom Lintern 40 0 18 0 Ratna Sambhav 39 0 24 0 Karthick Ganesan 38 0 17 0 Tom Augenstein 38 0 19 0 Kenechukwu Mbanisi 37 0 7 0 Maria Isabel Orselli 37 0 20 0 Michala Cadova 37 0 27 0 Pavlos Silvestros 37 0 18 0 Erica Beaucage-Gauvreau 36 0 20 0 Quinten Humphrey 36 0 23 0 Hossein Mokhtarzadeh 35 0 22 0 Mary K 35 0 20 0 Priyanshu Agarwal 35 0 16 0 Ruoli Wang 35 0 21 0 z imn 35",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 0,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a317774f-b0f2-4fc8-bf90-65b557e6b24c",
    "document_id": "doc_40",
    "content": "shayan moradkhani 41 0 18 0 abeer mohamed 40 0 24 0 Tom Lintern 40 0 18 0 Ratna Sambhav 39 0 24 0 Karthick Ganesan 38 0 17 0 Tom Augenstein 38 0 19 0 Kenechukwu Mbanisi 37 0 7 0 Maria Isabel Orselli 37 0 20 0 Michala Cadova 37 0 27 0 Pavlos Silvestros 37 0 18 0 Erica Beaucage-Gauvreau 36 0 20 0 Quinten Humphrey 36 0 23 0 Hossein Mokhtarzadeh 35 0 22 0 Mary K 35 0 20 0 Priyanshu Agarwal 35 0 16 0 Ruoli Wang 35 0 21 0 z imn 35 0 15 0 daniel jaramillo 34 0 25 0 Yunus Rezvanifar 34 0 20 0 Gregory Philips 33 0 9 0 Ibraheem Al-Dhamari 33 0 12 0 Jon Stingel 33 12 27 10 Mritula Chandrasekaran 33 0 15 0 Najoua Assila 33 0 23 0 saylee patkar 33 0 14 0 ajinkya patil 32 0 24 0 barak ostraich 32 0 21 0 Daniel Pina 32 0 13 0 Hao Lee 32 0 20 0 Jobin Geevarghese ThampI 32 0 19 0 B.J. Fregly 31 0 20 0 Brody Hicks 31 0 20 0 Cai Birch 31 0 21 0 Jacob J. Banks 31 0 18 0 Kevin Tanghe 31 0 11 0 Mahshida hamid 31 0 25 0 Matthias Kunze 31 0 12 0 Michał Wołek 31 0 16 0 Rahid Zaman 31 0 15 0 ruoshi wen 31 0 16 0 Stephanie Hachem 31 0 11 0 Abdulbaset Benwali 30 0 21 0 Anders Sandholm 30 0 23 0 Brandon Brown 30 0 20 0 Daniel Gordon 30 0 18 0 George Mastorakis 30 0 13 0 Julian Atkinson 30 0 20 0 Kathleen Reilly 30 0 21 0 Alex MacIntosh 29 0 16 0 ANDREW LAPRE 29 0 12 0 Firooz Salami 29 0 11 0 Hari S 29 0 24 0 Josh Baxter 29 0 21 0 Valentina Gallego 29 0 14 0 Xijin Hua 29 0 18 0 Aaron Henry 28 0 14 0 Bruno Zaffaina 28 0 12 0 Gary Lu 28 0 13 0 Jonathan Mortensen 28 0 19 0 raman samberia 28 0 20 0 Zhen Yang 28 0 8 0 Ana de Sousa 27 0 14 0 cui weiling 27 0 18 0 Frédéric Lamon 27 0 9 0 Günter Schneider 27 0 11 0 mohamad mahdavian 27 0 20 0 Moon Ki Jung 27 0 15 0 Rohan Kothurkar 27 0 17 0 Samuel Dyson 27 0 15 0 Vinay Kumar 27 0 16 0 Yong Cho 27 0 14 0 Zakia Hussain 27 0 15 0 Bas Van Hooren 26 0 12 0 Chaofei Zhang 26 0 10 0 Edward Syrett 26 1 21 1 Hoon Kim 26 0 15 0 Joseph Alston 26 0 14 0 Luca Modenese 26 0 22 0 Pablo Ortega 26 0 17 0 Yuan Yuan 26 0 20 0 Brian Umberger 25 0 11 0 Hang Xu 25 0 14 0 Marta Meneses",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 1,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "fdf4d538-b909-4ff2-9fe6-6cb12f01999f",
    "document_id": "doc_40",
    "content": "Moon Ki Jung 27 0 15 0 Rohan Kothurkar 27 0 17 0 Samuel Dyson 27 0 15 0 Vinay Kumar 27 0 16 0 Yong Cho 27 0 14 0 Zakia Hussain 27 0 15 0 Bas Van Hooren 26 0 12 0 Chaofei Zhang 26 0 10 0 Edward Syrett 26 1 21 1 Hoon Kim 26 0 15 0 Joseph Alston 26 0 14 0 Luca Modenese 26 0 22 0 Pablo Ortega 26 0 17 0 Yuan Yuan 26 0 20 0 Brian Umberger 25 0 11 0 Hang Xu 25 0 14 0 Marta Meneses 25 0 9 0 Rebecca Routson 25 0 9 0 ARFA Essosnam 24 0 11 0 Jingke Song 24 0 13 0 Nirav Maniar 24 0 16 0 Pablo Delgado 24 0 15 0 Zheqi Hu 24 0 14 0 Arash Mohammadzadeh Gonabadi 23 0 13 0 Kristy Godoy 23 0 13 0 Uwe Mittag 23 0 4 0 Vincent Fohanno 23 0 12 0 Yanis AMMOUCHE 23 0 8 0 Caterina Passini 22 0 11 0 Evan Dooley 22 0 14 0 Jennifer Hicks 22 0 20 0 Marcos Alfredo Núñez 22 0 12 0 Michel Audette 22 0 9 0 Ryan Byrne 22 0 16 0 Alexandra Yurova 21 0 15 0 Bo Ding 21 0 12 0 Carlo Tricarico 21 0 8 0 dani mendez 21 0 10 0 Erik Dijkstra 21 0 13 0 hongjie hou 21 0 15 0 Kathleen Lewicki 21 0 6 0 Peter Bishop 21 0 12 0 Vinh Nguyen 21 0 9 0 William A 21 0 12 0 Connor Pyles 20 0 4 0 Daniel Krueger 20 0 12 0 Glen Lichtwark 20 0 13 0 J.J. Mordang 20 0 7 0 John Chan 20 0 16 0 Josée Mallah 20 0 13 0 krishna raj 20 0 15 0 Mark Gordon 20 0 7 0 Roger Mathys 20 0 12 0 saeed aram 20 0 8 0 Satoshi OOta 20 0 7 0 Stephen Riutta 20 0 11 0 Tylan Templin 20 0 12 0 ZHONG WEI 20 0 13 0 Chiho Ng 19 0 12 0 Daniele Tregnaghi 19 0 10 0 Hojin Song 19 0 12 0 In Bae Chung 19 0 10 0 joana baptista 19 0 9 0 Ko Sasaki 19 0 9 0 Matthew Millard 19 0 10 0 Maud Hendriksen 19 0 14 0 Park SangJun 19 0 16 0 pavan guled 19 0 6 0 Pierre Kibleur 19 0 10 0 rajat das 19 0 5 0 Ran Sopher 19 0 10 0 sariah Mghames 19 0 5 0 shoko horibata 19 0 12 0 Silas Purja 19 0 14 0 Simon Harrison 19 0 10 0 Travis Peterson 19 0 12 0 Anantharaman Gopalakrishnan 18 0 13 0 Carlos Gonçalves 18 0 9 0 Connor Stapp 18 0 16 0 Eduardo Sáenz Aldea 18 0 5 0 Fabian Bayerlein 18 0 5 0 Francesco Mastrandrea 18 0 9 0 Giuseppe Scaccuto",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 2,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1d0eac61-a569-463a-a8d9-4699293baa1a",
    "document_id": "doc_40",
    "content": "0 Park SangJun 19 0 16 0 pavan guled 19 0 6 0 Pierre Kibleur 19 0 10 0 rajat das 19 0 5 0 Ran Sopher 19 0 10 0 sariah Mghames 19 0 5 0 shoko horibata 19 0 12 0 Silas Purja 19 0 14 0 Simon Harrison 19 0 10 0 Travis Peterson 19 0 12 0 Anantharaman Gopalakrishnan 18 0 13 0 Carlos Gonçalves 18 0 9 0 Connor Stapp 18 0 16 0 Eduardo Sáenz Aldea 18 0 5 0 Fabian Bayerlein 18 0 5 0 Francesco Mastrandrea 18 0 9 0 Giuseppe Scaccuto 18 0 6 0 hu hu 18 4 10 3 Jakob Welner 18 0 11 0 Max Rusch 18 0 9 0 Mehran Razzaghi 18 0 5 0 Michele Baldoni 18 0 8 0 rui zhou 18 0 14 0 Seyyed Hamed Hosseini Nasab 18 0 12 0 Sylvia Wan 18 0 9 0 cui jiashuo 17 0 12 0 Dhruv Gupta 17 0 6 0 Fabien Leboeuf 17 0 10 0 Jay Je 17 0 8 0 jing liu 17 0 10 0 Jonas Widmer 17 0 10 0 Misha Patel 17 0 5 0 Simon Jeng 17 0 13 0 YUAN Ye 17 0 2 0 Ali Forouzanfar 16 0 10 0 AUDE LEFRANC 16 0 9 0 Chetan Thakur 16 0 6 0 Christina Rossi 16 0 10 0 Christine Dailey 16 0 10 0 Evan Dooley 16 0 10 0 Félix Lefebvre 16 0 5 0 Jan Thomas 16 0 10 0 Karen Fitzgerald 16 0 7 0 Kazutaka Takahashi 16 0 11 0 Lars van Rengs 16 0 5 0 Maha Abbassi 16 0 9 0 Martin Mössner 16 0 7 0 Míriam Febrer-Nafría 16 0 9 0 Neil Dhir 16 0 8 0 Rejin Varghese 16 0 9 0 Ricardo Lameira 16 0 8 0 Robert Steidl 16 0 6 0 Ruth Meißner 16 0 6 0 Ryan Bakker 16 0 10 0 Samuele Gould 16 0 9 0 Ton Leenen 16 0 8 0 William Thompson 16 0 7 0 Abdullah Al Masud 15 0 11 0 Amy Stalker 15 0 5 0 Anthony Santago 15 0 6 0 Charles David Sasportes 15 0 4 0 Chris Bates 15 0 4 0 fausto panizzolo 15 0 7 0 Humans Clinic 15 0 8 0 Joel Quarnstrom 15 0 3 0 Jum Wld 15 0 11 0 kristen jakubowski 15 0 4 0 Lisias Camargo 15 0 9 0 Md Sanzid Bin Hossain 15 0 9 0 Pasha van Bijlert 15 0 9 0 Pengfei Liu 15 0 12 0 Sebastian Neuberg 15 0 7 0 soroosh bagheri 15 0 9 0 Xiangjie Meng 15 0 10 0 Adam Galloy 14 0 4 0 Akhil Bheemreddy 14 0 7 0 Alex Priamikov 14 0 9 0 Alison Rogozinski 14 0 8 0 Daniel Kohle 14 0 4 0 Ilan Eskinazi 14 0 12 0 John Olthoff 14 0 7 0 Lars Boers 14 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 3,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d8408a3c-9f9f-4df3-8b18-b029877e5bd7",
    "document_id": "doc_40",
    "content": "0 11 0 kristen jakubowski 15 0 4 0 Lisias Camargo 15 0 9 0 Md Sanzid Bin Hossain 15 0 9 0 Pasha van Bijlert 15 0 9 0 Pengfei Liu 15 0 12 0 Sebastian Neuberg 15 0 7 0 soroosh bagheri 15 0 9 0 Xiangjie Meng 15 0 10 0 Adam Galloy 14 0 4 0 Akhil Bheemreddy 14 0 7 0 Alex Priamikov 14 0 9 0 Alison Rogozinski 14 0 8 0 Daniel Kohle 14 0 4 0 Ilan Eskinazi 14 0 12 0 John Olthoff 14 0 7 0 Lars Boers 14 0 5 0 Lisa MacFadden 14 0 7 0 Margarida Machado 14 0 10 0 Mike Spahr 14 0 8 0 mohamad rasool mohamadi 14 0 9 0 Sangjun Lee 14 0 11 0 Yannik Schröder 14 0 9 0 yoann blache 14 0 8 0 Andrew Lewis 13 0 7 0 Anthony Ligouri 13 0 9 0 Bingyi Long 13 0 10 0 Dan Mulla 13 0 7 0 Deepak Jindal 13 0 10 0 D T 13 0 10 0 Giordano Valente 13 0 8 0 Karishma Sebastian 13 0 7 0 Koren Gast 13 0 6 0 Margaret Van Horn 13 0 11 0 Marin Antoine 13 0 5 0 Mohammadhossein Akhavanfar 13 0 8 0 Nashwa Elaraby 13 0 6 0 Natalia Kosterina 13 0 4 0 Nicolas Schwenck 13 0 9 0 Omar Sheikh 13 0 3 0 Paul Chris 13 0 9 0 Paul Klarich 13 0 7 0 qin geyu 13 0 5 0 Rahul Goel 13 0 9 0 RoZi A 13 0 5 0 Samuel Hybois 13 0 6 0 Satya Sri Mummidivarapu 13 0 9 0 Shaun Fickling 13 0 8 0 shuyang han 13 0 9 0 Thomas Overbergh 13 0 5 0 Wentao Li 13 0 5 0 Xiao Hu 13 0 10 0 Yu-Wei Chen 13 0 7 0 Adam Yoder 12 0 9 0 Allison Porter 12 0 7 0 Andrew Stolin 12 0 5 0 Bernardo Costa 12 0 3 0 Carlos Ramirez 12 0 6 0 Chunxia Li 12 0 4 0 David Walker 12 0 7 0 Hafizur Rahman 12 0 9 0 Hilary Cheng 12 0 6 0 Hugo Nistal González 12 0 4 0 Joana Silva 12 0 3 0 Junwei Sun 12 0 7 0 Lode Bosmans 12 0 5 0 Malavika Harikrishnan 12 0 6 0 Marta Carrilho 12 0 6 0 Matt DeMers 12 0 10 0 Matteo Musso 12 0 7 0 Mehran Elyasi 12 0 6 0 Nicolas Eydieux 12 0 5 0 Peter Loan 12 0 12 0 Raghu Ramanathan 12 0 4 0 Rebecca Abbott 12 0 4 0 Romain LEBERRE 12 0 8 0 Rory Turnbull 12 0 8 0 Saurabh Kothari 12 0 8 0 Sepehr Ramezani 12 0 8 0 Stefan Lambrecht 12 0 5 0 Wayne Johnson 12 0 8 0 Yuya Miyazaki 12 0 7 0 Ajay Sonar 11 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 4,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f1ac16f4-c477-49ba-8ca5-f2deb72b5c13",
    "document_id": "doc_40",
    "content": "Malavika Harikrishnan 12 0 6 0 Marta Carrilho 12 0 6 0 Matt DeMers 12 0 10 0 Matteo Musso 12 0 7 0 Mehran Elyasi 12 0 6 0 Nicolas Eydieux 12 0 5 0 Peter Loan 12 0 12 0 Raghu Ramanathan 12 0 4 0 Rebecca Abbott 12 0 4 0 Romain LEBERRE 12 0 8 0 Rory Turnbull 12 0 8 0 Saurabh Kothari 12 0 8 0 Sepehr Ramezani 12 0 8 0 Stefan Lambrecht 12 0 5 0 Wayne Johnson 12 0 8 0 Yuya Miyazaki 12 0 7 0 Ajay Sonar 11 0 5 0 Alessia Franceschi 11 0 5 0 Alice Mantoan 11 0 6 0 Andrea Gargamelli 11 0 5 0 Ankit Verma 11 0 10 0 Antoine Falisse 11 0 5 0 Aseel Ghazwan 11 0 6 0 Ashley Heers 11 0 9 0 Charles Yin 11 0 5 0 Chiara Camaschella 11 0 5 0 Cosimo Aloisi 11 0 6 0 Elena Bardi 11 0 4 0 Felix Kastl 11 0 6 0 Gerus Pauline 11 0 6 0 Irina Wils 11 0 3 0 Jiamin Zhao 11 0 8 0 Joel Quarnstrom 11 0 4 0 John De Witt 11 0 7 0 Jonathan SAVIN 11 0 4 0 Joseph Marsh 11 0 4 0 Julie Iskander 11 0 7 0 Laura Peeters 11 0 6 0 marco xu 11 0 9 0 masahiro yokota 11 0 5 0 Michael Fanton 11 0 3 0 Mojtaba Safari 11 0 8 0 Niamh Gill 11 0 2 0 Nicholas Sotirelis 11 0 6 0 Pouya Amiri 11 0 6 0 Riza Bayoglu 11 0 7 0 Sanchana Krishnakumar 11 0 6 0 Stefanie Gassel 11 0 5 0 Thomas Geijtenbeek 11 0 4 0 Thomas Hofmann 11 0 3 0 xueqin luo 11 0 6 0 Yan Junlan 11 0 7 0 Alessia Giordan 10 0 3 0 Alex Denton 10 0 5 0 Araceli Luque Martín-Sacristán 10 0 7 0 Ben Bolen 10 0 4 0 Bruce de Jongh 10 0 5 0 Charles Khazoom 10 0 5 0 Claudio Pizzolato 10 0 8 0 Colton Sauer 10 0 5 0 cristina vulpiani 10 0 6 0 Darius Nahavandi 10 0 7 0 Delyle Polet 10 0 4 0 Ekaterina Stansfield 10 0 6 0 Emma Pratt 10 0 4 0 fady alnajjar 10 0 6 0 Finn Eagen 10 0 5 0 Gabor Piskoty 10 0 5 0 Hazimah Mahmud 10 0 5 0 Jim Martin 10 0 3 0 Jin Z 10 0 6 0 Joe Prinold 10 0 5 0 John Hutchinson 10 0 5 0 Kornis Tamás 10 0 2 0 Lixin Sun 10 0 4 0 Madeline Grosklos 10 0 7 0 M.Ali Akhras 10 0 7 0 Maurice Lang 10 0 6 0 Mazen Al Borno 10 0 3 0 mehrdad davoodi 10 0 5 0 Michael Woodward 10 0 5 0 Michele Vanoncini 10 0 4 0 Mitsuhiro Hayashibe 10 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 5,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b10fd1a4-cf6b-4c64-b8f5-a7c91bb13360",
    "document_id": "doc_40",
    "content": "Eagen 10 0 5 0 Gabor Piskoty 10 0 5 0 Hazimah Mahmud 10 0 5 0 Jim Martin 10 0 3 0 Jin Z 10 0 6 0 Joe Prinold 10 0 5 0 John Hutchinson 10 0 5 0 Kornis Tamás 10 0 2 0 Lixin Sun 10 0 4 0 Madeline Grosklos 10 0 7 0 M.Ali Akhras 10 0 7 0 Maurice Lang 10 0 6 0 Mazen Al Borno 10 0 3 0 mehrdad davoodi 10 0 5 0 Michael Woodward 10 0 5 0 Michele Vanoncini 10 0 4 0 Mitsuhiro Hayashibe 10 0 4 0 Mojtaba Mirakhorlo 10 0 6 0 Nathan Knodel 10 5 3 1 nilay Shah 10 0 6 0 pauline neerpelt 10 0 7 0 Rahul Gharate 10 0 6 0 Snehal Shetye 10 0 3 0 Stephen Orsay 10 0 3 0 vahid F 10 0 5 0 Yanran Jiang 10 0 7 0 Yuichiro Omura 10 0 6 0 Yury G. 10 0 4 0 聂 倩文 10 0 8 0 Akshay Desai 9 0 5 0 ali safaeifar 9 0 1 0 Anne Koelewijn 9 0 4 0 Arnab Sikidar 9 0 3 0 Bart van Veen 9 0 4 0 Benjamin Michaud 9 0 7 0 Caesar Lin 9 0 6 0 Catherine Scarbrough 9 0 7 0 Christopher Lee 9 0 5 0 Colin Holtkamp 9 0 6 0 dana damian 9 0 6 0 Divyansh Gupta 9 0 4 0 Dongdong LI 9 0 5 0 Eric Rapp 9 0 6 0 Evgeniya Tomskaya 9 0 6 0 Gil Serrancolí 9 0 5 0 Giulia Ghielmi 9 0 7 0 Hamidreza Aftabi 9 0 5 0 Hao Yang Chan 9 0 7 0 Henry Nguyen 9 0 7 0 hesam boroomand 9 0 6 0 Jeremy Genter 9 0 4 0 Jordan Sturdy 9 0 7 0 Juan Leon 9 0 3 0 KATHLEEN BALFOUR 9 0 6 0 Katie Blessinger 9 0 5 0 Kevin Xu 9 0 6 0 kishan srinivas indrani 9 0 6 0 Laurence Fok 9 0 6 0 LEE JUSUNG 9 0 5 0 Lowell Rose 9 0 2 0 Lydia Willemse 9 0 5 0 Markus Kurz 9 0 6 0 Matthew Lee 9 0 6 0 michela gardi 9 0 5 0 Nahime Al Abiad 9 0 7 0 Namrata Kaundal 9 0 9 0 Nastaran Taefi Aghdam 9 0 5 0 Nathan Thompson 9 0 3 0 Pierre Lamouri 9 0 4 0 Ruth Ann Miller 9 0 3 0 Scott Kennedy 9 0 4 0 Sharmita Dey 9 0 5 0 Shravan Tata 9 0 5 0 Sreejan Alapati 9 0 4 0 Sven Paldauf 9 0 3 0 Therese Parr 9 0 6 0 Thomas Gagliardi 9 0 2 0 Umer Huzaifa 9 0 8 0 yanran jiang 9 0 7 0 Yokhesh KrishnasamyTamilselvam 9 0 4 0 Adrián Schmedling 8 0 6 0 Alejandro Medina 8 0 4 0 Andrew LaPre",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 6,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1da5e1a9-527b-4e95-ba65-12e0a959c772",
    "document_id": "doc_40",
    "content": "Nastaran Taefi Aghdam 9 0 5 0 Nathan Thompson 9 0 3 0 Pierre Lamouri 9 0 4 0 Ruth Ann Miller 9 0 3 0 Scott Kennedy 9 0 4 0 Sharmita Dey 9 0 5 0 Shravan Tata 9 0 5 0 Sreejan Alapati 9 0 4 0 Sven Paldauf 9 0 3 0 Therese Parr 9 0 6 0 Thomas Gagliardi 9 0 2 0 Umer Huzaifa 9 0 8 0 yanran jiang 9 0 7 0 Yokhesh KrishnasamyTamilselvam 9 0 4 0 Adrián Schmedling 8 0 6 0 Alejandro Medina 8 0 4 0 Andrew LaPre 8 0 3 0 Antonio Parziale 8 0 5 0 Apurva Zaveri 8 0 3 0 Aravind Sundararajan 8 0 5 0 Arthur Matta 8 0 3 0 arun ramakrishnan 8 0 7 0 Ashleigh Louise Wiseman 8 0 6 0 Aya Alwan 8 0 3 0 AYUSH RAI 8 0 7 0 Birgitt Peeters 8 0 5 0 Bonsung Koo 8 0 2 0 Caitlin Edgar 8 0 4 0 Cheng Fang 8 0 3 0 Clarise Choi 8 0 3 0 Clarissa LeVasseur 8 0 5 0 Dídac Coll 8 0 5 0 Edith Arnold 8 0 8 0 Edwin Prieto 8 0 4 0 Eric Greska 8 0 6 0 farzaneh yazdani 8 0 3 0 Feras Kiki 8 0 7 0 Giacomo Di Raimondo 8 0 5 0 Giorgio Davico 8 0 4 0 Giulia Cernivani 8 0 6 0 Guanxin Jiang 8 0 7 0 Hongyuan Chen 8 0 4 0 Ibrahim Hasan 8 0 4 0 Jasvir Bahl 8 0 5 0 Jessica Mayenburg 8 0 5 0 Jianlin Zheng 8 0 3 0 Jonathan SAVIN 8 0 5 0 Juliet M 8 0 4 0 Kamal Gautam 8 0 4 0 Kate Mockler 8 0 5 0 li haoran 8 0 5 0 Maria Cristina Panettieri 8 0 5 0 Maya Madhavan 8 0 2 0 Michael Samaan 8 0 5 0 Milosz Lukaszewicz 8 0 5 0 Morgan Sangeux 8 0 4 0 Morten Nielsen 8 0 5 0 Paul McAlpine 8 0 6 0 Rahul Gharate 8 0 4 0 Robert Catena 8 0 5 0 Sebastian Krapf 8 0 4 0 Seven Lau 8 0 5 0 Sheeba Davis 8 0 6 0 Simao Brito da Luz 8 0 4 0 Stefan Schmid 8 0 4 0 Usman Haider 8 0 6 0 Wahyu Kasendra Sugiarto 8 0 6 0 Wei Wang 8 0 3 0 yali liu 8 0 7 0 Yokoya Ryusuke 8 0 5 0 younguk kim 8 0 8 0 Yueh-Lin Lee 8 0 5 0 Ziyu Chen 8 1 3 1 Alessandro Navacchia 7 0 5 0 Alexander Bruno 7 0 4 0 Alexander Kotschwar 7 0 2 0 Alex Landauer 7 0 4 0 Alex Wilson 7 0 1 0 Andrea Braschi 7 0 5 0 Andreas Vollenweider 7 0 3 0 Andrea Zonnino 7 0 3 0 anna bicchi 7 0 5 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 7,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5cd869f2-1c0a-432a-8cec-a84c4603a11d",
    "document_id": "doc_40",
    "content": "0 6 0 Wahyu Kasendra Sugiarto 8 0 6 0 Wei Wang 8 0 3 0 yali liu 8 0 7 0 Yokoya Ryusuke 8 0 5 0 younguk kim 8 0 8 0 Yueh-Lin Lee 8 0 5 0 Ziyu Chen 8 1 3 1 Alessandro Navacchia 7 0 5 0 Alexander Bruno 7 0 4 0 Alexander Kotschwar 7 0 2 0 Alex Landauer 7 0 4 0 Alex Wilson 7 0 1 0 Andrea Braschi 7 0 5 0 Andreas Vollenweider 7 0 3 0 Andrea Zonnino 7 0 3 0 anna bicchi 7 0 5 0 anu goel 7 0 3 0 baoping xiong 7 0 2 0 Bas de Kruif 7 0 4 0 Catarina Ribeiro 7 0 4 0 Christian Greve 7 0 4 0 christian silva 7 0 3 0 Cristina Curreli 7 0 4 0 Dhyey Parikh 7 0 5 0 Dimitra Blana 7 0 5 0 Donald Ivan 7 0 4 0 Erin Bill 7 0 5 0 Filipa Joao 7 0 6 0 Florian Schellenberg 7 0 2 0 Gavin Lenton 7 0 3 0 Gitte Bertels 7 0 3 0 Giulio Dell''Oro 7 0 2 0 han jintao 7 0 4 0 Haruki Toda 7 0 4 0 Iman Shirinbayan 7 0 4 0 Jernej Camernik 7 0 3 0 Joseph Ewing 7 0 5 0 Junnan Li 7 0 5 0 Kamil Antos 7 0 4 0 Karelia Tecante 7 0 5 0 Kaushik Mukherjee 7 0 4 0 Koen Peters 7 0 3 0 Lena Lemmermann 7 0 4 0 Maarten Sarens 7 0 5 0 Mahdi Hassan 7 0 4 0 Marcel Rossi 7 0 4 0 Maria Cordero 7 2 4 1 Marika B 7 0 3 0 Mathew Varre 7 0 4 0 Matthew Edwards 7 0 4 0 Matthias Kindler 7 0 3 0 Maxime Bourgain 7 0 4 0 Melanie Hook 7 0 6 0 Michael Mauersberger 7 0 5 0 micheal Sacharin 7 0 3 0 Mohsen Sharifi Renani 7 0 5 0 Mona Zhu 7 0 4 0 Monica Armengol 7 0 5 0 Morteza Khosrotabar 7 0 5 0 Muhammad Sohail 7 0 4 0 Nafiseh Ebrahimi 7 0 3 0 Nate Bates 7 0 3 0 Neethan Ratnakumar 7 0 3 0 Nuray Korkmaz 7 0 3 0 pan zhengye 7 0 5 0 Peng Zhang 7 0 3 0 P Wesberg 7 0 3 0 Raul Munoz 7 0 1 0 Reinhard Hainisch 7 0 6 0 Reuben Addison 7 0 5 0 Rodrigo Bini 7 0 4 0 Rubens Jobs Borges de Souza 7 0 1 0 Sagar Joshi 7 0 4 0 Sarah Wohlman 7 0 5 0 Shelby Walford 7 0 6 0 Sina Tabeiy 7 0 5 0 Sreenath Perumal Ganeshbabu 7 0 3 0 suparna dey 7 0 6 0 Suvitti Suvitti 7 0 4 0 Thomas Lau 7 0 5 0 Vincent Berenz 7 0 4 0 YAMEN AL HABASH 7",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 8,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b9e05e6e-b634-4eca-a8c6-7f8edf8ecddb",
    "document_id": "doc_40",
    "content": "3 0 P Wesberg 7 0 3 0 Raul Munoz 7 0 1 0 Reinhard Hainisch 7 0 6 0 Reuben Addison 7 0 5 0 Rodrigo Bini 7 0 4 0 Rubens Jobs Borges de Souza 7 0 1 0 Sagar Joshi 7 0 4 0 Sarah Wohlman 7 0 5 0 Shelby Walford 7 0 6 0 Sina Tabeiy 7 0 5 0 Sreenath Perumal Ganeshbabu 7 0 3 0 suparna dey 7 0 6 0 Suvitti Suvitti 7 0 4 0 Thomas Lau 7 0 5 0 Vincent Berenz 7 0 4 0 YAMEN AL HABASH 7 0 3 0 Yann Amouyal 7 0 4 0 Yau JunKing 7 0 3 0 yuma ieshiro 7 0 3 0 ZAKARIA BOUZID 7 0 3 0 Afshin Samani 6 0 4 0 Alessandra Ricci 6 0 4 0 Alexandra Dunning 6 0 5 0 Alicia Blasi-Toccacceli 6 0 4 0 Ana Azevedo 6 0 4 0 Ana Diaz 6 0 3 0 Andreas Krüger 6 0 2 0 Andres Hernández 6 0 4 0 Ary Silvano 6 0 5 0 Aspen Taylor 6 0 4 0 Bach Quoc Hoa 6 0 3 0 bina bina 6 0 2 0 Burak Kula 6 0 6 0 Carlo Carraro 6 0 6 0 Csongor Barabasi 6 0 3 0 Daniel Iordanov 6 0 5 0 David Alexander Basabe 6 0 2 0 Davide Simonetti 6 0 3 0 David Wagner 6 0 2 0 Deepak Singh 6 0 5 0 Deepak Singh 6 0 4 0 Dennis Anderson 6 0 4 0 Derya Karabulut 6 0 3 0 Elon Martin 6 0 4 0 Emiliano Ravera 6 0 3 0 Emily Hubbard 6 0 5 0 Erica Montefiori 6 0 3 0 Eric Hu 6 4 3 3 Faiza Rasheed 6 0 3 0 Farid Farid 6 0 2 0 Felix Laufer 6 0 3 0 GEORGIY TOKUNOV 6 0 2 0 Giovanni Ferreira 6 0 2 0 Grace M 6 0 4 0 Guillermo Rodriguez 6 0 4 0 Hans-Jochen Edenhart 6 0 5 0 Hela Rhouma 6 0 5 0 HK Kim 6 0 3 0 Hooman Shirzadi 6 0 4 0 iman nabiyouni 6 0 5 0 Isotta Rigoni 6 0 4 0 Israel Luis 6 0 6 0 James Buffi 6 0 3 0 Jicheng Xia 6 0 3 0 Johannes Amend 6 0 4 0 John O Connor 6 0 4 0 John Paul Donlon 6 0 4 0 Jonathan Perdomo 6 0 3 0 Jonathan Walter 6 0 4 0 Joris Verhagen 6 0 3 0 Juan-Manuel Belda-Lois 6 0 3 0 julia kar 6 0 4 0 Julie Ellis 6 0 4 0 Justin Wager 6 0 4 0 Kanishk Sood 6 0 4 0 Katja Oberhofer 6 0 3 0 Kenneth Smale 6 0 5 0 Kirstie Devin 6 0 2 0 luis ortiz 6 0 3 0 Maarten Afschrift 6 0 5 0 Marcel Koczorowski 6 0 1 0 Maria Jönsson 6",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 9,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "31cf71f5-b428-4c09-8a0b-d233bf1fa60f",
    "document_id": "doc_40",
    "content": "O Connor 6 0 4 0 John Paul Donlon 6 0 4 0 Jonathan Perdomo 6 0 3 0 Jonathan Walter 6 0 4 0 Joris Verhagen 6 0 3 0 Juan-Manuel Belda-Lois 6 0 3 0 julia kar 6 0 4 0 Julie Ellis 6 0 4 0 Justin Wager 6 0 4 0 Kanishk Sood 6 0 4 0 Katja Oberhofer 6 0 3 0 Kenneth Smale 6 0 5 0 Kirstie Devin 6 0 2 0 luis ortiz 6 0 3 0 Maarten Afschrift 6 0 5 0 Marcel Koczorowski 6 0 1 0 Maria Jönsson 6 0 4 0 Marlies Nitschke 6 0 2 0 Maximillian Diaz 6 0 2 0 Mélissandre Asfazadourian 6 0 4 0 Mhairi McInnes 6 0 4 0 Michael Poppo 6 0 1 0 Michael Rosenberg 6 0 2 0 Michail Mamalakis 6 0 3 0 Muhammad Muaaz 6 0 3 0 Nathan Brantly 6 0 4 0 Nathan Pickle 6 0 5 0 Nehzat Hazratian 6 0 1 0 Nicole Strah 6 0 4 0 Patrick Laurin 6 0 2 0 Philippe Dixon 6 0 4 0 Rae Dias 6 0 6 0 Rajbeer Anand 6 0 2 0 Roger Pallarès López 6 0 4 0 Rose Newberry 6 0 4 0 Sara Ferrari 6 0 3 0 Sarah Roelker 6 0 5 0 Sergio Verduzco-Flores 6 0 2 0 Seyram Ofori 6 0 3 0 shakiba rafiee 6 0 3 0 shayan moradkhani 6 0 6 0 Shunafrica White 6 0 4 0 S Jul 6 0 3 0 Stefan van Drongelen 6 0 4 0 Takuma Inai 6 0 3 0 Tomas Kment 6 0 4 0 Vahidreza Jafari 6 0 6 0 veerendra v 6 0 4 0 Wang Xingyue 6 0 5 0 Wen Wu 6 0 4 0 William Dhein 6 0 3 0 Yanzhao Ma 6 0 3 0 YeongHun Kim 6 0 3 0 yoonsang lee 6 0 3 0 yujin kim 6 0 3 0 Zhenwei Liu 6 0 4 0 Zuren Arrh 6 0 2 0 解 浩 6 0 6 0 Ajay Talati 5 0 3 0 Ajith Malige 5 0 1 0 Alejandro Soler Fenoll 5 0 4 0 Alexander Barry 5 0 3 0 Alper Ayaz 5 0 3 0 Amanda Shorter 5 0 3 0 amin behdarvandan 5 0 1 0 Andrea Gargamelli 5 0 4 0 Andrew Lai 5 0 3 0 Annie Keener 5 0 1 0 Ann Piel 5 0 5 0 Arjun Jakhar 5 2 3 1 ARPIT BHUGUL 5 0 2 0 atabak mehrabani 5 0 4 0 Aurelien Adriaenssens 5 0 1 0 Aushim Nagarkatti 5 0 4 0 bao wendy 5 0 3 0 Benedict Koenen 5 0 4 0 Ben Sonnabend 5 0 3 0 Bojun Huang 5 0 4 0 Bruno Picasso 5 0 3 0 Caitlin Romanczyk 5 0 2 0 Carvell teo 5 0 5 0 César Flores 5 0 2 0 Chitra M Das 5",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 10,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c26960e5-f54d-40de-bdd6-ea6c0be25684",
    "document_id": "doc_40",
    "content": "Andrew Lai 5 0 3 0 Annie Keener 5 0 1 0 Ann Piel 5 0 5 0 Arjun Jakhar 5 2 3 1 ARPIT BHUGUL 5 0 2 0 atabak mehrabani 5 0 4 0 Aurelien Adriaenssens 5 0 1 0 Aushim Nagarkatti 5 0 4 0 bao wendy 5 0 3 0 Benedict Koenen 5 0 4 0 Ben Sonnabend 5 0 3 0 Bojun Huang 5 0 4 0 Bruno Picasso 5 0 3 0 Caitlin Romanczyk 5 0 2 0 Carvell teo 5 0 5 0 César Flores 5 0 2 0 Chitra M Das 5 0 3 0 Chris Drew 5 0 2 0 Chris McGibbon 5 0 2 0 Christopher Black 5 0 3 0 Cole Simpson 5 0 3 0 Daniella Bianchi 5 0 4 0 David André Gomez Romero 5 0 2 0 Diana Toderita 5 0 1 0 Dimitrios Tsaopoulos 5 0 5 0 Dina Sezavar Naderi 5 0 2 0 Dustin Crouch 5 0 5 0 Egle Vasiliauskaite 5 0 3 0 Elisa Panero 5 0 3 0 Elizabeth Schmida 5 0 3 0 Enrico Piovanelli 5 0 3 0 ESPERANZA CAMARGO 5 0 2 0 Evan Markley 5 0 2 0 Ezequiel Martín Sosa 5 0 4 0 Filippo Soremic 5 0 2 0 Filuta Ionescu 5 0 3 0 francesca bottin 5 0 3 0 Friedl De Groote 5 0 3 0 fujibe kenshun 5 0 3 0 Gabriel Britcher 5 0 3 0 Gabriel Oliveira 5 0 4 0 Garrett Tuer 5 0 3 0 Giuliano Lamberto 5 0 4 0 Guanxin Jiang 5 0 2 0 Guilherme Brodt 5 0 2 0 Hangil Lee 5 0 2 0 hans kainz 5 0 5 0 Han Xiang Lim 5 0 4 0 Heiko Stark 5 0 2 0 Hendrik Reimann 5 0 3 0 Houcheng Li 5 0 4 0 huang shen 5 0 4 0 huihui wang 5 0 5 0 Hyunggwi Song 5 0 4 0 inigo sanz 5 0 1 0 Ismail Raslan 5 0 3 0 Ivan Grebennik 5 0 4 0 Jacopo Buzzi 5 0 4 0 JAEHO JANG 5 0 3 0 Janek Butzer 5 0 2 0 Jared Lean 5 0 3 0 Jas K 5 0 3 0 Jason Moore 5 0 2 0 jeevan jayasuriya 5 0 3 0 Jens van der Wees 5 0 3 0 Jianwei Liu 5 0 2 0 jintao Pan 5 1 4 1 Joana Figueiredo 5 0 1 0 Johanim Chuquichampi 5 0 3 0 Jong In Han 5 0 2 0 Juan Camilo Rebeiz 5 0 5 0 Julia Noginova 5 0 3 0 Ju Zhang 5 0 2 0 Karin Lundengård 5 0 2 0 Katie Ewing 5 0 3 0 Ke Song 5 0 2 0 Konrad Mehle 5 0 4 0 K Sivaprasad 5 0 3 0 Kyle Chadwick 5 0 3 0 lorenza mancini 5 0 5 0 louis labadie 5 0 3 0 Luis Figueredo 5",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 11,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "aaca1044-aac0-4cb8-9825-34db07958d12",
    "document_id": "doc_40",
    "content": "Liu 5 0 2 0 jintao Pan 5 1 4 1 Joana Figueiredo 5 0 1 0 Johanim Chuquichampi 5 0 3 0 Jong In Han 5 0 2 0 Juan Camilo Rebeiz 5 0 5 0 Julia Noginova 5 0 3 0 Ju Zhang 5 0 2 0 Karin Lundengård 5 0 2 0 Katie Ewing 5 0 3 0 Ke Song 5 0 2 0 Konrad Mehle 5 0 4 0 K Sivaprasad 5 0 3 0 Kyle Chadwick 5 0 3 0 lorenza mancini 5 0 5 0 louis labadie 5 0 3 0 Luis Figueredo 5 0 2 0 Luke Burley 5 0 4 0 Luke Dahl 5 0 1 0 Mª del Mar Rodríguez Azor 5 0 2 0 maher mahdavi 5 0 2 0 Mainak Chakraborty 5 0 4 0 malin m 5 0 4 0 Marc Grepper 5 0 4 0 Marco Marchitto 5 0 2 0 Marco Senteler 5 0 5 0 Maria Fox 5 0 3 0 Marije Goudriaan 5 0 2 0 Marina Guihard 5 0 2 0 mateus freitas 5 0 1 0 Mathew Choi 5 0 3 0 Matilde Bertoli 5 0 2 0 Michael Bair 5 0 1 0 Michael Dube 5 0 4 0 Michael Lazar 5 0 3 0 Michael McGeehan 5 0 2 0 Michel Peltriaux 5 0 1 0 Mohamad Hammoud 5 0 3 0 Mohsen Alizadeh Noghani 5 0 4 0 Natalie Fragnito 5 0 4 0 Neha Sahu 5 0 5 0 nilakantha gupta 5 0 3 0 Nils Kästner 5 0 3 0 Nima Heidari 5 0 3 0 Noa Rahamim 5 0 4 0 Olivier Hartmann 5 0 2 0 Oskar Åsbrink 5 0 3 0 Patrick Riley 5 0 4 0 Paulien Roos 5 0 4 0 Paulo Melo 5 0 4 0 Pavlos Silvestros 5 0 4 0 Po Hsun Huang 5 0 2 0 Poramet Hemarachatanon 5 0 3 0 Rachel Jackson 5 0 2 0 Rahul Gharate 5 0 1 0 Renate van Zandwijk 5 0 3 0 Ricky Pimentel 5 0 2 0 Rishabh Gupta 5 0 3 0 Roberta Furone 5 0 3 0 Ryan Novotny 5 0 2 0 Sankalp Soni 5 0 4 0 Sanura Dunu Arachchige 5 0 4 0 Shanlin Zhong 5 0 4 0 Shiuan-Lin Huang 5 0 3 0 Shubham Goyal 5 0 2 0 shu zhang 5 0 3 0 siavash shirvanipour 5 0 4 0 Sina Porsa 5 0 3 0 Sofía Iranzo 5 0 4 0 Soh Saif 5 0 5 0 Stuart McNeill 5 0 1 0 Sultan Sultan 5 0 5 0 Tanyaporn Pungrasmi 5 0 5 0 Thomas Kernozek 5 0 3 0 Ting Long 5 0 3 0 Tom Correa 5 0 5 0 Tom Driessen 5 0 2 0 vikram chohan 5 0 2 0 Wan Zihao 5 0 5 0 wenyuan chen 5 0 5 0 Xiaoyan Hu 5 0 2 0 Yashvitha Thatigotla 5 0 2 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 12,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3866095e-ef9c-4343-9c90-735f1defd6b7",
    "document_id": "doc_40",
    "content": "5 0 3 0 siavash shirvanipour 5 0 4 0 Sina Porsa 5 0 3 0 Sofía Iranzo 5 0 4 0 Soh Saif 5 0 5 0 Stuart McNeill 5 0 1 0 Sultan Sultan 5 0 5 0 Tanyaporn Pungrasmi 5 0 5 0 Thomas Kernozek 5 0 3 0 Ting Long 5 0 3 0 Tom Correa 5 0 5 0 Tom Driessen 5 0 2 0 vikram chohan 5 0 2 0 Wan Zihao 5 0 5 0 wenyuan chen 5 0 5 0 Xiaoyan Hu 5 0 2 0 Yashvitha Thatigotla 5 0 2 0 Yongtao Lu 5 0 1 0 yunfeng deng 5 0 3 0 YU SHI 5 0 4 0 Yuta Shimane 5 0 3 0 zanne cox 5 0 2 0 Zu Xueying 5 0 3 0 世宣 黃 5 0 2 0 Adriana Jorge 4 0 3 0 Akira Okazaki 4 0 2 0 alejandro neira 4 0 3 0 Alejandro Otero 4 0 2 0 Alexander Bush 4 0 3 0 Alex Luya 4 0 1 0 Alex Noakes 4 0 2 0 Alice Siegel 4 0 1 0 Allison Kinney 4 1 2 1 Amirrezq Ziai 4 0 3 0 Andrew Meyer 4 0 3 0 andrew somerville 4 0 2 0 Angelo Cotroneo 4 0 3 0 Ann A 4 0 3 0 Anna Patterson 4 0 1 0 Anthony Gatti 4 0 2 0 Anthony Kulas 4 0 4 0 Aparecida Falcão de Andrade 4 0 1 0 Arthur Favennec 4 0 2 0 ashely yu 4 0 3 0 Ashlie Hocking 4 0 1 0 Azarang Asadi 4 0 4 0 Azin Zargham 4 0 1 0 Barbora Dvořáková 4 0 2 0 Bernard Liew 4 0 2 0 Brecca Gaffney 4 0 4 0 BRENDAN MALLORY 4 0 3 0 Brooke Odle 4 0 3 0 Bruno Pinto 4 0 3 0 Byungjoo Noh 4 0 4 0 Caitlin McCleery 4 0 1 0 Carvell Teo 4 0 4 0 Cassi Henderson 4 0 2 0 charles fell 4 0 2 0 Chen Songyun 4 0 2 0 Chongyuan Feng 4 0 3 0 Christian Ramirez 4 0 4 0 Claudia Casellato 4 0 2 0 Claudia Ghidini 4 0 3 0 Claudia Pr 4 0 1 0 Colin Rubow 4 0 4 0 davide ferrari 4 0 1 0 David Frenkel 4 0 3 0 David Reichert 4 0 2 0 David Torres 4 0 2 0 Derek Jacobs 4 0 2 0 D G 4 0 1 0 Dick Ameln 4 0 3 0 Diego Torricelli 4 0 3 0 dieter heinrich 4 0 2 0 Dom Willmore 4 0 3 0 Donald Hume 4 0 4 0 Duncan Lee 4 0 3 0 Edilson Borba 4 0 2 0 Eric Stetz 4 0 3 0 Erik Jung 4 0 2 0 Euisun Kim 4 0 3 0 faizah ansari 4 0 3 0 Fangshi Zhu 4 0 3 0 Felix Kraus",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 13,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5da2c306-b925-47ae-9a88-1458c211de7a",
    "document_id": "doc_40",
    "content": "3 0 David Reichert 4 0 2 0 David Torres 4 0 2 0 Derek Jacobs 4 0 2 0 D G 4 0 1 0 Dick Ameln 4 0 3 0 Diego Torricelli 4 0 3 0 dieter heinrich 4 0 2 0 Dom Willmore 4 0 3 0 Donald Hume 4 0 4 0 Duncan Lee 4 0 3 0 Edilson Borba 4 0 2 0 Eric Stetz 4 0 3 0 Erik Jung 4 0 2 0 Euisun Kim 4 0 3 0 faizah ansari 4 0 3 0 Fangshi Zhu 4 0 3 0 Felix Kraus 4 0 3 0 Felix Laufer 4 0 2 0 Florent Moissenet 4 0 1 0 Francesca Dell''Eva 4 0 4 0 Gabriel Del Castillo 4 0 2 0 giovanni pestrichella 4 0 3 0 Giulia Lisco 4 0 4 0 Glaxon Lewis 4 0 4 0 Hae Dong Lee 4 0 2 0 Hamidreza Abbaspourazad 4 0 3 0 Haneef Hamzah 4 0 3 0 Hanzhe Li 4 0 2 0 Hossein Mokhtarzadeh 4 0 1 0 Huseyin Celik 4 0 4 0 hu zhao 4 0 3 0 ian williams 4 0 3 0 Ira Hill 4 0 2 0 itay coifman 4 0 4 0 Ivan Alpatov 4 0 1 0 Jana Egli 4 0 3 0 Jan Buschbaum 4 0 2 0 Jazmin Cruz 4 0 3 0 Jennifer Dowling-Medley 4 0 2 0 Jennifer Nichols 4 0 1 0 Jessica Skinner 4 0 2 0 Jiacheng Weng 4 0 1 0 Jia Cheng Xu 4 0 3 0 jiahao chen 4 0 2 0 Jianwei Qiu 4 0 3 0 Joanne Becker 4 0 2 0 João Cunha 4 0 3 0 Joel Lanovaz 4 0 2 0 Johannes Hänlein 4 0 3 0 John Hutchinson 4 0 2 0 Jong Hwa Lee 4 0 3 0 jordan ryan 4 0 1 0 Joseph Mainberg 4 0 3 0 Joy Ku 4 0 3 0 Julie Dillon 4 0 2 0 Justin Wei 4 0 2 0 Kamin Beyer 4 0 3 0 Karen Roemer 4 0 1 0 Karin Lundengard 4 0 3 0 katya stansfield 4 0 3 0 kazuhiro ikeda 4 0 2 0 Kevin Hao 4 0 4 0 Kevin Sommler 4 0 2 0 Kiatbodin Wanglertpanich 4 0 3 0 Kumar Soma 4 0 2 0 Laura Martin 4 0 3 0 Le Zhou 4 0 2 0 Louis Paire 4 0 2 0 Lukas Connolly 4 0 3 0 Luke Mattar 4 0 3 0 Madeleine Bates 4 0 3 0 Marcin Burdzy 4 0 2 0 Marco Capogrosso 4 0 2 0 Maria Lua Coelho Nunes 4 0 1 0 Mario Martinez-Zarzuela 4 0 2 0 Marisa Macias 4 0 3 0 Mark Nolette 4 0 4 0 Markus Stålbom 4 0 2 0 Martin Nousi 4 0 1 0 Maryam Ashkbous 4 0 4 0 Mattia Pesenti 4 0 2 0 mehri makki 4 0 4 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 14,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cb020d82-26cb-430f-9f3f-a6577c5d131d",
    "document_id": "doc_40",
    "content": "3 0 Le Zhou 4 0 2 0 Louis Paire 4 0 2 0 Lukas Connolly 4 0 3 0 Luke Mattar 4 0 3 0 Madeleine Bates 4 0 3 0 Marcin Burdzy 4 0 2 0 Marco Capogrosso 4 0 2 0 Maria Lua Coelho Nunes 4 0 1 0 Mario Martinez-Zarzuela 4 0 2 0 Marisa Macias 4 0 3 0 Mark Nolette 4 0 4 0 Markus Stålbom 4 0 2 0 Martin Nousi 4 0 1 0 Maryam Ashkbous 4 0 4 0 Mattia Pesenti 4 0 2 0 mehri makki 4 0 4 0 Micheal Seller 4 0 1 0 Michele Vivian 4 0 2 0 michell castrillón sepúlveda 4 0 3 0 Mikael Koeneke 4 0 2 0 mike bayfield 4 0 4 0 Modinat Sanni 4 0 2 0 Moha Fard 4 0 2 0 Mohamed Salaheldin 4 0 2 0 Mohammadhossein Saadatzi 4 0 3 0 Mostafa Hajlotfalian 4 0 4 0 Murray Headrick 4 0 3 0 Naira Audi 4 0 1 0 Navid Roux 4 0 2 0 Na Zhonglai 4 0 2 0 Neelma Mumtaz 4 0 3 0 Nicholas Ozanich 4 0 2 0 Nicolas Barrera Bateman 4 0 3 0 Obidah Alawneh 4 0 4 0 Olesya Klets 4 0 3 0 Oliver Demuth 4 0 3 0 Orkun Özkurtul 4 0 1 0 Pa G 4 0 3 0 Pedro Figueroa 4 0 1 0 Peter Martindale 4 0 3 0 Peter Sinclair 4 0 1 0 Peter Staab 4 0 3 0 Pierre PUCHAUD 4 0 2 0 Poramet Hemarachatanon 4 0 4 0 Pranav Mamidanna 4 0 2 0 puneet kumar 4 0 4 0 qi bo 4 0 2 0 Rachel Baker 4 0 3 0 Rahmatullah Safdar 4 0 4 0 Rajarshi Roy 4 0 2 0 Rebecca Lambach 4 0 2 0 Riley Edmonds 4 0 1 0 Romain Martinez 4 0 3 0 Ryo Ueno 4 0 3 0 Saadia Talay 4 0 4 0 Safiya Lambert 4 0 2 0 Saiyi Li 4 0 3 0 samane amini 4 0 3 0 Sam R. 4 0 3 0 Sandra Shefelbine 4 0 3 0 Santiago Berrio 4 0 4 0 Seungyeon Kim 4 0 3 0 Silvia Buscaglione 4 2 1 1 simone carminati 4 0 3 0 soroosh bagheri 4 0 1 0 Srikant Vallabhajosula 4 0 1 0 Stefano Piazza 4 0 2 0 Sudharshan Tripathi 4 0 3 0 Sujash Bhattacharya 4 0 3 0 suzunosuke nagaoka 4 0 3 0 Swathi Gangaraju 4 0 3 0 Takuya Kato 4 0 3 0 Tim No 4 0 2 0 Todd Pataky 4 0 1 0 Tom Van Wouwe 4 0 4 0 Tristan Venot 4 0 1 0 Ursula Schulz 4 0 3 0 Valentina Amori 4 0 3 0 Veerle Creylman 4 0 1 0 Vidhey Oza 4 0 2 0 Vijay Bhaskar Semwal 4 0 3 0 Walter Menke 4 0 2 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 15,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e51e4a6e-e8e2-47bb-9dca-061114227512",
    "document_id": "doc_40",
    "content": "1 0 Stefano Piazza 4 0 2 0 Sudharshan Tripathi 4 0 3 0 Sujash Bhattacharya 4 0 3 0 suzunosuke nagaoka 4 0 3 0 Swathi Gangaraju 4 0 3 0 Takuya Kato 4 0 3 0 Tim No 4 0 2 0 Todd Pataky 4 0 1 0 Tom Van Wouwe 4 0 4 0 Tristan Venot 4 0 1 0 Ursula Schulz 4 0 3 0 Valentina Amori 4 0 3 0 Veerle Creylman 4 0 1 0 Vidhey Oza 4 0 2 0 Vijay Bhaskar Semwal 4 0 3 0 Walter Menke 4 0 2 0 Wanja Jayden 4 4 4 4 Wayne Yin 4 0 3 0 w d 4 0 1 0 Wen Wu 4 0 2 0 Will Bosch-Vuononen 4 0 1 0 Willem Ruseno 4 0 2 0 wuhaohao wuhaoaho 4 0 2 0 Xiang Yang 4 0 2 0 XIAODONG HE 4 0 3 0 Xiaoqin Li 4 0 1 0 Yu Zhang 4 0 3 0 zhizheng hu 4 0 2 0 abhiraj singh 3 0 1 0 Abigail Eustace 3 0 1 0 Adam Kewley 3 0 3 0 Adam Rozumalski 3 0 1 0 Aida M N R 3 0 1 0 akhil s anand 3 0 1 0 Alessandra Scarton 3 0 3 0 Alexander Jakubiec 3 0 1 0 Alexander Rajan 3 0 2 0 Alexandra Lancaster 3 0 2 0 Alexandra Vollenweider 3 0 1 0 Alexandre Pelegrinelli 3 0 2 0 Alex Woodall 3 0 2 0 Ali Adil Lashari 3 0 1 0 Ali Baradaran 3 0 2 0 Ali Tlisov 3 0 3 0 AMAIA ILZARBE 3 0 2 0 Amber Liu 3 0 2 0 Amir Abbas Zadpoor 3 0 2 0 Amy Robinson 3 0 2 0 Amy Silder 3 0 2 0 Ana Algora 3 0 2 0 Anastasia Pavlova 3 0 1 0 Andrea Ponza 3 0 1 0 Andrea Roberti 3 0 1 0 Andre Pereira 3 0 1 0 Andrew Goodwin 3 0 1 0 Andrew Kraszewski 3 0 2 0 Andrew Wong 3 0 1 0 Annemiek van den Broek 3 0 2 0 Apoorva Rajagopal 3 0 3 0 assal farrahi 3 0 2 0 Avery Moe 3 0 1 0 axel axel 3 0 2 0 Benjamin Johnson 3 0 1 0 Bethany Cseke 3 0 2 0 Brandon Fugger 3 0 3 0 Brett Allaire 3 0 2 0 Bryant Sih 3 0 1 0 Carolin Renz 3 0 2 0 Carrie Ling 3 0 3 0 Catarina Santos 3 0 2 0 Chao Chen 3 0 3 0 Charlie Lang 3 0 3 0 Chatti Malek 3 0 1 0 Chen Wenqian 3 0 1 0 Chris Basu 3 0 2 0 Christopher Robin 3 0 2 0 Christopher Shallal 3 0 1 0 Chuan He 3 0 1 0 Clara Balust 3 0 3 0 Clara Meunier 3 0 2 0 Claudia Casellato 3 0 2 0 Cobus Muller 3",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 16,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "82892bb7-37fc-4e5c-8340-af512463f8a5",
    "document_id": "doc_40",
    "content": "0 Brett Allaire 3 0 2 0 Bryant Sih 3 0 1 0 Carolin Renz 3 0 2 0 Carrie Ling 3 0 3 0 Catarina Santos 3 0 2 0 Chao Chen 3 0 3 0 Charlie Lang 3 0 3 0 Chatti Malek 3 0 1 0 Chen Wenqian 3 0 1 0 Chris Basu 3 0 2 0 Christopher Robin 3 0 2 0 Christopher Shallal 3 0 1 0 Chuan He 3 0 1 0 Clara Balust 3 0 3 0 Clara Meunier 3 0 2 0 Claudia Casellato 3 0 2 0 Cobus Muller 3 0 1 0 Cody peng 3 0 2 0 Craig Carignan 3 0 1 0 Cristina Chieffo 3 0 2 0 Daan de Kanter 3 0 2 0 Dafne Pinto 3 0 2 0 Dalia Di Fraia 3 0 1 0 Daniel Álvarez 3 0 2 0 Daniel Dorman 3 0 2 0 Daniel McFarland 3 0 3 0 daniel miletto 3 0 2 0 Daniel Oldis 3 0 2 0 Daniel Rossi 3 0 2 0 David Pérez 3 0 3 0 David Zou 3 0 2 0 dayo adekoya 3 0 3 0 Dennis Da Corte 3 0 1 0 Diana Gueorguieva 3 0 1 0 dimitri mardama nayagom 3 0 1 0 Dmytro Radevych 3 0 2 0 Dominik Hoelbling 3 0 1 0 Dorota Natalia 3 0 3 0 Elias Bachmann 3 0 2 0 Elsa Hernandez 3 0 3 0 Elton Dmello 3 0 1 0 Emiko Hourston 3 0 1 0 Emily Klinkman 3 0 3 0 Emily McCain 3 0 1 0 Eoin Gleeson 3 0 2 0 Eric Sisneros 3 0 1 0 Eric Tang 3 0 2 0 Erik Wilmes 3 0 1 0 Esteban Osella 3 0 1 0 Federico Scholcoff 3 0 1 0 feng wei 3 0 3 0 Filippo Motta 3 0 3 0 Florian Gravo 3 0 2 0 Fouad Matari 3 0 3 0 Francesca Carbone 3 0 1 0 Francine Leung 3 0 2 0 Frank Clay Anderson 3 0 3 0 Frank Wouda 3 0 1 0 Free Free 3 0 1 0 Ganesh Bapat 3 0 1 0 gareth roberts 3 0 2 0 Gaurav Girish 3 0 2 0 George Chao 3 0 1 0 Georg Stillfried 3 0 1 0 Gnapika Talluri 3 0 3 0 Greg Orekhov 3 0 2 0 Griffin Holt 3 0 1 0 Guilherme Nogueira 3 0 1 0 Gustavo Marin Paulon 3 1 3 1 Hao Ma 3 0 1 0 help needed 3 0 2 0 Henry Winter 3 0 2 0 hHooman shirzadi 3 0 3 0 Hubert Soyer 3 0 2 0 H V 3 0 1 0 Hwan Choi 3 0 3 0 Ian Cost 3 0 1 0 Ignacio Abadía 3 0 2 0 Istvan Lauko 3 0 1 0 jaebeom jo 3 0 2 0 Jakob Karner 3 0 2 0 Jan Grutters 3 0 1 0 Janni",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 17,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9f8c7763-3f09-481f-bb70-6db740c596f5",
    "document_id": "doc_40",
    "content": "2 0 Griffin Holt 3 0 1 0 Guilherme Nogueira 3 0 1 0 Gustavo Marin Paulon 3 1 3 1 Hao Ma 3 0 1 0 help needed 3 0 2 0 Henry Winter 3 0 2 0 hHooman shirzadi 3 0 3 0 Hubert Soyer 3 0 2 0 H V 3 0 1 0 Hwan Choi 3 0 3 0 Ian Cost 3 0 1 0 Ignacio Abadía 3 0 2 0 Istvan Lauko 3 0 1 0 jaebeom jo 3 0 2 0 Jakob Karner 3 0 2 0 Jan Grutters 3 0 1 0 Janni Reto 3 0 1 0 Jasper Verheul 3 0 1 0 Jeff Reinbolt 3 0 3 0 Jeffrey Min 3 0 2 0 Jenna Li 3 0 1 0 jeremy antoni 3 0 2 0 Jeroen Aeles 3 0 2 0 Jerson Fabian Maldonaod moreno 3 0 1 0 Jesse Garnier 3 0 3 0 Jiahao Zhou 3 0 2 0 jin zhang 3 0 2 0 Jip Helsloot 3 0 2 0 Johann Ployer 3 0 1 0 Johnapaul Allagoa 3 0 2 0 John Gao 3 0 3 0 John Kelly 3 0 2 0 john pope 3 0 2 0 Jon Akins 3 0 1 0 Jonathan Sinclair 3 0 3 0 Jordan Yee 3 0 3 0 Jose Lema 3 0 1 0 Julia Gregorowicz 3 0 2 0 Julian Saldarriaga 3 0 2 0 Junfen Shi 3 0 2 0 Kaan Divringi 3 0 3 0 kaci chahrazed 3 0 1 0 Kaitlin Lostroscio 3 0 2 0 Kaleb Burch 3 0 1 0 Kaleb Sellers 3 0 1 0 Kardelen E. 3 0 1 0 Karinne Ramirez 3 0 2 0 Karolina Saegner 3 0 3 0 Karol Marshal 3 0 3 0 Karthik Sama 3 0 2 0 Kate J. 3 0 1 0 Kathryn Whalley 3 0 1 0 Katie Farris 3 0 2 0 Katie Werner 3 0 1 0 Kendall Guo 3 0 1 0 Kevin Soter 3 0 1 0 Khalid Alharbi 3 0 2 0 Khang Nguyen 3 0 2 0 Kim Larsen 3 0 1 0 kolani Paraiso 3 0 1 0 Kunal Singhal 3 0 2 0 Kunpeng Yao 3 0 1 0 Kyungwon Moon 3 0 2 0 Lakshmi Vidya Peri 3 0 1 0 Landais Erwann 3 0 2 0 Lars Focke 3 0 1 0 Lauren Sepp 3 0 2 0 Lea Berberich 3 0 3 0 Leif Eric Goebel 3 0 2 0 Leng-Feng Lee 3 0 3 0 Lennart Schut 3 0 1 0 leosky kidd 3 0 2 0 Levi Schilder 3 0 3 0 Lisa Jonas 3 0 2 0 l l 3 0 3 0 lubna jbawi 3 0 1 0 Lucas Wolf 3 0 2 0 Lucia Košturiaková 3 0 1 0 Lukas Kaiser 3 0 1 0 Lukas Schmitz 3 0 2 0 Lynn van Zijl 3 0 2 0 mahdieh h 3 0 2 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 18,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1b0ffeda-522f-4e30-ab82-e7deb940275c",
    "document_id": "doc_40",
    "content": "1 0 Lauren Sepp 3 0 2 0 Lea Berberich 3 0 3 0 Leif Eric Goebel 3 0 2 0 Leng-Feng Lee 3 0 3 0 Lennart Schut 3 0 1 0 leosky kidd 3 0 2 0 Levi Schilder 3 0 3 0 Lisa Jonas 3 0 2 0 l l 3 0 3 0 lubna jbawi 3 0 1 0 Lucas Wolf 3 0 2 0 Lucia Košturiaková 3 0 1 0 Lukas Kaiser 3 0 1 0 Lukas Schmitz 3 0 2 0 Lynn van Zijl 3 0 2 0 mahdieh h 3 0 2 0 Maria Krukovic 3 0 1 0 Marie Schmidt 3 0 1 0 Mark de Niet 3 0 1 0 Mark Golab 3 0 1 0 Mark Price 3 0 2 0 Mark Weston 3 0 2 0 Martin Groesel 3 0 1 0 Martin Hora 3 0 3 0 Maryam khamar 3 0 2 0 Masaya Hayashikawa 3 2 2 2 Matt Petrucci 3 0 3 0 Maxence Lavaill 3 0 2 0 Maxime pernot 3 0 2 0 Maxine Olson 3 0 2 0 Max Riesbeck 3 0 1 0 Mehri Gruzu 3 0 2 0 Meng Guan 3 3 2 2 Micah Garcia 3 0 1 0 Michael Heil 3 0 2 0 Mickaelly Bezerra 3 0 2 0 Miguel González-Fierro 3 0 2 0 Mike Howard 3 0 2 0 Milan Chandarana 3 0 1 0 Millie Morley 3 0 3 0 minghao li 3 0 2 0 Mohan Krishna Kallakanti 3 0 2 0 Molly Shepherd 3 0 2 0 Morgane Garaudet 3 0 2 0 Narek Ginoyan 3 0 2 0 Nasma Dasser 3 0 1 0 Nayun Ahn 3 0 1 0 Ne Giii 3 0 1 0 Neri Pierotti 3 0 2 0 Nerissa Smit 3 0 2 0 Nev Pires 3 0 2 0 N R 3 0 1 0 Olivier Desclaux 3 0 2 0 Olivier Vandebroucke 3 0 3 0 opensim user 3 0 2 0 Owen Pearl 3 0 1 0 Paige Kendell 3 0 2 0 Pamodya Peiris 3 0 2 0 Paola Jaramillo 3 0 2 0 Patrick Fasbender 3 0 2 0 Patrick Wettenschwiler 3 0 1 0 Paweł Jasiński 3 0 1 0 Phong Phan 3 0 2 0 Phuong bui 3 0 1 0 Poramet Hemarachatanon 3 0 2 0 Pouyan Mehryar 3 0 1 0 prashant bagde 3 0 3 0 Puja Ghosh 3 0 3 0 Rahul Gharate 3 0 3 0 Rajnish kumar 3 0 2 0 Raj Patel 3 0 2 0 RANDHEER SINGH 3 1 3 1 Raphaël Gaiffe 3 0 1 0 Rebecca Gow 3 0 3 0 Renata Rodrigues 3 0 2 0 Richardo Khonasty 3 0 2 0 Ritwik Rakshit 3 0 1 0 Rizki Fajar 3 0 1 0 Robert Huffman 3 0 2 0 Roberto Bortoletto 3 0 2 0 Ryan Chhiba 3 0 2 0 Ryan Frost 3 0 3 0 Ryan Kim",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 19,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7216b8a5-382d-4954-bd9f-cfd3aed7d78f",
    "document_id": "doc_40",
    "content": "1 0 prashant bagde 3 0 3 0 Puja Ghosh 3 0 3 0 Rahul Gharate 3 0 3 0 Rajnish kumar 3 0 2 0 Raj Patel 3 0 2 0 RANDHEER SINGH 3 1 3 1 Raphaël Gaiffe 3 0 1 0 Rebecca Gow 3 0 3 0 Renata Rodrigues 3 0 2 0 Richardo Khonasty 3 0 2 0 Ritwik Rakshit 3 0 1 0 Rizki Fajar 3 0 1 0 Robert Huffman 3 0 2 0 Roberto Bortoletto 3 0 2 0 Ryan Chhiba 3 0 2 0 Ryan Frost 3 0 3 0 Ryan Kim 3 0 3 0 Ryan Roemmich 3 0 1 0 Sabrina Amrein 3 0 2 0 Sabrina Too 3 0 2 0 Sagar Tom 3 0 2 0 Sahand Ghodrati 3 0 2 0 Sajad Bagherian 3 0 3 0 Salhi Asma 3 0 2 0 Sami Khan 3 0 2 0 Samuel Parker 3 0 2 0 Sandy Tschounes 3 0 2 0 Santiago Canete 3 0 3 0 Scott Guthart 3 0 1 0 Scott Henry 3 0 2 0 Sergiu Iliev 3 0 2 0 sevrez violaine 3 0 1 0 Simone Bersini 3 0 2 0 SimTK.org Admin 3 0 3 0 Spencer Baker 3 0 2 0 Spencer Savoies 3 0 2 0 Srihari A 3 0 3 0 sumit kumar 3 0 2 0 SUNG JOON SONG 3 0 2 0 sunhan sunhan 3 0 2 0 Suraj Panigrahi 3 0 1 0 Sylvia Zhang 3 0 2 0 Szymon Niemiec 3 0 3 0 Takashi Yoshida 3 0 1 0 Tamesh Halder 3 0 2 0 tayebeh namayeshi 3 0 3 0 Themis Toumanidou 3 0 1 0 Thomas Corie 3 0 2 0 Thomas Lober 3 0 1 0 Thomas Mokadim 3 0 3 0 Thomas Wei 3 0 2 0 Tiago Malaquias 3 0 2 0 Tim Zulj 3 0 2 0 Tobias Klauser 3 0 1 0 Uğur Mengilli 3 0 1 0 Vaughn Friesen 3 0 2 0 Vi Do Tran 3 0 2 0 Vikrama Raghuraman 3 0 3 0 Vincent Tate 3 0 3 0 Vrutangkumar Shah 3 0 1 0 wang xingsheng 3 0 1 0 WANG YANG 3 0 3 0 Wendy Murray 3 0 1 0 Wenye He 3 0 3 0 wilfried van dyk 3 0 2 0 William Edwards 3 0 2 0 William Lee 3 0 1 0 Will Johnson 3 0 1 0 Yasniary Morales 3 0 1 0 Yasser Abdelrahman 3 0 2 0 Yeram Lim 3 0 2 0 Yixin Shen 3 0 3 0 Yixuan Sheng 3 0 2 0 Y L 3 0 2 0 Yuliang Sun 3 0 2 0 yu lu 3 0 3 0 Yu Zhou 3 0 3 0 Zach Lerner 3 0 2 0 zhe jing 3 0 2 0 zheng kai 3 0 2 0 王 宇彬 3 0 2 0 3d tech 2 0 2 0 Aaron E-J 2",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 20,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "fd50a1b1-0a27-461f-addf-67c9b9e157d8",
    "document_id": "doc_40",
    "content": "0 William Lee 3 0 1 0 Will Johnson 3 0 1 0 Yasniary Morales 3 0 1 0 Yasser Abdelrahman 3 0 2 0 Yeram Lim 3 0 2 0 Yixin Shen 3 0 3 0 Yixuan Sheng 3 0 2 0 Y L 3 0 2 0 Yuliang Sun 3 0 2 0 yu lu 3 0 3 0 Yu Zhou 3 0 3 0 Zach Lerner 3 0 2 0 zhe jing 3 0 2 0 zheng kai 3 0 2 0 王 宇彬 3 0 2 0 3d tech 2 0 2 0 Aaron E-J 2 0 1 0 A B 2 0 2 0 abdulmajid al-amodi 2 0 2 0 Abigail Waugh 2 0 1 0 Adam Klodowski 2 0 1 0 Adam Spiers 2 0 1 0 Adebusayo Kolade 2 0 1 0 Adrian Derungs 2 0 1 0 afafa dfadfadfadf 2 0 2 0 Ahmed Abdu 2 0 1 0 AHMED AWAD 2 0 1 0 A J 2 0 1 0 Akash Naik 2 0 1 0 Akhilesh Jha 2 0 1 0 Akingson Khoo 2 0 2 0 Aldrin Padua 2 0 2 0 Alessandro Pirelli 2 0 2 0 Alessio Murgia 2 0 1 0 Alexander Lam 2 0 1 0 Alexander Ruf 2 0 1 0 Alexandra Santos 2 0 1 0 Alexia S. 2 0 1 0 Alex Karate 2 0 1 0 Alex Smith 2 0 1 0 Ali Forouzanfar 2 0 2 0 Alonso Garcia 2 0 1 0 Álvaro Bertelsen 2 0 1 0 Amanda Vinson 2 0 2 0 Amir Iqbal 2 0 2 0 Amy Hegarty 2 0 2 0 Ana Vale 2 0 2 0 Andreas Christou 2 0 2 0 Andrea Vivaldi 2 0 2 0 Andrew Bossert 2 0 1 0 Andrew Dressel 2 0 1 0 Andrew Su 2 0 2 0 Angayarkanni Saravana 2 0 1 0 Anna Ventura 2 0 2 0 Anna Yeakel 2 0 1 0 Anne de Swart 2 0 1 0 Anne Hart 2 0 2 0 Anthony FitzPatrick 2 0 1 0 Antoine BERGER 2 0 1 0 Antonio Vecchio 2 0 1 0 anton kaniewski 2 0 1 0 Ashhar Hasan 2 0 2 0 Ashley Chambers 2 0 1 0 Ashley Rhyne 2 0 1 0 Aubin Doise 2 0 1 0 Austin Sawyer 2 0 1 0 azarang asadi 2 0 1 0 Bahar Sharafi 2 0 1 0 Barbara Presley 2 0 1 0 Beatriz Hörmanseder 2 0 1 0 Benedetta Baldini 2 0 1 0 Bertrand Pinet 2 0 1 0 blake harper 2 0 2 0 Blakely Keeling 2 0 2 0 Bowen Yang 2 0 1 0 Bradford Kerst 2 0 1 0 Bradley Beck 2 0 2 0 Brad Wash 2 0 2 0 Brandon To 2 0 1 0 Brett Hannigan 2 0 1 0 Brian Jones 2 0 1 0 Brianna Goodwin 2 0 1 0 Brid Stepper 2 0 2 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 21,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e7b5e03b-3d10-4b01-80ab-617d7dc67575",
    "document_id": "doc_40",
    "content": "2 0 1 0 Bahar Sharafi 2 0 1 0 Barbara Presley 2 0 1 0 Beatriz Hörmanseder 2 0 1 0 Benedetta Baldini 2 0 1 0 Bertrand Pinet 2 0 1 0 blake harper 2 0 2 0 Blakely Keeling 2 0 2 0 Bowen Yang 2 0 1 0 Bradford Kerst 2 0 1 0 Bradley Beck 2 0 2 0 Brad Wash 2 0 2 0 Brandon To 2 0 1 0 Brett Hannigan 2 0 1 0 Brian Jones 2 0 1 0 Brianna Goodwin 2 0 1 0 Brid Stepper 2 0 2 0 Bryan Kirking 2 0 1 0 Bryan Schlink 2 0 1 0 Cailin Rice 2 0 1 0 Camille Pouliquen 2 0 1 0 Carlo Rasetto 2 0 1 0 carlos barreto 2 2 1 1 Carlos Fliger 2 0 1 0 Carmen Muller 2 0 1 0 C Bandmann 2 0 1 0 Cédric Stark 2 0 1 0 Celestine Segbefia 2 0 1 0 Chad Yu 2 0 1 0 changxiao Yu 2 0 2 0 chan liang 2 0 2 0 CHARLES COLBERT 2 0 1 0 charles pontonnier 2 0 2 0 Cheng Youliang 2 0 2 0 Chengzheng Mao 2 0 2 0 chen qiangguoq 2 0 2 0 Cherub Kim 2 0 1 0 Chitra M Das 2 0 1 0 Chris Kain 2 0 1 0 Chris Richards 2 0 1 0 Christian Hauskov Iversen 2 0 1 0 Christian Schauer 2 0 1 0 Christian Schranz 2 0 1 0 Christine Buffinton 2 0 1 0 Chrysa Tsimperi 2 0 2 0 Chun-Ming Chang 2 0 1 0 C.J. Kennett 2 0 2 0 Claudia Castaneda 2 0 2 0 Claudio comotti 2 0 1 0 Coline Van Waerbeke 2 0 1 0 Colton Sauer 2 0 2 0 Conrad Slater 2 0 1 0 Craig Goehler 2 0 2 0 Cristiana Pinheiro 2 0 2 0 Daiki Mizoe 2 0 1 0 Damith Madusanka 2 0 1 0 damla deniz 2 0 1 0 Daniel Duato Catalán 2 0 1 0 Daniele Ascani 2 0 1 0 Daniel Free 2 0 1 0 Daniel Jacobs 2 0 2 0 Daniel Rivera 2 0 1 0 Daniel Santana 2 0 1 0 Dan Kritzer 2 0 2 0 Darina Šedovičová 2 0 1 0 Darius Nahavandi 2 0 2 0 Davide Conte 2 0 2 0 Davide Monari 2 0 2 0 Davide Pavan 2 0 1 0 David Graham 2 0 2 0 David Ortiz 2 0 1 0 David Rusbarsky 2 0 1 0 Daziyah Sullivan 2 0 1 0 Di-An Hong 2 0 1 0 Diego Aguilera 2 0 1 0 Dixy Dreamscape 2 0 2 0 Dominic Farris 2 0 2 0 Dominic Gehring 2 0 1 0 Donatella Simonetti 2 0 1 0 Eduardo Tavares 2 0 1 0 Elena Caruthers 2 0 2 0 Elijah Lucey 2 0 1 0 Elizabeth Sylvestre 2 0 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 22,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7a4e887a-f73e-419d-91b5-57bcbbe38b9d",
    "document_id": "doc_40",
    "content": "2 0 2 0 Davide Monari 2 0 2 0 Davide Pavan 2 0 1 0 David Graham 2 0 2 0 David Ortiz 2 0 1 0 David Rusbarsky 2 0 1 0 Daziyah Sullivan 2 0 1 0 Di-An Hong 2 0 1 0 Diego Aguilera 2 0 1 0 Dixy Dreamscape 2 0 2 0 Dominic Farris 2 0 2 0 Dominic Gehring 2 0 1 0 Donatella Simonetti 2 0 1 0 Eduardo Tavares 2 0 1 0 Elena Caruthers 2 0 2 0 Elijah Lucey 2 0 1 0 Elizabeth Sylvestre 2 0 1 0 emanuele feola 2 0 1 0 Emily Eichenlaub 2 0 1 0 Emma Martí 2 0 2 0 Emma Martí 2 0 2 0 Emmanouil Antonios Platanios 2 0 2 0 Endale Schilling 2 0 2 0 erika ogami 2 0 2 0 fa shu 2 0 1 0 fay fang 2 0 1 0 Felicia Davenport 2 0 2 0 Felix Jung 2 0 2 0 Felix Köhnecke 2 0 2 0 Filip Ryšavý 2 0 2 0 F. M. 2 0 1 0 forasle forasle 2 0 1 0 forest song 2 0 2 0 Forrest Ling 2 0 1 0 Francesco Piqué 2 0 1 0 Francesco Rea 2 0 2 0 Francisco Borrego Díaz 2 0 1 0 Frederik Larsen 2 0 1 0 Gabor Piskoty 2 0 1 0 Gabriela De Carvalho 2 0 1 0 Gabriel Baud-Bovy 2 0 1 0 galina dorinev 2 0 1 0 Gareth Kenworthy 2 0 1 0 Gary McGregor 2 0 1 0 Gaurav Mukherjee 2 0 2 0 Gauthier Kervyn 2 0 2 0 Genna Frederick 2 0 1 0 george rose 2 0 2 0 Gilles Dusfour 2 0 1 0 Giovanni Falcone 2 0 1 0 giulia mantovani 2 0 1 0 giuseppe marcolin 2 0 1 0 glenn den Boer 2 0 1 0 Gokce Yildirim 2 0 2 0 Gordhan Mahtani 2 0 1 0 GRANT LACK 2 0 2 0 Guhan Narayanan 2 0 1 0 Guido Resmini 2 0 2 0 Gunarajulu Renganathan 2 0 1 0 hairui liu 2 0 2 0 Hamed Shahidian 2 0 1 0 Hanjun Park 2 0 2 0 hans o 2 0 1 0 Hariharasudhan N 2 0 1 0 Hayden Sidey-Phillips 2 0 2 0 Heather Lai 2 0 2 0 Henrik Norgren 2 0 1 0 hla fawzy 2 0 2 0 hossen jokar 2 0 2 0 Hou Hongjie 2 0 2 0 H. Vincent 2 0 2 0 hwang anchen 2 0 2 0 Hyeon Jeong 2 0 2 0 ian cox 2 0 1 0 Imali Hettiarachchi 2 0 1 0 Imali Hettiarachchi 2 0 2 0 imanol studer 2 0 1 0 Iman Soodmand 2 0 1 0 Iris Magnusdottir 2 0 2 0 irvin lim 2 0 1 0 Isabela Tesser 2 0 1 0 Isabelle E 2 0 2 0 Isabelle Siegler 2 0 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 23,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ff9ee79e-2d88-4007-81fe-9bbfbe86187f",
    "document_id": "doc_40",
    "content": "2 0 1 0 hla fawzy 2 0 2 0 hossen jokar 2 0 2 0 Hou Hongjie 2 0 2 0 H. Vincent 2 0 2 0 hwang anchen 2 0 2 0 Hyeon Jeong 2 0 2 0 ian cox 2 0 1 0 Imali Hettiarachchi 2 0 1 0 Imali Hettiarachchi 2 0 2 0 imanol studer 2 0 1 0 Iman Soodmand 2 0 1 0 Iris Magnusdottir 2 0 2 0 irvin lim 2 0 1 0 Isabela Tesser 2 0 1 0 Isabelle E 2 0 2 0 Isabelle Siegler 2 0 1 0 Jack Wang 2 0 1 0 Jack Withers 2 0 1 0 Jaeho Jang 2 0 2 0 Jakub Mitura 2 0 1 0 James Chalfant 2 0 2 0 James Cowburn 2 0 2 0 James Frye 2 0 1 0 Jarmila Behenská 2 0 2 0 Javier Andres 2 0 1 0 Jay Mehta 2 0 1 0 Jeff Barrett 2 0 1 0 Jeffrey Berning 2 0 1 0 jeong hoon kim 2 0 2 0 Jeonghwan Jay Lee 2 0 2 0 Jeongwoo Cho 2 0 1 0 Jesse Wheeler 2 0 2 0 Jessica Fonseca 2 0 2 0 Jessica Ventura 2 0 2 0 Jeuhee Lee 2 0 2 0 Jiabiao Yi 2 0 2 0 Jiale Zhu 2 0 1 0 Jim Darke 2 0 2 0 Jiyoun Kim 2 0 2 0 Joana Alves 2 0 1 0 Joan Mateu Pla 2 0 2 0 João André 2 0 2 0 Joel Martin 2 0 1 0 John Chow 2 0 1 0 John David Johnson 2 0 1 0 John Hodges 2 0 2 0 John Kounetas 2 0 1 0 John Tiger 2 0 1 0 Jonas Frischknecht 2 0 1 0 Jonathan Egan 2 0 2 0 Jorge Elvira 2 0 1 0 Jose Ignacio Gil 2 0 1 0 Joseph Kopke 2 0 1 0 Josh Carter 2 0 2 0 Joshua Galvan 2 0 1 0 Joshua Lequen 2 0 1 0 Joshua Schrantz 2 0 1 0 Josh Wallace 2 0 1 0 joyce Glatzer 2 0 1 0 Juan Beret 2 0 1 0 Julie Tevenan 2 0 2 0 junkai chen 2 0 2 0 Justin Creps 2 0 1 0 Kaique de Oliveira 2 0 2 0 kaiyang yin 2 0 1 0 kamran nazari 2 0 1 0 Karl Tiemann 2 0 1 0 Keaton Nishimi 2 0 2 0 kelsey underwood 2 0 1 0 Kenji Takeda 2 0 1 0 Kevin Jones 2 0 1 0 Khaled Mursi 2 0 2 0 Khuram Shahzad 2 0 1 0 Kim YoungBeom 2 0 1 0 Kin 421 2 0 1 0 Koen Flores 2 0 1 0 Krishna Tamminana 2 0 1 0 kris montagne 2 0 2 0 Kristina Scheinert 2 0 1 0 Kun Chu 2 0 1 0 Kyler Howard 2 0 2 0 Kyle Wood 2 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 24,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4acf9dd9-2dc3-4df9-a586-db672c4690e7",
    "document_id": "doc_40",
    "content": "kamran nazari 2 0 1 0 Karl Tiemann 2 0 1 0 Keaton Nishimi 2 0 2 0 kelsey underwood 2 0 1 0 Kenji Takeda 2 0 1 0 Kevin Jones 2 0 1 0 Khaled Mursi 2 0 2 0 Khuram Shahzad 2 0 1 0 Kim YoungBeom 2 0 1 0 Kin 421 2 0 1 0 Koen Flores 2 0 1 0 Krishna Tamminana 2 0 1 0 kris montagne 2 0 2 0 Kristina Scheinert 2 0 1 0 Kun Chu 2 0 1 0 Kyler Howard 2 0 2 0 Kyle Wood 2 0 1 0 Kyung-Ryoul Mun 2 0 1 0 Laura Healey 2 0 2 0 Laurel Saxe 2 0 1 0 Lauren Ferris 2 0 2 0 Lauri Stenroth 2 0 1 0 Léa Chabrowski 2 0 1 0 Lena Uhlenberg 2 0 1 0 Leonardo Consoni 2 0 2 0 Leon Lo 2 0 1 0 Lindsay Moir 2 0 1 0 Lissa Aerts 2 0 1 0 liu guangjun 2 0 1 0 lomas persad 2 0 1 0 Lucas Moreno Carbonell 2 0 2 0 Luca Tagliapietra 2 0 2 0 Lucia Franzoso 2 0 1 0 Lucinda Williamson 2 0 2 0 Lucy Buchanan 2 0 2 0 ludovica apa 2 0 1 0 Luis Coelho 2 0 1 0 Lukas H 2 0 2 0 Luke Jessup 2 0 1 0 Mahdi Marashi 2 0 1 0 mahsa Malekmohammadi 2 0 1 0 Mahyo Seyedali 2 0 2 0 Mandar Pargaonkar 2 0 1 0 Manuel Koch 2 0 1 0 Manvendra Chauhan 2 0 2 0 Manxu Zheng 2 0 1 0 Marc Farreras Fernández 2 0 2 0 Marcus Bohne 2 0 1 0 maria thommyppillai 2 0 2 0 Mark Lo 2 0 2 0 Markus Peters 2 0 1 0 Martin Gen 2 0 2 0 Martin Grimmer 2 0 1 0 Martin Hora 2 0 1 0 Martin Shenton 2 0 1 0 Marvin Zedler 2 0 2 0 Masayu Koyama 2 0 2 0 Mathieu DOMALAIN 2 0 2 0 Matilde Tomasi 2 0 2 0 Matteo Arquilla 2 0 2 0 Matthew Wagshol 2 0 1 0 Maureen Moore 2 0 1 0 Max Houghton 2 0 1 0 Maximilian Carvajal 2 0 2 0 Md Iftekharul Alam 2 0 1 0 Md Sanzid Bin Hossain 2 0 1 0 Menthy Denayer 2 0 1 0 Michael DelSanto 2 0 1 0 Michael Harris 2 0 2 0 Michael Schwartz 2 0 2 0 michael sprenger 2 0 1 0 Michalina Blazkiewicz 2 0 2 0 Mihir Patel 2 0 1 0 Milad Ghafary 2 0 2 0 Mina Salehi 2 0 1 0 Ming Ding 2 0 1 0 mirac topal 2 0 2 0 Miray Kirollos 2 0 2 0 Misato Baba 2 0 1 0 Mohamed Mohanna 2 0 2 0 mohammadali shahiri 2 0 2 0 Mohammad S. Shourijeh 2 0 2 0 Mohsen Sharifi",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 25,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "09335917-4eba-466f-8e35-c06955be5aae",
    "document_id": "doc_40",
    "content": "0 Menthy Denayer 2 0 1 0 Michael DelSanto 2 0 1 0 Michael Harris 2 0 2 0 Michael Schwartz 2 0 2 0 michael sprenger 2 0 1 0 Michalina Blazkiewicz 2 0 2 0 Mihir Patel 2 0 1 0 Milad Ghafary 2 0 2 0 Mina Salehi 2 0 1 0 Ming Ding 2 0 1 0 mirac topal 2 0 2 0 Miray Kirollos 2 0 2 0 Misato Baba 2 0 1 0 Mohamed Mohanna 2 0 2 0 mohammadali shahiri 2 0 2 0 Mohammad S. Shourijeh 2 0 2 0 Mohsen Sharifi 2 0 2 0 Morgan Homan 2 0 1 0 mostafa moazen 2 0 2 0 mr sheel 2 0 1 0 Muhammad Hamdan 2 0 1 0 Musab Ali 2 0 1 0 Myles Frith-Macdonald 2 0 2 0 Myroslav Bachynskyi 2 0 1 0 Nafiseh Ebrahimi 2 0 1 0 naji alibeji 2 0 1 0 Nasara Sualiha Abdul-Lateef 2 0 2 0 Nate Roiger 2 0 1 0 Nathan Paillou 2 0 1 0 Nat Wannawas 2 0 1 0 Nicholas Dunbar 2 0 1 0 Nick Uhthoff 2 0 2 0 Nicolas Grandin Perea 2 0 1 0 Nicolas Heess 2 0 1 0 Nicolas N. 2 0 1 0 Nicole Johnson 2 0 1 0 Nihar Talele 2 0 2 0 Nikita Kuznetsov 2 0 2 0 Niklas Lohmann 2 0 1 0 Niklas Rudolph 2 0 2 0 Nikolaos Karavas 2 0 1 0 Noemi Barba 2 0 1 0 Noémie GUILLIN 2 0 1 0 Paavo Vartiainen 2 0 2 0 pablo dopico 2 0 1 0 padma naveena ganapam 2 0 1 0 Panagiotis Linardos 2 0 1 0 pan zhengye 2 0 1 0 Patricio Pincheira 2 0 1 0 Patrick Brewer 2 0 1 0 Patrick Kugler 2 0 1 0 Patrick Mai 2 0 2 0 Patrick Rider 2 0 1 0 pauline pechereau 2 0 2 0 Pauline Verdier 2 0 2 0 Paulius Stasiulaitis 2 0 1 0 Pavel Martynov 2 0 1 0 Pawel Golyski 2 0 1 0 pedro magalhaes 2 0 1 0 Peili Gong 2 0 2 0 Peter Johnston 2 0 1 0 Peter Nguyen 2 0 1 0 Petko Petkov 2 0 1 0 Philip Hotor 2 0 2 0 Pierre HE 2 0 2 0 Pierre-Luc Paré 2 0 2 0 Pim Pellikaan 2 0 1 0 Piotr Rawiak 2 0 1 0 Promi Rahman 2 0 2 0 Qinghua Chen 2 0 1 0 Qingyi Lou 2 0 2 0 Rafael Oliveira 2 0 1 0 Rajan Patel 2 0 1 0 rajat das 2 0 1 0 Ranjan Das 2 0 1 0 Raziyeh Baghi 2 0 1 0 Rebecca Fellin 2 0 1 0 Reiko L 2 0 2 0 Renee Degutis 2 0 2 0 Reza Khoeilar 2 0 1 0 Ricardo P 2 0 1 0 Richard Ellis 2 0 1 0 Richard Roda 2",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 26,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "71bde575-33a3-48ed-83a1-fed980a4e437",
    "document_id": "doc_40",
    "content": "0 Pim Pellikaan 2 0 1 0 Piotr Rawiak 2 0 1 0 Promi Rahman 2 0 2 0 Qinghua Chen 2 0 1 0 Qingyi Lou 2 0 2 0 Rafael Oliveira 2 0 1 0 Rajan Patel 2 0 1 0 rajat das 2 0 1 0 Ranjan Das 2 0 1 0 Raziyeh Baghi 2 0 1 0 Rebecca Fellin 2 0 1 0 Reiko L 2 0 2 0 Renee Degutis 2 0 2 0 Reza Khoeilar 2 0 1 0 Ricardo P 2 0 1 0 Richard Ellis 2 0 1 0 Richard Roda 2 0 1 0 Richard Southern 2 0 1 0 Robbert van Middelaar 2 0 1 0 Robert Förster 2 0 1 0 Robert Semenoff 2 0 1 0 Robine Janssen 2 0 1 0 rob rein 2 0 2 0 Romain DUPIRE 2 0 1 0 Ruben de la torre 2 0 1 0 Rubén Molero 2 0 1 0 Rui Li 2 0 2 0 Ruiyi Tang 2 0 2 0 rui zhuang 2 0 1 0 Russell Johnson 2 0 1 0 ruth behar 2 0 2 0 Ryan Davis 2 0 2 0 Ryoji Kiyama 2 0 2 0 Sabine Keutmann 2 0 1 0 sahar aghayan 2 0 2 0 Saikat Chakraborty 2 0 2 0 Samuel Masters 2 0 1 0 Sandesh Bhat 2 0 1 0 sanket sane 2 0 1 0 Sanne Vancleef 2 0 2 0 sarab blue 2 0 2 0 Sara Elnahhas 2 0 1 0 Sara Farshidfar 2 0 1 0 Sarah Luther 2 0 1 0 Sarah Taylor 2 0 1 0 Sara Magdziarz 2 0 2 0 Sarat Srikala Kondamudi 2 0 2 0 Scott Kennedy 2 0 1 0 Sean Doyle 2 0 1 0 Sébastien FRICKER 2 0 1 0 Seminare Ta''afua 2 0 1 0 seyedehmarzieh hosseini 2 0 2 0 Shabnam Sh 2 0 1 0 Shahzaib Malik 2 0 2 0 Shaida Biglari 2 0 2 0 Shasha Yeung 2 0 1 0 Shayan Taheri 2 0 2 0 Shima Mesbah 2 0 2 0 Shreeshan Jena 2 0 1 0 Shuaijie Wang 2 0 1 0 Shujia Jiang 2 0 2 0 Shuo Chen 2 0 1 0 Shushu Ma 2 0 1 0 Sid S 2 0 1 0 Sierra Foley 2 0 1 0 simao Carvalho 2 0 2 0 Simon Ammann 2 0 1 0 Simon Augustus 2 0 1 0 Simon Choppin 2 0 1 0 Siril T D 2 0 2 0 siri willems 2 0 2 0 Songning Zhang 2 0 2 0 Soyoung Joo 2 0 1 0 spareine spareine 2 0 1 0 Spencer Wangerin 2 0 2 0 Stefan Madansingh 2 0 1 0 Stefano Piazza 2 0 1 0 Stephan Bosch 2 0 2 0 Stephanie Hamilton 2 0 2 0 Stephen Garza 2 0 1 0 Steve Davis 2 0 1 0 Steven Davidson 2 0 1 0 Steven Hirsch",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 27,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e78da64f-036d-4225-a241-97d192df6d54",
    "document_id": "doc_40",
    "content": "0 Simon Ammann 2 0 1 0 Simon Augustus 2 0 1 0 Simon Choppin 2 0 1 0 Siril T D 2 0 2 0 siri willems 2 0 2 0 Songning Zhang 2 0 2 0 Soyoung Joo 2 0 1 0 spareine spareine 2 0 1 0 Spencer Wangerin 2 0 2 0 Stefan Madansingh 2 0 1 0 Stefano Piazza 2 0 1 0 Stephan Bosch 2 0 2 0 Stephanie Hamilton 2 0 2 0 Stephen Garza 2 0 1 0 Steve Davis 2 0 1 0 Steven Davidson 2 0 1 0 Steven Hirsch 2 0 1 0 Sudha Srinivasan 2 0 1 0 Sumire FUTAMURE 2 0 1 0 Sungwoo Park 2 0 2 0 Sunny Cai 2 0 1 0 Swwarnav Kashyap 2 2 1 1 Syed Tanzim Mubarrat 2 0 1 0 Szelitzky Emoke 2 0 1 0 Szöllősi Bálint 2 0 1 0 Takayuki Aimi 2 0 1 0 Tao Liu 2 0 2 0 Tarek Al-Kassar 2 0 2 0 Thomas Cunningham 2 0 1 0 Thomas Madden 2 0 1 0 Thomas Wenzel 2 0 2 0 Tobias Thorén 2 0 1 0 Tom De Costere 2 0 1 0 Tony C 2 0 2 0 Vahagn Stepanyan 2 0 1 0 Vaibhavsingh Varma 2 0 1 0 Vaibhav Varma 2 0 1 0 Valentin Bertucchi 2 0 1 0 Vanush Vaswani 2 0 1 0 Victor Ng-Thow-Hing 2 0 2 0 Vincenzo Di Luca 2 0 1 0 Vivian Allen 2 0 1 0 wafa ammar 2 0 2 0 Walter Laughlin 2 0 2 0 Wangdo Kim 2 0 1 0 Ward Bartels 2 0 1 0 Wasim Malik 2 0 2 0 Wayne Ford 2 0 1 0 Weichao Gong 2 0 2 0 Weiguang Si 2 0 2 0 Wenxin Niu 2 0 2 0 Weronika R 2 0 1 0 Wietse van Dijk 2 0 1 0 Will Griffiths 2 0 1 0 wish lock 2 0 2 0 Woojae Kim 2 0 2 0 Xiaolin Dai 2 0 2 0 Ximena Rosas 2 0 2 0 XiPeng Shen 2 0 1 0 Xu Chen 2 0 2 0 X.Z. Wang 2 0 1 0 Yanlong Gao 2 0 1 0 Yichen Huang 2 0 1 0 Ying Fang 2 0 2 0 YONGJIN JO 2 0 2 0 yong-siang zhang 2 0 2 0 Yongtao Lu 2 0 1 0 Youngmin Chun 2 0 2 0 Young Nam Jo 2 0 1 0 Yujun Lai 2 0 1 0 Yuxiang Wang 2 0 1 0 Yuzo Michibata 2 0 1 0 Yves Hubar 2 0 1 0 zahra abbasi 2 0 1 0 zeynep melike ışılay 2 0 1 0 zhang ruihao 2 0 2 0 zheng xiaojuan 2 0 2 0 zhibo zhang 2 0 2 0 Zhou Yaqian 2 0 2 0 Zhu Bin 2 0 1 0 Алина Кузнецова 2 0 1 0 华云 毛 2 0 2 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 28,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6ee9cffe-84b7-4749-a15d-f5efd60055d7",
    "document_id": "doc_40",
    "content": "2 0 Yongtao Lu 2 0 1 0 Youngmin Chun 2 0 2 0 Young Nam Jo 2 0 1 0 Yujun Lai 2 0 1 0 Yuxiang Wang 2 0 1 0 Yuzo Michibata 2 0 1 0 Yves Hubar 2 0 1 0 zahra abbasi 2 0 1 0 zeynep melike ışılay 2 0 1 0 zhang ruihao 2 0 2 0 zheng xiaojuan 2 0 2 0 zhibo zhang 2 0 2 0 Zhou Yaqian 2 0 2 0 Zhu Bin 2 0 1 0 Алина Кузнецова 2 0 1 0 华云 毛 2 0 2 0 艳朋 郭 2 2 1 1 208 4 1 0 1 0 Aaditya Chandramouli 1 0 1 0 Aaron Best 1 0 1 0 Aaron Cherian 1 0 1 0 Aaron Gonzalez 1 0 1 0 Aaron Horton 1 0 1 0 Aaron Kociolek 1 0 1 0 Aaron Suberbiola 1 0 1 0 Aashita Dixit 1 0 1 0 Abdalla Rakha 1 0 1 0 Abdeali Dhuliyawalla 1 0 1 0 Abdulbaset Benwali 1 0 1 0 Abdullah Alturki 1 0 1 0 Abhijit Kangude 1 0 1 0 Achref Al 1 0 1 0 Adah Harding 1 0 1 0 Adam Burke 1 0 1 0 Adamenko Delwinsay 1 0 1 0 Adam Henderson 1 0 1 0 Adam Park 1 0 1 0 Adam Sylvester 1 0 1 0 Adeliya Latypova 1 0 1 0 Adriaan Odendaal 1 0 1 0 adrianna vaughan 1 0 1 0 Agathe Pesin 1 0 1 0 Agnieszka Korcz 1 0 1 0 Ahmed Halim 1 0 1 0 Ahmed Talha 1 0 1 0 ahsan wattoo 1 0 1 0 ahsan wattoo 1 0 1 0 ahsan wattoo 1 0 1 0 ahsan wattoo 1 0 1 0 Aibek Niyetkaliyev 1 0 1 0 Ainhoa Garaialde 1 0 1 0 Ainsley Svetek 1 0 1 0 ajay khan 1 0 1 0 Akash Ravishankar 1 0 1 0 A Kashyap 1 0 1 0 AKHIL VM 1 0 1 0 Akita Shu 1 0 1 0 Akito Fukunishi 1 0 1 0 Alaa Al Nwelati 1 0 1 0 Alan Jenks 1 0 1 0 Alec David 1 0 1 0 alec stevenson 1 0 1 0 Alejandro Martinez 1 0 1 0 Alena R 1 0 1 0 Alessandra Colangelo 1 0 1 0 Alessandra Margaria 1 0 1 0 Alessia Vallorani 1 0 1 0 Alexander Blenkinsop 1 0 1 0 Alexander Lagrant 1 0 1 0 Alexander Synek 1 0 1 0 Alexander Wolf 1 0 1 0 Alexandra Abós Ortega 1 0 1 0 Alexandra Wink 1 0 1 0 Alexandra Withey 1 0 1 0 Alexandra Yurova 1 0 1 0 Alexey Kozhakin 1 0 1 0 Alex Kreig 1 0 1 0 Alex Peebles 1 0 1 0 Ali Ahmadi 1 0 1 0 alieen veni 1 0 1 0 Ali Ghaffari 1 0 1 0 ali rouzbayani 1 0 1 0 Allison Arnold",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 29,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "56054e0b-0145-43d2-b2c2-1f2aea2f8d14",
    "document_id": "doc_40",
    "content": "0 Alessia Vallorani 1 0 1 0 Alexander Blenkinsop 1 0 1 0 Alexander Lagrant 1 0 1 0 Alexander Synek 1 0 1 0 Alexander Wolf 1 0 1 0 Alexandra Abós Ortega 1 0 1 0 Alexandra Wink 1 0 1 0 Alexandra Withey 1 0 1 0 Alexandra Yurova 1 0 1 0 Alexey Kozhakin 1 0 1 0 Alex Kreig 1 0 1 0 Alex Peebles 1 0 1 0 Ali Ahmadi 1 0 1 0 alieen veni 1 0 1 0 Ali Ghaffari 1 0 1 0 ali rouzbayani 1 0 1 0 Allison Arnold 1 0 1 0 Allison Bushman 1 0 1 0 Álvaro Navarrete 1 0 1 0 Amanda Angulo 1 0 1 0 Amber Emmens 1 0 1 0 Amber Teresa 1 0 1 0 amged elsheikh 1 0 1 0 Aminreza Khandan 1 0 1 0 Amir Iqbal 1 0 1 0 amirreza kebritchi 1 0 1 0 Ana Castro 1 0 1 0 Ana Matoso 1 0 1 0 Ana Santo 1 0 1 0 Andrea A 1 0 1 0 Andrea Cusinato 1 1 1 1 Andrea Ravaschio 1 0 1 0 Andreas Bourantanis 1 0 1 0 Andreas Kontaxis 1 0 1 0 Andrea Willson 1 0 1 0 Andrea Zignoli 1 0 1 0 André Böni 1 0 1 0 Andreia Flores 1 0 1 0 Andres A 1 0 1 0 Andrés Hidalgo 1 0 1 0 Andrés Peña 1 0 1 0 andres suarez 1 0 1 0 Andrew New 1 0 1 0 andrewop pit 1 0 1 0 Andrew Ries 1 0 1 0 Andrew Roberts 1 0 1 0 Andrew Symonds 1 0 1 0 Andrew Wong 1 0 1 0 Andrey Aksenov 1 0 1 0 Andrey Bugarin 1 0 1 0 Andy Chan 1 0 1 0 Angelos Plastropoulos 1 0 1 0 Anika Weber 1 0 1 0 Aniket Argade 1 0 1 0 Anke Van Campen 1 0 1 0 Ankit Gupta 1 0 1 0 Anna Anikina 1 0 1 0 Anna Bartsch 1 0 1 0 Anna Maria Barbiellini 1 0 1 0 Anna Ragni 1 0 1 0 Annchristin Andres 1 0 1 0 Anne Fisher 1 0 1 0 annemie pierle 1 0 1 0 Anoli Shah 1 0 1 0 anosh javed 1 0 1 0 Anthony Bawa 1 0 1 0 Antonino Amedeo La Mattina 1 0 1 0 Antonio Veloso 1 0 1 0 Anton Sobinov 1 0 1 0 anurag sohane 1 0 1 0 Anushka Rathi 1 0 1 0 Aoife Ryan 1 0 1 0 April McPherson 1 0 1 0 A R 1 0 1 0 areeba khan 1 0 1 0 Arthur Butler 1 0 1 0 Arthur Kipel 1 0 1 0 Arthur van der Have 1 0 1 0 ARUN SIVARAJ 1 1 1 1 Ashkan Vali 1 0 1 0 Ashwin Ho 1 0 1 0 Ashwin Schouten 1 0 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 30,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e8d46252-58f9-4530-8eeb-446752928909",
    "document_id": "doc_40",
    "content": "Antonino Amedeo La Mattina 1 0 1 0 Antonio Veloso 1 0 1 0 Anton Sobinov 1 0 1 0 anurag sohane 1 0 1 0 Anushka Rathi 1 0 1 0 Aoife Ryan 1 0 1 0 April McPherson 1 0 1 0 A R 1 0 1 0 areeba khan 1 0 1 0 Arthur Butler 1 0 1 0 Arthur Kipel 1 0 1 0 Arthur van der Have 1 0 1 0 ARUN SIVARAJ 1 1 1 1 Ashkan Vali 1 0 1 0 Ashwin Ho 1 0 1 0 Ashwin Schouten 1 0 1 0 Asiya Al-Busaidi 1 0 1 0 Assal Farrahi 1 0 1 0 Atiyeh Nezhadebrahim 1 0 1 0 Atiyeh Nezhadebrahim 1 0 1 0 aurelien liger 1 0 1 0 Babblu0 Babblu0 1 0 1 0 Bahadır AKTUĞ 1 0 1 0 Barbara Lyson 1 0 1 0 Bart Steens 1 0 1 0 Batuhan Sar 1 0 1 0 B C 1 0 1 0 B D 1 0 1 0 Beatriz Zafra 1 0 1 0 Beck Strohmer 1 0 1 0 behnoosh parsa 1 0 1 0 Behrus Puladi 1 0 1 0 Ben Bylenok 1 0 1 0 Benjamin F 1 0 1 0 Benjamin Moreno 1 0 1 0 Bethany Powell 1 0 1 0 Bettina Meyer 1 0 1 0 Bhd d 1 0 1 0 bhushan thakkar 1 0 1 0 Bianca Burgos 1 0 1 0 bill hood 1 0 1 0 Billy Senington 1 0 1 0 binbinsu@foxmail.com su 1 0 1 0 Bipin Patel 1 0 1 0 Blake Harper 1 0 1 0 Bolun Zhang 1 0 1 0 Bradley Campbell 1 0 1 0 Bradley Couillard 1 0 1 0 Bradley Girod 1 0 1 0 Brandon Bucklen 1 0 1 0 Breanne Woods 1 0 1 0 brei sun 1 0 1 0 Brent Ulrey 1 0 1 0 Brett Salazar 1 0 1 0 Brian Horsak 1 0 1 0 Brianna Forsthoefel 1 0 1 0 brian soe 1 0 1 0 Bridget Procter 1 0 1 0 Brieuc Panhelleux 1 0 1 0 Brodie Klosowski 1 0 1 0 Brooklyn Vargas 1 0 1 0 Bruce MacWilliams 1 0 1 0 Bruno Gallo 1 0 1 0 Bruno Mazuquin 1 0 1 0 Bryan Smith 1 0 1 0 Bryan Tanner 1 0 1 0 Bryce DeFigueiredo 1 0 1 0 Bryn Kanagy 1 0 1 0 Byron Freire 1 0 1 0 Byun KyungSeok 1 0 1 0 Caleb Delacruz 1 0 1 0 Callum KErr 1 0 1 0 Camille Chartrand 1 0 1 0 Carina Spengler 1 0 1 0 Carla Molz 1 0 1 0 Carlie Ede 1 0 1 0 Carolina Silva 1 0 1 0 Carrie Decker 1 0 1 0 Casey Harn 1 0 1 0 Casey Myers 1 0 1 0 Cassi Cucuel 1 0 1 0 Cecilia De Vicariis 1 0 1 0 Cecilia Monoli 1",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 31,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e1b30045-57aa-4cb9-a542-4e45cca04d7f",
    "document_id": "doc_40",
    "content": "Bryce DeFigueiredo 1 0 1 0 Bryn Kanagy 1 0 1 0 Byron Freire 1 0 1 0 Byun KyungSeok 1 0 1 0 Caleb Delacruz 1 0 1 0 Callum KErr 1 0 1 0 Camille Chartrand 1 0 1 0 Carina Spengler 1 0 1 0 Carla Molz 1 0 1 0 Carlie Ede 1 0 1 0 Carolina Silva 1 0 1 0 Carrie Decker 1 0 1 0 Casey Harn 1 0 1 0 Casey Myers 1 0 1 0 Cassi Cucuel 1 0 1 0 Cecilia De Vicariis 1 0 1 0 Cecilia Monoli 1 0 1 0 Cedric Rauber 1 0 1 0 Celine Honekamp 1 0 1 0 Cesare Cazzaniga 1 0 1 0 Ce Zhang 1 0 1 0 Chaker Charaa 1 0 1 0 CHAN CHOW KHUEN 1 0 1 0 chan wong 1 0 1 0 Charly Mourglia 1 0 1 0 Chelsea Haddy 1 0 1 0 Chen-Hua Yeow 1 0 1 0 chen qiang 1 0 1 0 chen wen 1 0 1 0 chen yaru 1 0 1 0 chen zoom 1 0 1 0 Cheyenne Hubschmitt 1 0 1 0 CH hh 1 0 1 0 Chiara Pallara 1 0 1 0 Chiedozie Okefienam 1 0 1 0 chitra lalawat 1 0 1 0 Chloe Baratta 1 0 1 0 Chloe Guie 1 0 1 0 Chonghui Zhang 1 0 1 0 Chris Gatti 1 0 1 0 Chris Lamb 1 0 1 0 Chris Racknor 1 0 1 0 Chris Siviy 1 0 1 0 Christopher Hollhumer 1 0 1 0 christoph gross 1 0 1 0 Christos Sioutis 1 0 1 0 Claire Crossley 1 0 1 0 Clara Silvestro 1 0 1 0 Claudia Fernanda Flores 1 0 1 0 Claudia Ortiz Benavides 1 0 1 0 Clayton Leite 1 0 1 0 Clément THEVENOT 1 0 1 0 CM M 1 0 1 0 Colin Goldbach 1 0 1 0 Congxing Zheng 1 0 1 0 Conlain Kelly 1 0 1 0 Connor Chappell 1 0 1 0 Connor Gifford 1 0 1 0 Connor Morrow 1 0 1 0 conrado torres 1 0 1 0 Corey Coleman 1 0 1 0 Corey Pew 1 0 1 0 Corey Scholes 1 0 1 0 corrine bao 1 0 1 0 Courtney Butowicz 1 0 1 0 Cristian Cordova Espinoza 1 0 1 0 cristina d''angeli 1 0 1 0 Cristina Jiménez 1 0 1 0 cui hongjie 1 0 1 0 Dabby Hack 1 0 1 0 DaeHo Lee 1 0 1 0 D AF 1 0 1 0 Daichi Saito 1 0 1 0 dana solav 1 0 1 0 dan german 1 0 1 0 Daniela Albuquerque 1 0 1 0 Daniela Voegtli 1 0 1 0 Daniel Cohen 1 0 1 0 Daniele Albano 1 0 1 0 Daniel Greve 1 0 1 0 Daniel Grindle 1 0 1 0 Daniel Kolb 1 0 1 0 Danielle Trowell 1",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 32,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "fe4ce49b-36f9-4132-80f8-c4b608d50944",
    "document_id": "doc_40",
    "content": "0 cristina d''angeli 1 0 1 0 Cristina Jiménez 1 0 1 0 cui hongjie 1 0 1 0 Dabby Hack 1 0 1 0 DaeHo Lee 1 0 1 0 D AF 1 0 1 0 Daichi Saito 1 0 1 0 dana solav 1 0 1 0 dan german 1 0 1 0 Daniela Albuquerque 1 0 1 0 Daniela Voegtli 1 0 1 0 Daniel Cohen 1 0 1 0 Daniele Albano 1 0 1 0 Daniel Greve 1 0 1 0 Daniel Grindle 1 0 1 0 Daniel Kolb 1 0 1 0 Danielle Trowell 1 0 1 0 Daniel Nießlbeck 1 0 1 0 Daniel Peters 1 0 1 0 Daniel Sitte 1 0 1 0 Daniel Smith 1 0 1 0 Daniel Streif 1 0 1 0 Dan Nicolella 1 0 1 0 Dan Qiu 1 0 1 0 Dario Cori 1 0 1 0 Darlington Egeonu 1 0 1 0 Darren Jenkins 1 0 1 0 Dave Hanegraaf 1 0 1 0 David Britzman 1 0 1 0 david chang 1 0 1 0 david chun 1 0 1 0 David Cocchiarella 1 0 1 0 Davide Seikaly 1 0 1 0 David Imuetinyan 1 0 1 0 David Martinez 1 0 1 0 David Monteverde 1 0 1 0 David Summerbell 1 0 1 0 David Suprak 1 0 1 0 David Thomas 1 0 1 0 David W 1 0 1 0 David Weizel 1 0 1 0 David Wong 1 0 1 0 Davis Suarez 1 0 1 0 Débora Guedes 1 0 1 0 Deena Alabed 1 0 1 0 DEEPAK CHAUDHARY 1 0 1 0 Deepali Salwan 1 0 1 0 Denise Balogh 1 0 1 0 Dennis Evangelista 1 0 1 0 Derek Tran 1 0 1 0 Desmond Chong 1 0 1 0 Dev Lochan 1 0 1 0 Dharmesh Harsha 1 0 1 0 DIBYANARAYAN HAZRA 1 0 1 0 Dibyayan Mondal 1 0 1 0 Diego De La Hoz 1 0 1 0 die ting 1 0 1 0 Dmitriy Korchev 1 0 1 0 Domenico CAMPOLO 1 0 1 0 Dominik Sosna 1 0 1 0 Domoina Randriamanandraibe 1 0 1 0 Dongwoon Lee 1 0 1 0 dong xiao 1 0 1 0 Don Jones 1 0 1 0 Dor Dahan 1 0 1 0 Dorian Pieracci 1 0 1 0 Dries Hellinx 1 0 1 0 Dylan NICOLAS 1 0 1 0 Dylan O''''Leary 1 0 1 0 Eden Duffy 1 0 1 0 Edgar Granera 1 0 1 0 Edgar Rios 1 0 1 0 Ed Morra 1 0 1 0 Edward Lannon 1 0 1 0 Edward Obropta 1 0 1 0 ehtishamul hasan 1 0 1 0 Elaine Schmidt 1 0 1 0 eleanor clay 1 0 1 0 Eleonora Cabai 1 0 1 0 Elham Mottaghi 1 0 1 0 Eliana Giovannitti 1 0 1 0 Elif Tuba Deveci 1 0 1 0 Eliot Hays 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 33,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9a9e8c5c-fc01-420b-85cf-cf7c75d1fe42",
    "document_id": "doc_40",
    "content": "Hellinx 1 0 1 0 Dylan NICOLAS 1 0 1 0 Dylan O''''Leary 1 0 1 0 Eden Duffy 1 0 1 0 Edgar Granera 1 0 1 0 Edgar Rios 1 0 1 0 Ed Morra 1 0 1 0 Edward Lannon 1 0 1 0 Edward Obropta 1 0 1 0 ehtishamul hasan 1 0 1 0 Elaine Schmidt 1 0 1 0 eleanor clay 1 0 1 0 Eleonora Cabai 1 0 1 0 Elham Mottaghi 1 0 1 0 Eliana Giovannitti 1 0 1 0 Elif Tuba Deveci 1 0 1 0 Eliot Hays 1 0 1 0 Elisah Pietersma 1 0 1 0 Elisa Schrank 1 0 1 0 Elizabeth Bell 1 0 1 0 Elizabeth Hageman 1 0 1 0 Ellyn Ranz 1 0 1 0 Emanuele Sessa 1 0 1 0 Emerson Raymond 1 0 1 0 Emilia Sokol 1 0 1 0 Emily Bachner 1 0 1 0 Emily Brown 1 0 1 0 Emily Bywater 1 0 1 0 Enric Alpuente 1 0 1 0 Enriqueta Dominguez 1 0 1 0 Erica Beaucage-Gauvreau 1 0 1 0 ERIC ADDISON 1 0 1 0 Eric Lopez 1 0 1 0 Eric Per Vogel 1 0 1 0 Erik Lamers 1 0 1 0 Ernest Bosch 1 0 1 0 Ethan Erushaa 1 0 1 0 Evaa Martin 1 0 1 0 Eva Maddox 1 0 1 0 Evan Schuster 1 0 1 0 ewen daviau 1 0 1 0 Fabian Unglaube 1 0 1 0 fabio gregorac 1 0 1 0 Fabio Scozzari 1 0 1 0 fangde liu 1 0 1 0 farhad rajaie 1 0 1 0 Faris Gulamali 1 0 1 0 farzaneh yazdani 1 0 1 0 Fateme shahmari 1 0 1 0 fatma turan 1 0 1 0 Federica Lupo 1 0 1 0 Felipe Alvim 1 0 1 0 Felipe Gonzalez 1 0 1 0 Fengtao Zhang 1 0 1 0 Fidel Pecout 1 0 1 0 Filippo Maceratesi 1 0 1 0 Florian Blab 1 0 1 0 Florian K 1 0 1 0 Francesca Gondoni 1 0 1 0 Francesca Salaorni 1 1 1 1 Francesca Vizziello 1 0 1 0 Francisco Reis 1 0 1 0 Francisco Romero 1 0 1 0 francisco rus 1 0 1 0 francois asseman 1 0 1 0 Francois Thenault 1 0 1 0 Frank Schumacher 1 0 1 0 franz schutz 1 0 1 0 Frederico B. Klein 1 0 1 0 Funty Fawi 1 0 1 0 Gabriele Puccetti 1 0 1 0 galina dorinev 1 0 1 0 Ganea Daniel 1 0 1 0 gaofeng wei 1 0 1 0 gaokun qiao 1 0 1 0 Garibaldi Silveira 1 0 1 0 Gary Mullen 1 0 1 0 Gaurav Pokharkar 1 0 1 0 Gauri Desai 1 0 1 0 Ge Cos 1 0 1 0 GENG CHEN 1 0 1 0 Geoffrey Gardener 1 0 1 0 George Giarmatzis 1 0 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 34,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "db3361a4-0a43-47bf-b5ba-fa1bc78eb3a5",
    "document_id": "doc_40",
    "content": "0 1 0 franz schutz 1 0 1 0 Frederico B. Klein 1 0 1 0 Funty Fawi 1 0 1 0 Gabriele Puccetti 1 0 1 0 galina dorinev 1 0 1 0 Ganea Daniel 1 0 1 0 gaofeng wei 1 0 1 0 gaokun qiao 1 0 1 0 Garibaldi Silveira 1 0 1 0 Gary Mullen 1 0 1 0 Gaurav Pokharkar 1 0 1 0 Gauri Desai 1 0 1 0 Ge Cos 1 0 1 0 GENG CHEN 1 0 1 0 Geoffrey Gardener 1 0 1 0 George Giarmatzis 1 0 1 0 George Williams 1 0 1 0 Getar Hoti 1 0 1 0 Ghada El Mezni 1 0 1 0 Ghazi Said 1 0 1 0 Giacomo Sinigaglia 1 0 1 0 Giada Italiano 1 0 1 0 Gijs van der Woerdt 1 0 1 0 Gilbert Ngetich 1 0 1 0 Gintaras Jonaitis 1 0 1 0 Giorgia Ercolini 1 0 1 0 giorgio mattei 1 0 1 0 Giorgos Giarmatzis 1 0 1 0 Giovanni Borrè 1 0 1 0 Giovanni Vesentini 1 0 1 0 giulia baini 1 0 1 0 Giuseppe Pellegrino 1 0 1 0 Gouthaman Balaraman 1 0 1 0 Graham Henderson 1 0 1 0 Greg Hanowski 1 0 1 0 gsgdsfgs dssfgsdfgsd 1 0 1 0 guillaume rao 1 0 1 0 Guillaume Rao 1 0 1 0 Guillaume RAO 1 0 1 0 Guillaume TIXIER 1 0 1 0 Guillermo Herrera-Arcos 1 0 1 0 Guillermo Muñoz 1 0 1 0 Gurpreet Singh 1 0 1 0 Guylian Stevens 1 0 1 0 Halldór Kárason 1 0 1 0 Hammam Atrash 1 0 1 0 Haneyya Umer Siddiqui 1 1 1 1 Hanhsen Zhao 1 0 1 0 HANIF noor 1 0 1 0 HANIF noor 1 0 1 0 HANIF noor 1 0 1 0 HANIF NOOR 1 0 1 0 Hank Umich 1 0 1 0 Hans-Jochen Edenhart 1 0 1 0 haosen wang 1 0 1 0 hao wang 1 0 1 0 Harald De Bondt 1 0 1 0 Harnoor Saini 1 0 1 0 Harshil Patel 1 0 1 0 Harshit Agarwal 1 0 1 0 Harshit Kumar Singh 1 0 1 0 harsh kumar 1 0 1 0 Hassan Sarailoo 1 0 1 0 Heimir Thorisson 1 0 1 0 Hema Hariharan 1 0 1 0 Hemant Baxi 1 0 1 0 Hend Abdelaziz Fayed 1 0 1 0 Henry Hernandez 1 0 1 0 henry sun 1 0 1 0 Herman van Werkhoven 1 0 1 0 Hershey Mirpuri 1 0 1 0 Hikmet Gumus 1 0 1 0 Himanshu Pareek 1 0 1 0 hiram qu 1 0 1 0 Hoa Hoang 1 0 1 0 Hongrun Lu 1 0 1 0 Hongsheng Wang 1 0 1 0 hong wang 1 0 1 0 Hongyu Ren 1 0 1 0 Ho Seon Choi 1 0 1 0 Hossein Jahanabadi 1 0 1 0 Hou",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 35,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ba679d74-983a-48d7-b712-a0c01878ebe9",
    "document_id": "doc_40",
    "content": "Hemant Baxi 1 0 1 0 Hend Abdelaziz Fayed 1 0 1 0 Henry Hernandez 1 0 1 0 henry sun 1 0 1 0 Herman van Werkhoven 1 0 1 0 Hershey Mirpuri 1 0 1 0 Hikmet Gumus 1 0 1 0 Himanshu Pareek 1 0 1 0 hiram qu 1 0 1 0 Hoa Hoang 1 0 1 0 Hongrun Lu 1 0 1 0 Hongsheng Wang 1 0 1 0 hong wang 1 0 1 0 Hongyu Ren 1 0 1 0 Ho Seon Choi 1 0 1 0 Hossein Jahanabadi 1 0 1 0 Hou Cheng Cheung 1 0 1 0 Houssem Mejbri 1 0 1 0 h t 1 0 1 0 Huan Zhao 1 0 1 0 Hyunjoon Shin 1 0 1 0 hz A 1 0 1 0 Iain Hocknull 1 0 1 0 Ian Dean 1 0 1 0 Ian Loram 1 0 1 0 ilker bozcan 1 0 1 0 Ilse Forschelen 1 0 1 0 Ilse Jonkers 1 0 1 0 imagina tive 1 0 1 0 Inckie Ding 1 1 1 1 Ingi El Shahid 1 0 1 0 Ing-Jeng Chen 1 0 1 0 Ingrid Knippels 1 0 1 0 Ioanna Deroukaki 1 0 1 0 Isabella Garza 1 0 1 0 Isabella Harker 1 0 1 0 Isabelle Ebisch 1 0 1 0 Isabelle Ormerod 1 0 1 0 ishant gupta 1 0 1 0 Ivan Baturyn 1 0 1 0 Ivo Kiel 1 0 1 0 Jack Winters 1 0 1 0 Jacob Chen 1 0 1 0 Jacob Harrelson 1 0 1 0 Jacob Levin 1 0 1 0 Jacob Reichental 1 0 1 0 Jade Montgomery 1 0 1 0 Jae Cheol Lee 1 0 1 0 Jaeho Jang 1 0 1 0 Jaejin Kim 1 0 1 0 Jae-Woong Kim 1 0 1 0 Jaime Hislop 1 0 1 0 jairo contreras 1 0 1 0 James Becker 1 0 1 0 James Day 1 0 1 0 James Dean 1 0 1 0 James Doh 1 0 1 0 James Goodman 1 0 1 0 James Saunders 1 0 1 0 Janna Brit 1 0 1 0 jannik johann 1 0 1 0 Jannis Hill 1 0 1 0 Jan Sellicaerts 1 0 1 0 Jan Willem van Dijk 1 0 1 0 Jasmine Law 1 0 1 0 Jason Addi 1 0 1 0 Jason Brown 1 0 1 0 jason christensen 1 0 1 0 Jason Hodges 1 0 1 0 Jason Liu 1 0 1 0 Jasper Kwasny 1 0 1 0 Jayishni Maharaj 1 0 1 0 Jay Wolf 1 0 1 0 Jean Pignet 1 0 1 0 Jeffrey Campbell 1 0 1 0 Jennifer Baba 1 0 1 0 Jennifer Dawkins 1 0 1 0 Jenny Connert 1 0 1 0 Jenny Manteli 1 0 1 0 Jens Mueller 1 0 1 0 Jen Symons 1 0 1 0 Jerry Pratt 1 0 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 36,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a46f0cda-a327-49cf-a783-dd1527941229",
    "document_id": "doc_40",
    "content": "1 0 1 0 Jason Brown 1 0 1 0 jason christensen 1 0 1 0 Jason Hodges 1 0 1 0 Jason Liu 1 0 1 0 Jasper Kwasny 1 0 1 0 Jayishni Maharaj 1 0 1 0 Jay Wolf 1 0 1 0 Jean Pignet 1 0 1 0 Jeffrey Campbell 1 0 1 0 Jennifer Baba 1 0 1 0 Jennifer Dawkins 1 0 1 0 Jenny Connert 1 0 1 0 Jenny Manteli 1 0 1 0 Jens Mueller 1 0 1 0 Jen Symons 1 0 1 0 Jerry Pratt 1 0 1 0 Jerushah Bull 1 0 1 0 Jesal Parekh 1 0 1 0 Jesse Christensen 1 0 1 0 Jessica Bo 1 0 1 0 Jessica Kruidhof 1 0 1 0 Jessica Zistatsis 1 0 1 0 Jess White 1 0 1 0 Jia Cheng Xu 1 0 1 0 Jiahao Guo 1 0 1 0 Jiajie Qiu 1 0 1 0 Jia Liu 1 0 1 0 Jia Na 1 0 1 0 Jiannan Zhang 1 0 1 0 jiaxing wang 1 0 1 0 jiekai er 1 0 1 0 jikun wang 1 0 1 0 Jim Jastifer 1 0 1 0 Jimmy Castro 1 0 1 0 Jim Ucic 1 0 1 0 Jing Wen Pan 1 0 1 0 Jing ZENG 1 0 1 0 Jinkyu Lee 1 0 1 0 jinxin huang 1 0 1 0 Jirakit Siripatrawan 1 0 1 0 Jits Myron 1 0 1 0 Joanna Laing 1 0 1 0 Joanne Hodder 1 0 1 0 João Albuquerque 1 0 1 0 João Belo 1 0 1 0 Joe Haris 1 0 1 0 Joe Mahoney 1 0 1 0 Johnathan Ford 1 0 1 0 John Edison Muñoz 1 0 1 0 John Olthoff 1 0 1 0 John Rogers 1 0 1 0 John Spencer 1 0 1 0 John Wannop 1 0 1 0 John Zbyzec 1 0 1 0 Jom Pornthep 1 0 1 0 Jonathan Bulluck 1 0 1 0 Jonathan Glenday 1 0 1 0 Jonathan Lin 1 0 1 0 Jongsang Son 1 0 1 0 Jonh maket 1 0 1 0 joongsoo kim 1 0 1 0 Jordan Skaro 1 0 1 0 Jordi Marcé-Nogué 1 0 1 0 Jorge Barco 1 0 1 0 José Huerta 1 0 1 0 José Miguel Rojas Labra 1 0 1 0 Jose Rivera 1 0 1 0 joshua kaufmann 1 0 1 0 Joshua Lahey 1 0 1 0 Josué Bonfim 1 0 1 0 Jozef Novák 1 0 1 0 Juan C. Garcia 1 0 1 0 Juilett Rose 1 0 1 0 Julian Ng-Thow-Hing 1 0 1 0 Julia Wilk 1 0 1 0 Julie Choisne 1 0 1 0 Julie Ellis 1 0 1 0 JunJay Tan 1 0 1 0 Junjie Tian 1 0 1 0 Junxiang Wang 1 0 1 0 junyi wu 1 0 1 0 JUNYOUNG OH 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 37,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "907c5049-69e9-4c99-bd02-d472ddf45c86",
    "document_id": "doc_40",
    "content": "Labra 1 0 1 0 Jose Rivera 1 0 1 0 joshua kaufmann 1 0 1 0 Joshua Lahey 1 0 1 0 Josué Bonfim 1 0 1 0 Jozef Novák 1 0 1 0 Juan C. Garcia 1 0 1 0 Juilett Rose 1 0 1 0 Julian Ng-Thow-Hing 1 0 1 0 Julia Wilk 1 0 1 0 Julie Choisne 1 0 1 0 Julie Ellis 1 0 1 0 JunJay Tan 1 0 1 0 Junjie Tian 1 0 1 0 Junxiang Wang 1 0 1 0 junyi wu 1 0 1 0 JUNYOUNG OH 1 0 1 0 Justin Bruntmyer 1 0 1 0 Justin Dennis 1 1 1 1 Justin Emmerich 1 0 1 0 Justin Tamsyn 1 0 1 0 Kaan Tirak 1 0 1 0 Kabir Kumar 1 0 1 0 kai tian 1 0 1 0 Kamolnat Tabattanon 1 0 1 0 Karan Bhula 1 0 1 0 Karan Devane 1 0 1 0 karan taneja 1 0 1 0 karen jansen 1 0 1 0 karilyn martinez 1 0 1 0 Karim Dudum 1 0 1 0 Karim Ismail 1 0 1 0 Karley Baringer 1 0 1 0 Karoline Wucherer 1 0 1 0 Kathan Sonar 1 0 1 0 Katherine Steele 1 0 1 0 kathi pearl 1 0 1 0 Kathleen Jagodnik 1 0 1 0 Kathryn Forrest 1 0 1 0 Katie Livingston 1 0 1 0 Katrina Easton 1 0 1 0 Kayra Bolcal 1 0 1 0 Kazuhiro Nakatani 1 0 1 0 kazunaga Nakayama 1 0 1 0 kc chung 1 0 1 0 Keaton Scherpereel 1 0 1 0 Keenon Werling 1 0 1 0 kehan mike 1 0 1 0 Kei Chun Wai 1 0 1 0 KELIFA SEID 1 0 1 0 Kellen Waters 1 0 1 0 Kelly Rodriguez 1 0 1 0 Ken Chen 1 0 1 0 Ken Lee 1 0 1 0 Kenneth Weiss 1 0 1 0 Keshav Mishra 1 0 1 0 Kevin Boland 1 0 1 0 Kevin Yang 1 0 1 0 keyo yone 1 0 1 0 Khushbu Patel 1 0 1 0 KIM Ji in 1 0 1 0 Kiret Dhindsa 1 0 1 0 Kiss Reka 1 0 1 0 Kohei Kaminishi 1 0 1 0 Konrad Fründ 1 0 1 0 Kowshik Thopalli 1 0 1 0 Krish Narotam 1 0 1 0 Kristin Nassar 1 0 1 0 Krystal Kerney 1 0 1 0 Kryztopher Tung 1 0 1 0 Kuang Nie 1 0 1 0 kuan sun 1 0 1 0 kun Wang 1 0 1 0 Kyle Young 1 0 1 0 la dadee 1 0 1 0 Lady Bird 1 0 1 0 Lan Zhang 1 0 1 0 Laura Hutchinson 1 0 1 0 Lauren Blake 1 0 1 0 Laurent Hendrickx 1 0 1 0 Laurin Koppenwallner 1 0 1 0 Lealem Mulugeta 1 0 1 0 Léa Pillette 1 0 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 38,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "af216f9d-9e92-465a-b047-1f336cc1dd13",
    "document_id": "doc_40",
    "content": "1 0 1 0 Kristin Nassar 1 0 1 0 Krystal Kerney 1 0 1 0 Kryztopher Tung 1 0 1 0 Kuang Nie 1 0 1 0 kuan sun 1 0 1 0 kun Wang 1 0 1 0 Kyle Young 1 0 1 0 la dadee 1 0 1 0 Lady Bird 1 0 1 0 Lan Zhang 1 0 1 0 Laura Hutchinson 1 0 1 0 Lauren Blake 1 0 1 0 Laurent Hendrickx 1 0 1 0 Laurin Koppenwallner 1 0 1 0 Lealem Mulugeta 1 0 1 0 Léa Pillette 1 0 1 0 Leia Stirling 1 0 1 0 Léo Denouël 1 0 1 0 Leonid Leshukov 1 0 1 0 Léo-Paul Chosseler 1 1 1 1 liang gu 1 0 1 0 lidia Sanahuja Guarro 1 0 1 0 Lieve Thibaut 1 0 1 0 Li Lyo 1 0 1 0 Lily Wei 1 0 1 0 Lily Wilcox 1 0 1 0 Linda Tonelli 1 0 1 0 LINGHUI XU 1 0 1 0 Liqun He 1 0 1 0 li shuaifu 1 0 1 0 li xiyuan 1 0 1 0 Liying Zheng 1 0 1 0 Liz Gonzalez 1 0 1 0 Liz Hsiao-Wecksler 1 0 1 0 Loes Marks 1 0 1 0 Logan Lancaster 1 0 1 0 Lorenzo Capetta 1 0 1 0 Lorenzo Pitto 1 1 1 1 Lorenz Winkler 1 0 1 0 Louis Monier 1 0 1 0 Luca Borgonovi 1 0 1 0 Lucas Fahham 1 0 1 0 Lucas Gaudio 1 0 1 0 Lucas Rabou 1 0 1 0 Luc McKay 1 0 1 0 Luisa Scheuring 1 0 1 0 Luis Hernandez 1 0 1 0 Luís Miguel Matos 1 0 1 0 Lukas Bildheim 1 0 1 0 Lukas Kammler 1 0 1 0 Łukasz Kidziński 1 0 1 0 luo david 1 0 1 0 lupacexi lupacexi 1 0 1 0 Lydia Brough 1 0 1 0 Maddy Fernand 1 0 1 0 Madeline McAuley 1 0 1 0 mahboobeh mehdikhani 1 0 1 0 Mahdieh Gharagozloo 1 0 1 0 Mahesh Jadhav 1 0 1 0 Mahesh Tammu 1 0 1 0 Mahsa Khalili 1 0 1 0 maida ranjbar 1 0 1 0 Maïka Guillemin 1 0 1 0 Malte Wamhoff 1 0 1 0 Mansour Torabi 1 0 1 0 Man Yan Tong 1 0 1 0 Marc Bernat Adria 1 0 1 0 Marcelline Dechenaud 1 0 1 0 Marc-Joseph Antonini 1 0 1 0 Marco Ganzetti 1 0 1 0 Marco Mongelli 1 0 1 0 Marc Rueda 1 0 1 0 maria alegrias 1 0 1 0 María B Sánchez 1 0 1 0 mariaevinne evinne 1 0 1 0 Maria Lazzaroni 1 0 1 0 Mariam Hegazi 1 0 1 0 Mariam Hegazi 1 0 1 0 Mario Garcia 1 0 1 0 Marisa Silva 1 0 1 0 Marjolein van der Krogt 1 0 1 0 Marko Ackermann 1",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 39,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f65ef5e8-05af-43c1-9116-8839deeb49c2",
    "document_id": "doc_40",
    "content": "0 1 0 Marc Bernat Adria 1 0 1 0 Marcelline Dechenaud 1 0 1 0 Marc-Joseph Antonini 1 0 1 0 Marco Ganzetti 1 0 1 0 Marco Mongelli 1 0 1 0 Marc Rueda 1 0 1 0 maria alegrias 1 0 1 0 María B Sánchez 1 0 1 0 mariaevinne evinne 1 0 1 0 Maria Lazzaroni 1 0 1 0 Mariam Hegazi 1 0 1 0 Mariam Hegazi 1 0 1 0 Mario Garcia 1 0 1 0 Marisa Silva 1 0 1 0 Marjolein van der Krogt 1 0 1 0 Marko Ackermann 1 0 1 0 Mark Ransley 1 0 1 0 Markus Gilbert 1 0 1 0 Markus Peters 1 0 1 0 Markus Peters 1 0 1 0 Mark Villwock 1 0 1 0 Marlene Kurz 1 0 1 0 MARLON JONES 1 0 1 0 Marshall Tumperi 1 0 1 0 marta ayestaran 1 0 1 0 Martina Barzan 1 0 1 0 Martin Androvich 1 0 1 0 Martina Pedroli 1 0 1 0 Masataka Yamamoto 1 0 1 0 masoume norouzi 1 0 1 0 Massimo Sartori 1 0 1 0 masude mostofi 1 0 1 0 masume hessam 1 0 1 0 Mathieu Ruepp 1 1 1 1 Matias Xo 1 0 1 0 Matsui Kazuhiro 1 0 1 0 Matt Adams 1 0 1 0 Matteo Lancini 1 0 1 0 matt hand 1 0 1 0 Matthew Blomquist 1 0 1 0 Matthew Foreman 1 0 1 0 Matthew Prebble 1 0 1 0 Maura Grotta 1 0 1 0 Maurice Mohr 1 0 1 0 Maurizio Pellegrini 1 0 1 0 max1995 max1995 1 0 1 0 Max Herrmann 1 0 1 0 Maximilian Ebenbichler 1 0 1 0 Mazen Al Borno 1 0 1 0 megha thilak 1 0 1 0 Mehdi Nematimoez 1 0 1 0 Meihui Li 1 0 1 0 Merridy Lithgow 1 0 1 0 mersad saberi 1 0 1 0 metin bicer 1 0 1 0 M Holmes 1 0 1 0 Michael Fernandez 1 0 1 0 Michael Hardegger 1 0 1 0 michael jaeger 1 0 1 0 Michael Miller 1 0 1 0 Michael Raitor 1 0 1 0 Michael Vignos 1 0 1 0 MICHAUD Florian 1 0 1 0 Michel Ducos 1 0 1 0 Michel Habib 1 0 1 0 Michelle Cullen 1 0 1 0 Mihir Gawand 1 0 1 0 Mike Hast 1 0 1 0 milad dlatyar ba 1 0 1 0 Milagros Jaén 1 0 1 0 Milosz Lukaszewicz 1 0 1 0 mina ashraf 1 0 1 0 Min Bian 1 0 1 0 Mingxin LI 1 0 1 0 Mireia Claramunt 1 0 1 0 Mitul Agrawal 1 0 1 0 M K 1 0 1 0 MNRD Mathieu 1 0 1 0 Moein Nazifi 1 0 1 0 moein pourmand 1 0 1 0 mohadeseh shafie 1 0 1 0 Mohadese Kavianifard 1 0 1",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 40,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5872a418-6a36-485c-9592-d72f40a08347",
    "document_id": "doc_40",
    "content": "1 0 1 0 Mihir Gawand 1 0 1 0 Mike Hast 1 0 1 0 milad dlatyar ba 1 0 1 0 Milagros Jaén 1 0 1 0 Milosz Lukaszewicz 1 0 1 0 mina ashraf 1 0 1 0 Min Bian 1 0 1 0 Mingxin LI 1 0 1 0 Mireia Claramunt 1 0 1 0 Mitul Agrawal 1 0 1 0 M K 1 0 1 0 MNRD Mathieu 1 0 1 0 Moein Nazifi 1 0 1 0 moein pourmand 1 0 1 0 mohadeseh shafie 1 0 1 0 Mohadese Kavianifard 1 0 1 0 mohamad mahdavian 1 0 1 0 mohamad r 1 0 1 0 Mohamad Reza Kharazi 1 0 1 0 Mohamed Mohanna 1 0 1 0 Mohamed Monib 1 0 1 0 mohammad karimi 1 0 1 0 Mohammed ALHamadani 1 0 1 0 Mohammed Awad 1 0 1 0 Mohit Soni 1 0 1 0 mon don 1 0 1 0 Moon Jeheon 1 0 1 0 Morgana Afonso 1 0 1 0 Morteza Khosrotabar 1 0 1 0 Mruthunjay Mani 1 0 1 0 muhamad fadzli ashari 1 0 1 0 Muhammad Haras 1 0 1 0 muhammed öztürk 1 0 1 0 Mukta Hanumanthu 1 0 1 0 Munkh Tsagaan 1 0 1 0 Murat Bakkal 1 0 1 0 Murilo Saraiva de Queiroz 1 0 1 0 Muskan Agarwal 1 0 1 0 nadia Khlail 1 0 1 0 Nadine Domnik 1 0 1 0 nafiseh nosouhi 1 0 1 0 Nahuel Rodriguez 1 0 1 0 Namwoong Kim 1 0 1 0 Naoki Kubota 1 0 1 0 Naser Mehrabi 1 0 1 0 Natalie Norton 1 0 1 0 Natalie Schmidt 1 0 1 0 Nathaniel Smith 1 0 1 0 Neda Abdollahi 1 0 1 0 Negar Brkt 1 0 1 0 Neha Das 1 0 1 0 Nelson Xiang 1 0 1 0 Nery Moutinho 1 0 1 0 Newton Maruyama 1 0 1 0 Neziha Akalin 1 0 1 0 Nibraas Khan 1 0 1 0 Niccolo Vacca 1 1 1 1 Nicholas Betancourt 1 0 1 0 Nicholas Boer 1 0 1 0 Nicholas Pelz 1 0 1 0 Nicholas Roberts 1 0 1 0 Nicholas Vandenberg 1 0 1 0 Nick Chen 1 0 1 0 Nick Flyger 1 0 1 0 Nicolas Pronost 1 0 1 0 Nicolas Timmermans 1 0 1 0 nicolas velasquez 1 0 1 0 Nicolas Warneking 1 0 1 0 Nicole Cascia 1 0 1 0 Nilay Majumder 1 0 1 0 Niloufar Besharatzad 1 0 1 0 Nils Hakansson 1 0 1 0 Noah Bradford 1 0 1 0 Nokhez Qazi 1 0 1 0 nour besbes 1 0 1 0 Nurefsan Yilmaz 1 0 1 0 nvard khachatryan 1 0 1 0 Nynke Rooks 1 0 1 0 Oana Chiriac 1 0 1 0 Olesya Klets 1 0 1 0 Olesya Klets 1 0 1 0 Olivia Roud 1 0 1",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 41,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c7be757a-7783-48dd-a836-2f5fdedffd93",
    "document_id": "doc_40",
    "content": "Timmermans 1 0 1 0 nicolas velasquez 1 0 1 0 Nicolas Warneking 1 0 1 0 Nicole Cascia 1 0 1 0 Nilay Majumder 1 0 1 0 Niloufar Besharatzad 1 0 1 0 Nils Hakansson 1 0 1 0 Noah Bradford 1 0 1 0 Nokhez Qazi 1 0 1 0 nour besbes 1 0 1 0 Nurefsan Yilmaz 1 0 1 0 nvard khachatryan 1 0 1 0 Nynke Rooks 1 0 1 0 Oana Chiriac 1 0 1 0 Olesya Klets 1 0 1 0 Olesya Klets 1 0 1 0 Olivia Roud 1 0 1 0 Omid Dehpour 1 0 1 0 Om Vishanagra 1 0 1 0 OPHELIE HERVE 1 0 1 0 Oscar Palomar 1 0 1 0 pablo monjardin 1 0 1 0 Paola Castagno 1 0 1 0 Parastoo Shams 1 0 1 0 parisa dehghan 1 0 1 0 Pascal Moser 1 0 1 0 Pasi Heikkila 1 0 1 0 Patricia Kramer 1 0 1 0 Patrick Carden 1 0 1 0 Patrick Govea 1 0 1 0 Patrick Steck 1 0 1 0 Paul Jiang 1 0 1 0 Paul Naude 1 0 1 0 Paul Paetow 1 0 1 0 Pawel Golyski 1 0 1 0 Paweł Marek 1 0 1 0 Pedro Moreira 1 0 1 0 Pedro Teixeira 1 0 1 0 Pei-Hsin Kuo 1 0 1 0 Pelle Heun 1 0 1 0 Pengxiang Cheng 1 0 1 0 Perry Moran 1 0 1 0 Peter Murphy 1 0 1 0 Peter Rück 1 0 1 0 Peter Tavinor 1 0 1 0 peter tohen 1 0 1 0 Phillip Daniel 1 0 1 0 Pia Henneken 1 0 1 0 Pierluigi Nichilo 1 0 1 0 Pieter Peeters 1 0 1 0 Pilwon Hur 1 0 1 0 PJ Terryn 1 0 1 0 Pouriya Pourgholam 1 0 1 0 pouya Amiri 1 0 1 0 Pranay More 1 0 1 0 Pratyush Sahoo 1 0 1 0 Prerana Lakshmanan 1 0 1 0 priti yadav 1 0 1 0 PRUDHVI TEJ CHINIMILLI 1 0 1 0 P Thompson 1 0 1 0 pulung aji 1 0 1 0 pyara mosam 1 0 1 0 Qingyao Bian 1 0 1 0 Quint de Kleijn 1 0 1 0 Quoc Nguyen 1 0 1 0 Rachela Rosenhain 1 0 1 0 Rachel Meyer 1 0 1 0 Rachid Ramadan 1 0 1 0 Rafael Caldas 1 0 1 0 Raghavi Chendhil 1 0 1 0 rahaf roro 1 0 1 0 Rahul Gawande 1 0 1 0 Raide González 1 0 1 0 Raima Sen 1 0 1 0 Rajesh Govindan 1 0 1 0 Ralph Lauren 1 0 1 0 Raman Sharma 1 0 1 0 ramesh natrayan 1 0 1 0 RA Miller 1 0 1 0 Ramin Saki 1 0 1 0 Randy Radmer 1 0 1 0 rare pearl 1 0 1 0 Ravi Haksar 1 0 1 0 Raymond",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 42,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "062cb647-de80-455f-9cb3-0e7cb06cca51",
    "document_id": "doc_40",
    "content": "0 1 0 Rachid Ramadan 1 0 1 0 Rafael Caldas 1 0 1 0 Raghavi Chendhil 1 0 1 0 rahaf roro 1 0 1 0 Rahul Gawande 1 0 1 0 Raide González 1 0 1 0 Raima Sen 1 0 1 0 Rajesh Govindan 1 0 1 0 Ralph Lauren 1 0 1 0 Raman Sharma 1 0 1 0 ramesh natrayan 1 0 1 0 RA Miller 1 0 1 0 Ramin Saki 1 0 1 0 Randy Radmer 1 0 1 0 rare pearl 1 0 1 0 Ravi Haksar 1 0 1 0 Raymond Ma 1 0 1 0 Rebecca Frimenko 1 0 1 0 Rebecca Lathrop 1 0 1 0 reeja khan 1 0 1 0 René Schuermann 1 0 1 0 Rene van Ee 1 0 1 0 Reno Hurol 1 0 1 0 Reza Abiri 1 0 1 0 reza reza 1 0 1 0 R F 1 0 1 0 Rhys Jones 1 0 1 0 Riada Endo 1 0 1 0 Ricardo Lameira 1 0 1 0 riccardo boldini 1 0 1 0 Riccardo Gianoli 1 0 1 0 Richard Baker 1 0 1 0 Richard Bolger 1 0 1 0 richard hu 1 0 1 0 RJ Radmer 1 0 1 0 Robert Ayers 1 1 1 1 Robert Gillette 1 0 1 0 Roberto Garcia van der Westen 1 0 1 0 Roedolph Opperman 1 0 1 0 Roee Beer 1 0 1 0 Roman Malyk 1 0 1 0 Roma Rzp 1 0 1 0 Ronak Patel 1 0 1 0 Ronald Joy 1 0 1 0 Ronny Moreas 1 0 1 0 Ron Schindler 1 0 1 0 Ross Munro 1 0 1 0 Ross Wilkinson 1 0 1 0 Rounak Bhattacharya 1 0 1 0 Roy Kornbluh 1 0 1 0 Rudolf deS onnaville 1 0 1 0 Rufaida Hussain 1 0 1 0 Ruphinder Kaur 1 0 1 0 Russell Hardesty 1 0 1 0 Rutuja Lahoti 1 0 1 0 Ryan Frost 1 0 1 0 Ryohei Michikawa 1 0 1 0 Saad Khan 1 0 1 0 Sabbir Hossain 1 0 1 0 saboor noor 1 0 1 0 Sadanand Modak 1 0 1 0 Saharul Arof 1 0 1 0 Sajad Azizi 1 0 1 0 Sajid Rafique 1 0 1 0 samane amini 1 0 1 0 Sam Brockie 1 0 1 0 Samer Moghnieh 1 0 1 0 samworth white 1 0 1 0 Sandeep Mudgal 1 0 1 0 Sander Holthof 1 0 1 0 Santosh Kumar 1 0 1 0 sara baily 1 0 1 0 Sara Giorgioni 1 0 1 0 Sarah Erickson 1 1 1 1 Sarah Li 1 0 1 0 Sara Martínez 1 0 1 0 Sara Morelli 1 0 1 0 Satya Sri Mummidivarapu 1 0 1 0 s beveridge 1 0 1 0 Scott Brennan 1 0 1 0 sdfdsf dfgfg 1 0 1 0 Sebastian Lee 1 0 1",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 43,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a6edd9c5-dc4b-4cc8-9ee8-4f2ee7dd8dfc",
    "document_id": "doc_40",
    "content": "1 0 1 0 Samer Moghnieh 1 0 1 0 samworth white 1 0 1 0 Sandeep Mudgal 1 0 1 0 Sander Holthof 1 0 1 0 Santosh Kumar 1 0 1 0 sara baily 1 0 1 0 Sara Giorgioni 1 0 1 0 Sarah Erickson 1 1 1 1 Sarah Li 1 0 1 0 Sara Martínez 1 0 1 0 Sara Morelli 1 0 1 0 Satya Sri Mummidivarapu 1 0 1 0 s beveridge 1 0 1 0 Scott Brennan 1 0 1 0 sdfdsf dfgfg 1 0 1 0 Sebastian Lee 1 0 1 0 sebastien Gradit 1 0 1 0 Senjuti Rahman 1 0 1 0 Seo young ho 1 0 1 0 Sergio Beltran 1 0 1 0 Sergiy Yakovenko 1 0 1 0 seyed milad ghafary shirvan 1 0 1 0 Seyed Sepehr Mohseni 1 0 1 0 Seyyed Hamed Hosseini Nasab 1 0 1 0 sfsfsf sfgsf 1 0 1 0 Shagunpreet Kaur 1 0 1 0 Shahrzad Zandi 1 0 1 0 Shane Hudson 1 0 1 0 shanlin wang 1 0 1 0 Shay Shtern 1 0 1 0 Sheel Joshi 1 0 1 0 shicheng wang 1 0 1 0 shifeng bai 1 0 1 0 SHIFIN A S 1 0 1 0 shi liupeng 1 0 1 0 Shilong Yue 1 0 1 0 Shlomo Cohen 1 0 1 0 shuqi Zhang 1 0 1 0 shurong zhu 1 0 1 0 Shwetha Macheri Ravishankar 1 0 1 0 Shyam Nair 1 0 1 0 siavash shirvanipour 1 0 1 0 Siddharth Sridhar 1 0 1 0 SILVIA SÁNCHEZ SALINAS 1 0 1 0 Simon Bender 1 0 1 0 sina morningstar 1 0 1 0 Sivaprasad Kunnath 1 0 1 0 siyuan liu 1 0 1 0 Siyu Chen 1 0 1 0 Sofie Ludvigsson 1 0 1 0 Somaiya Khan 1 0 1 0 sony manandhar 1 0 1 0 Sophie Fleischmann 1 0 1 0 Sören Hufschmidt 1 0 1 0 SOUVIK PAUL 1 0 1 0 SRAVANI MERUVA 1 0 1 0 Stefan Schaffelhofer 1 0 1 0 Subhasish Malik 1 0 1 0 Sudheer Kumar Nanduri 1 0 1 0 Sudip Subedi 1 0 1 0 Suha Mishal 1 0 1 0 S UNNI SANKAR 1 0 1 0 supriya s 1 0 1 0 Surbhi Gupta 1 0 1 0 Suresh Chinthakunta 1 0 1 0 Susannah Hall 1 0 1 0 Sylvain Comtois 1 1 1 1 Szilard Jakab 1 0 1 0 Taeho Gang 1 0 1 0 Tahir çelik 1 0 1 0 Taizo FUJII 1 0 1 0 Talal Bin Irshad 1 0 1 0 Tamara Ordonez 1 0 1 0 tang shengzheng 1 0 1 0 tang yunqi 1 0 1 0 Tanny Damet 1 0 1 0 tara farizeh 1 0 1 0 Tarana Kaovasia 1 0 1 0 TARUN KARAK 1 0 1 0 Telio Gottardi 1 0 1 0 Teresa Russo 1",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 44,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c11c0b49-fdf5-4758-8eea-151c9abb5815",
    "document_id": "doc_40",
    "content": "Suresh Chinthakunta 1 0 1 0 Susannah Hall 1 0 1 0 Sylvain Comtois 1 1 1 1 Szilard Jakab 1 0 1 0 Taeho Gang 1 0 1 0 Tahir çelik 1 0 1 0 Taizo FUJII 1 0 1 0 Talal Bin Irshad 1 0 1 0 Tamara Ordonez 1 0 1 0 tang shengzheng 1 0 1 0 tang yunqi 1 0 1 0 Tanny Damet 1 0 1 0 tara farizeh 1 0 1 0 Tarana Kaovasia 1 0 1 0 TARUN KARAK 1 0 1 0 Telio Gottardi 1 0 1 0 Teresa Russo 1 0 1 0 Tereza Kasparova 1 0 1 0 Terry Buck 1 0 1 0 Terry Howells 1 0 1 0 Tess Carswell 1 0 1 0 Thales Souza 1 0 1 0 Thibault Marsan 1 0 1 0 Thomas Bonfert 1 0 1 0 Thomas BONIS 1 0 1 0 Thomas Coulter 1 0 1 0 Thomas Grace 1 0 1 0 Thomas James 1 0 1 0 Thomas Lagoute 1 0 1 0 Thomas Madden 1 0 1 0 Thomas ROBERT 1 0 1 0 Thomas Ruppert 1 0 1 0 Thorben Pauli 1 0 1 0 Tiago Canal 1 0 1 0 Tiago Franco 1 0 1 0 Tiana Breust 1 0 1 0 Tianchi Chen 1 1 1 1 tian kechao 1 0 1 0 Timothy Kotin 1 0 1 0 Tina Garman 1 0 1 0 Tobias Staengle 1 0 1 0 Tobi Enaigbe 1 0 1 0 Tom cliker 1 0 1 0 tong niu 1 0 1 0 Tord Natlandsmyr 1 0 1 0 trabelsi dorra 1 0 1 0 Tran Ha 1 0 1 0 Trevor Connor 1 0 1 0 trung phan 1 0 1 0 Tuhin Sengupta 1 0 1 0 Tyler Knighton 1 0 1 0 Tyler Richardson 1 0 1 0 Uday Phutane 1 0 1 0 Urszula Kania 1 0 1 0 Vamsi Mallangi 1 0 1 0 Vanessa Carnevali 1 0 1 0 Varun Joshi 1 0 1 0 veerendra v 1 0 1 0 Venkatesh Sripada 1 0 1 0 venkatrama G 1 0 1 0 victor diaz 1 0 1 0 Victoria Landrum 1 0 1 0 Vikas Kaul 1 0 1 0 vikram chohan 1 0 1 0 Viktor Bokisch 1 0 1 0 Vilhjálmur Grétar Elíasson 1 0 1 0 Vincent Padois 1 0 1 0 Vincenzo Salzillo 1 0 1 0 Vinutha Sampaath 1 0 1 0 Vinzenz Hoeck 1 0 1 0 Virgil Stokes 1 0 1 0 virginia boccanera 1 0 1 0 Vishnu Kiran Surya vamsam 1 0 1 0 Viswanath Sundar 1 0 1 0 Vitaly Kheyfets 1 0 1 0 Vittorio Sanguineti 1 0 1 0 Vivian Nguyen 1 0 1 0 Vladimir Joukov 1 0 1 0 wanqi yu 1 0 1 0 Wenjing Li 1 0 1 0 wensheng Li 1 0 1 0 Werner Krammer 1 0 1 0 William Anderton 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 45,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "38f22230-e6f8-4a67-ab4a-09fe2bad298a",
    "document_id": "doc_40",
    "content": "1 0 1 0 Vincenzo Salzillo 1 0 1 0 Vinutha Sampaath 1 0 1 0 Vinzenz Hoeck 1 0 1 0 Virgil Stokes 1 0 1 0 virginia boccanera 1 0 1 0 Vishnu Kiran Surya vamsam 1 0 1 0 Viswanath Sundar 1 0 1 0 Vitaly Kheyfets 1 0 1 0 Vittorio Sanguineti 1 0 1 0 Vivian Nguyen 1 0 1 0 Vladimir Joukov 1 0 1 0 wanqi yu 1 0 1 0 Wenjing Li 1 0 1 0 wensheng Li 1 0 1 0 Werner Krammer 1 0 1 0 William Anderton 1 0 1 0 William Clark 1 0 1 0 william watson 1 0 1 0 Wout Vandenbergh 1 0 1 0 Xianwei ZENG 1 0 1 0 XiaoDong Liu 1 0 1 0 XIAOHAN XU 1 0 1 0 xiaowei tan 1 0 1 0 Xiaowen Chen 1 0 1 0 xichang sun 1 0 1 0 Xing Wang 1 0 1 0 Xinyi He 1 0 1 0 XINYU LI 1 0 1 0 XinYu Liu 1 0 1 0 XI SHI 1 0 1 0 xuan liu 1 0 1 0 Yang Jianchen 1 0 1 0 Yang Jingbang 1 0 1 0 Yang ju young 1 0 1 0 yang ming 1 0 1 0 Yannick Finck 1 0 1 0 Yannick Hemmeter 1 0 1 0 Yasamin Forootani 1 0 1 0 Yashraj Narang 1 0 1 0 yasser yaya 1 0 1 0 yi-chung lin 1 0 1 0 Yihui Zhao 1 0 1 0 Yiming Zhao 1 0 1 0 Yogesh Kumaran 1 0 1 0 Yoshimi Kenichiro 1 0 1 0 youngho park 1 0 1 0 Yow Samuel 1 0 1 0 yuan gao 1 0 1 0 Yuan Li 1 0 1 0 yuhei kishino 1 0 1 0 Yuki Koike 1 0 1 0 Yun Hwan Lee 1 0 1 0 yunjian zhong 1 0 1 0 yun peng zheng 1 0 1 0 Yuqi Liu 1 0 1 0 Yuwei Liu 1 0 1 0 yu yang 1 0 1 0 Yuzo Michibata 1 0 1 0 Zach Contois 1 0 1 0 Zak Kindl 1 0 1 0 Zane Duke 1 0 1 0 zeinab kazemi 1 0 1 0 zhang zheng 1 0 1 0 Zhaomin Yao 1 0 1 0 Zhen Xiao 1 0 1 0 zhiwei xv 1 0 1 0 zhong hongchuan 1 0 1 0 zhou zhou 1 0 1 0 Zhuo Chen 1 0 1 0 Zi Hui Foo 1 0 1 0 zilu wang 1 0 1 0 Zinelabidine Regragui 1 0 1 0 ziya pashai 1 0 1 0 zq zhong 1 0 1 0 Zuemeyran Oezek 1 0 1 0 Zvonimir Pusnik 1 0 1 0 Νίκη Βαδαλούκα 1 0 1 0 俊祺 蔡 1 0 1 0 国人 祖 1 1 1 1 坤 徐 1 0 1 0 晨 杨 1 0 1 0 李 小岩 1 0",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 46,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "84664937-0ba3-461a-b0d0-0258312dee8d",
    "document_id": "doc_40",
    "content": "xv 1 0 1 0 zhong hongchuan 1 0 1 0 zhou zhou 1 0 1 0 Zhuo Chen 1 0 1 0 Zi Hui Foo 1 0 1 0 zilu wang 1 0 1 0 Zinelabidine Regragui 1 0 1 0 ziya pashai 1 0 1 0 zq zhong 1 0 1 0 Zuemeyran Oezek 1 0 1 0 Zvonimir Pusnik 1 0 1 0 Νίκη Βαδαλούκα 1 0 1 0 俊祺 蔡 1 0 1 0 国人 祖 1 1 1 1 坤 徐 1 0 1 0 晨 杨 1 0 1 0 李 小岩 1 0 1 0 肖烽 李 1 0 1 0 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/project/stats/forum_stats.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "project",
        "stats",
        "forum_stats.php"
      ],
      "content_type": "forum",
      "position": 47,
      "tags": [
        "forum",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "88cc8b60-c45f-4e28-bc68-1e2925c2704b",
    "document_id": "doc_11",
    "content": "Tissue Computational methods provide new insights on how and why tissues degenerate and how they can be repaired and regenerated, impacting a diverse range of conditions including osteoarthritis, corneal disease, and skin wounds. Featured projects Recently updated projects total projects 24 projects with downloads Search projects in this category News OpenArm Multisensor data set and muscle contour tracking code released + slated for presentation at ASB & BioRob! OpenArm: Volumetric & Time Series Models of Muscle Deformation Jul 24, 2020 OpenArm 2.0 data set released + scheduled for presentation at EMBC Berlin! OpenArm: Volumetric & Time Series Models of Muscle Deformation Jul 16, 2019 First OpenArm 3D muscle deformation data set released! OpenArm: Volumetric & Time Series Models of Muscle Deformation Nov 29, 2018 Publications Open Knee(s): A Free and Open Source Library of Specimen-Specific Models and Related Digital Assets for Finite Element Analysis of the Knee Joint, Snehal Chokhandre, Ariel Schwartz, Ellen Klonowski, Benjamin Landis & Ahmet Erdemir, Annals of Biomedical Engineering volume 51, pages10–23 (2023) Laura Hallock, Akira Kato, and Ruzena Bajcsy. \"Empirical quantification and modeling of muscle deformation: Toward ultrasound-driven assistive device control.\" In IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2018. \"Competing Mechanistic Hypotheses of Acetaminophen-Induced Hepatotoxicity Challenged by Virtual Experiments\" Andrew K. Smith, Brenden K. Petersen, Glen E. P. Ropella, Ryan C. Kennedy, Neil Kaplowitz, Murad Ookhtens, C. Anthony Hunt. PLoS Comput Biol. 2016 Dec 16;12(12):e1005253 Discussion Does OpenSim account for joint friction? Open Knee: A Three-Dimensional Finite Element Representation of the Knee Joint Feb 14, 2025 Does OpenSim account for joint friction? Grand Challenge Competition to Predict In Vivo Knee Loads Feb 14, 2025 Synchronized c3d-data 6th competition Grand Challenge Competition to Predict In Vivo Knee Loads Mar 19, 2024 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=420&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "da690f15-83b4-4a50-bec0-bb91e600effc",
    "document_id": "doc_8",
    "content": "Neuromuscular System Computational biology is increasing our understanding, providing better diagnosis, and improving treatments of pathologic neuromuscular conditions, such as stroke and cerebral palsy. Featured projects Recently updated projects total projects 166 projects with downloads Search projects in this category News New Calibrated Knee Models and Dataset Validation of Subject-Specific Knee Models from In Vivo Measurements Mar 20, 2025 New release: SCONE 2.4.1 SCONE: Open Source Software for Predictive Simulation Feb 27, 2025 New publication at the IFAC-PapersOnLine Predictive framework for functional electrical stimulation (FES) cycling Nov 22, 2024 Publications Sampaio de Oliveira ML, Uchida TK. Phenomenological muscle constitutive model with actin–titin binding for simulating active stretching. Journal of Biomechanical Engineering 147(1): 011002, 2025. Predictive Framework for Electrical Stimulation Cycling in Spinal Cord Injury The Neuromusculoskeletal Modeling Pipeline: MATLAB-based Model Personalization and Treatment Optimization Functionality for OpenSim Discussion Re: MocoTrack - GRF Parameter Tuning & Convergence Issues OpenSim Moco Mar 29, 2025 Re: Tutorial may conflict with opensim 4.5 OpenSim Mar 28, 2025 SO runs OK in gui but error in API OpenSim Mar 27, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=310&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0afef42d-4264-41ba-902b-a67dfd012985",
    "document_id": "doc_146",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53087663/Troubleshooting",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53087663",
        "Troubleshooting"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5de97259-de55-4616-a596-c070893f470c",
    "document_id": "doc_80",
    "content": "Spasticity model in OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (10) List Map More info 678 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provides a model of spasticity that can be added to any muscle in an .osim model. The spastic muscle will show spastic behavior when running for example a Forward or CMC tool. Download Latest Releases Spastic Controller Main C++: Spastic Controller Spastic Controller Plugin C++: Spastic Controller Plugin Spastic Controller Plugin dll: SpasticControllerPlugin.dll Spasticity plugin Osim3.0: Spastic Controller OpenSim 30 License: Spasticity plugin Osim3.0 In this project a spasticity model is created in OpenSim. This model is implemented by means of a controller plugin. This so-called Spastic Controller is a controller that adds a spasticity effect to any Thelen2003Muscle to which it is assigned in an OpenSim model. The controller will excite the muscle to which it is assigned when the muscle fibers of this muscle are stretched. The Spastic Controller is developed and validated using experimental data of an instrumented clinical spasticity test. 766 downloads 0 forum posts 10 followers Last updated Feb 10, 2015 Project Statistics Join Mailing Lists Suggest Idea Marjolein van der Krogt Ajay Seth Lynn Bar-On Thalia Kindt Katherine Steele Scott Delp People also viewed Simulations of Crouch Gait Muscle contributions to mass center... EMG-informed Computed Muscle Control for Dynamic... How much muscle strength is required to walk in... Evertor and invertor muscle co-activation... Clinical Gait Analysis (Vicon - OpenSim) Toolbox Multidimensional Cubic B-Spline Neuromuscular Models for the Predictive... See all Stiff-knee walking simulations Simulating the effects of weakness and muscle... Evaluation of In Vivo Knee Load Predictions Using... How Robust is Human Gait to Calf Muscle Shortening? identification of cerebral palsy trunk muscles' role... Human Posture and Balance Platform in OpenSim Sensory Components for Simulating Postural Feedback... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/spasticitymodel/",
      "title": "SimTK: Spasticity model in OpenSim: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "spasticitymodel"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4fee117d-8c63-4035-a289-28468143138f",
    "document_id": "doc_38",
    "content": "2023-05 2023-06 2023-07 2023-08 2023-09 2023-10 2023-11 2023-12 2024-01 2024-02 2024-03 2024-04 2024-05 2024-06 2024-07 2024-08 2024-09 2024-10 2024-11 2024-12 2025-01 2025-02 2025-03 2025-04 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/project/stats/index.php?group_id=91",
      "title": "SimTK: OpenSim",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics: Project Activity Plots Project Statistics Select Project Area: Downloads Issue Trackers Documents Page Hits Stanford Page Hits Visitors Stanford Visitors Source Code Commits Type: Daily Weekly Monthly Start Date: 2023-05 2023-06 2023-07 2023-08 2023-09 2023-10 2023-11 2023-12 2024-01 2024-02 2024-03 2024-04 2024-05 2024-06 2024-07 2024-08 2024-09 2024-10 2024-11 2024-12 2025-01 2025-02 2025-03 2025-04 End Date: 2023-05 2023-06 2023-07 2023-08 2023-09 2023-10 2023-11 2023-12 2024-01 2024-02 2024-03 2024-04 2024-05 2024-06 2024-07 2024-08 2024-09 2024-10 2024-11 2024-12 2025-01 2025-02 2025-03 2025-04 Download Packages Statistics Select Package: OpenSim OpenSim Models and Examples Github Source Code Repository OpenSim Source Code Start Date: 2023-05 2023-06 2023-07 2023-08 2023-09 2023-10 2023-11 2023-12 2024-01 2024-02 2024-03 2024-04 2024-05 2024-06 2024-07 2024-08 2024-09 2024-10 2024-11 2024-12 2025-01 2025-02 2025-03 2025-04 End Date:",
      "hierarchy": [
        "project",
        "stats",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5a38880a-ce52-4e62-831c-0a95803a13f2",
    "document_id": "doc_24",
    "content": "SimTK Communities Request a community OpenSim OpenSim is a freely available software project for musculoskeletal modeling and dynamic simulation. The community uses OpenSim to uncover the biomechanical causes of movement abnormalities and to design improved treatments. Individuals around the world contribute models, scripts, data, and plugins to enhance the software. Shoulder Modeling The shoulder modeling community is interested in understanding and utilizing biomechanics knowledge of the shoulder and upper-extremity to advance clinical treatments and diagnoses, ergonomics, and sports performance. SimVascular SimVascular is a freely available open source software platform for image-based modeling and cardiovascular blood flow simulation. The community uses SimVascular for construction of patient-specific anatomic vascular models, and finite element simulations of hemodynamics and wall biomechanics. SimVascular provides a complete pipeline from medical image data to simulation results and analysis. IMAG/MSM Consortium The Consortium is a group of researchers interested in the activities to grow the field of multiscale modeling in biomedical, biological and behavioral systems and promote multidisciplinary scientific collaboration IMAG-MSM Public Dissemination & Education Working Group Programming computer models of biological systems is a fun and powerful way to learn about the complex processes that control human health and disease. For example, computer models can help us better understand how our bodies work, identify the underlying causes of diseases, and identify new therapies to treat and cure diseases. The purpose of this community is to provide examples of biological models that can be used to teach learners of all ages -- from kindergarten through college, and beyond -- how to model biology with computer simulations. This community is managed by the IMAG-MSM's Public Dissemination & Education Working Group. Biomechanics of Movement Experimental data, musculoskeletal models, and simulation results that appear in Uchida TK and Delp SL (2020) Biomechanics of Movement: The Science of Sports, Robotics, and Rehabilitation . These resources can be used by students to further explore the concepts presented in the book, by instructors to enhance their teaching materials, and by researchers who want to get moving. SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/communities.php",
      "title": "SimTK",
      "section": "",
      "hierarchy": [
        "communities.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "01fc425f-39b2-4e59-af21-63d5724d9eef",
    "document_id": "doc_16",
    "content": "Statistical Analysis Statistics help make sense of the vast amount of data generated by today’s biological experiments, computational simulations, and clinical and diagnostic information. Featured projects Recently updated projects total projects 35 projects with downloads Search projects in this category News The Reference Model for COVID-19 - The First Multi-Scale Ensemble Disease Model The Reference Model for Disease Progression Jun 6, 2021 Dog model A three-dimensional musculoskeletal model of the dog May 31, 2021 The Reference Model now models COVID-19 The Reference Model for Disease Progression Jul 31, 2020 Publications The Neuromusculoskeletal Modeling Pipeline: MATLAB-based Model Personalization and Treatment Optimization Functionality for OpenSim Denton AN & Umberger BR. (2023). Computational performance of musculoskeletal simulation in OpenSim Moco using parallel computing. International Journal for Numerical Methods in Biomedical Engineering, e3777. Three Dimensional Lower Extremity Musculoskeletal Geometry of the Visible Human Female and Male Discussion Re: MTP Error: parseMuscleAnalysisCoordinates Mismatch Error Neuromusculoskeletal Modeling Pipeline Mar 24, 2025 Re: MTP Error: Undefined (Inf) Values at Initial Point Neuromusculoskeletal Modeling Pipeline Mar 13, 2025 Re: rotation and validation ACL Reconstruction Decision Support Through Personalized Simulation of the Lachm Dec 16, 2024 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=416&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b8b40d4c-a6a3-4557-a2eb-129a33669233",
    "document_id": "doc_59",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Mailing List Choose a list to browse, search, and post messages. Mailing List Address Description Subscription opensim-announcement Archives opensim-announcement@lists.simtk.org Announcements of OpenSim releases and updates Subscribe/Unsubscribe/Preferences opensim-testers Archives opensim-testers@lists.simtk.org Mailing list for early adopters/testers of OpenSim releases Subscribe/Unsubscribe/Preferences SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/mail/index.php?group_id=91",
      "title": "SimTK: OpenSim: Mailing Lists",
      "section": "",
      "hierarchy": [
        "mail",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "01fc49e6-7931-4f10-8b2c-9656812ae31a",
    "document_id": "doc_42",
    "content": "Name Role Ajay Seth Admin Ayman Habib Admin Carmichael Ong Admin Diane Bush Admin Jacqueline Tran Admin Jennifer Hicks Admin Joy Ku Admin Matt Petrucci Admin Nicholas Bianco Admin Scott Delp Admin Thomas Uchida Admin Apoorva Rajagopal Developer Matt DeMers Developer Michael Sherman Developer Shrinidhi KL Developer Ahmet Erdemir Read-Only Member Alejandro Hernandez Arieta Read-Only Member Alex Zhou Read-Only Member Allison Arnold Read-Only Member Allison Kinney Read-Only Member Amanda Strube Read-Only Member Amy Silder Read-Only Member Anders Sandholm Read-Only Member Andres Valenzuela Read-Only Member Anne Silverman Read-Only Member Arne Nordmann Read-Only Member Ashley Clark Read-Only Member Azim Jinha Read-Only Member B. Bongardt Read-Only Member B.J. Fregly Read-Only Member Bahar Sharafi Read-Only Member Brad Humphreys Read-Only Member Brian Garner Read-Only Member Bryan Smith Read-Only Member Carrie Peterson Read-Only Member Cassidy Kelly Read-Only Member Chris Zirker Read-Only Member Christine McLeavey Read-Only Member Christopher Dembia Read-Only Member Christopher Ploch Read-Only Member Cindy Au Read-Only Member Csaba Szepesvari Read-Only Member Cyril J. Donnelly Read-Only Member Daniel Lopes Read-Only Member Daniele Giunchi Read-Only Member Darryl Thelen Read-Only Member Denny Delp Read-Only Member Dominic Farris Read-Only Member Edith Arnold Read-Only Member Emel Demircan Read-Only Member Eran Guendelman Read-Only Member Eric Lew Read-Only Member Feng Yang Read-Only Member Frank Clay Anderson Read-Only Member Friedl De Groote Read-Only Member Glen Lichtwark Read-Only Member Hoa Hoang Read-Only Member Ian Stavness Read-Only Member Ilan Eskinazi Read-Only Member Ilse Jonkers Read-Only Member Jack Wang Read-Only Member Jacobo Bibliowicz Read-Only Member Jared Duke Read-Only Member Jason Moore Read-Only Member Jeanette Schmidt Read-Only Member Jeff Reinbolt Read-Only Member Jennifer Nichols Read-Only Member Jennifer Yong Read-Only Member Jesse Garnier Read-Only Member Jill Higginson Read-Only Member Jingjing Liu Read-Only Member John Ramsay Read-Only Member John Rogers Read-Only Member Jonathan Walter Read-Only Member Josef Kohout Read-Only Member Joshua Webb Read-Only Member Juan Leon Read-Only Member Julie Kolesar Read-Only Member JunJay Tan Read-Only Member Katherine Saul Read-Only Member Kathleen Reilly Read-Only Member Katrina Easton Read-Only Member Kevin Xu Read-Only Member Ko Sasaki Read-Only Member Koen Peeters Read-Only Member Kofi Appiah Read-Only Member Lei Ren Read-Only Member Lisa MacFadden Read-Only Member Luca Modenese Read-Only Member Marjolein van der Krogt Read-Only Member Mark Finch Read-Only Member Massimo Sartori Read-Only Member Matthew Millard Read-Only Member Melanie Fox Read-Only Member Ming Xiao Read-Only Member Misagh Mansouri Read-Only Member Mishel Johns Read-Only Member Mohammad Shabani Read-Only Member Monica Reggiani Read-Only Member Nabeel Allana Read-Only Member Nathan Netravali Read-Only Member Nicolas Pronost Read-Only Member Nils Hakansson Read-Only Member Omar Zarifi Read-Only Member Patrick Weiss Read-Only Member Peter Eastman Read-Only Member Peter Loan Read-Only Member Rebecca Taylor Read-Only Member Ricardo Matias Read-Only Member Rick Neptune Read-Only Member Robert Siston Read-Only Member Romain Leberre Read-Only Member Ross Miller Read-Only Member Saket Patkar Read-Only Member Sam Hamner Read-Only Member Samir Menon Read-Only Member Saryn Goldberg Read-Only Member Sean Scanlan Read-Only Member Sergey Levine Read-Only Member Shawn Russell Read-Only Member Silvia Blemker Read-Only Member Stefano Corazza Read-Only Member Tim Dorn Read-Only Member Tod Hing Read-Only Member Tom Erez Read-Only Member Tom Lintern Read-Only Member Vaughn Friesen Read-Only",
    "metadata": {
      "source": "https://simtk.org/project/memberlist.php?group_id=91",
      "title": "SimTK: OpenSim: Project Member List",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Team: Members Sort by:",
      "hierarchy": [
        "project",
        "memberlist.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "58da4d99-f997-4d0e-a386-5323398db20b",
    "document_id": "doc_42",
    "content": "Member Nils Hakansson Read-Only Member Omar Zarifi Read-Only Member Patrick Weiss Read-Only Member Peter Eastman Read-Only Member Peter Loan Read-Only Member Rebecca Taylor Read-Only Member Ricardo Matias Read-Only Member Rick Neptune Read-Only Member Robert Siston Read-Only Member Romain Leberre Read-Only Member Ross Miller Read-Only Member Saket Patkar Read-Only Member Sam Hamner Read-Only Member Samir Menon Read-Only Member Saryn Goldberg Read-Only Member Sean Scanlan Read-Only Member Sergey Levine Read-Only Member Shawn Russell Read-Only Member Silvia Blemker Read-Only Member Stefano Corazza Read-Only Member Tim Dorn Read-Only Member Tod Hing Read-Only Member Tom Erez Read-Only Member Tom Lintern Read-Only Member Vaughn Friesen Read-Only Member Victor Zordan Read-Only Member Weiguang Si Read-Only Member Will Johnson Read-Only Member William Voorhees Read-Only Member Xuemei Huang Read-Only Member Zach Lerner Read-Only Member andrew somerville Read-Only Member darren earl Read-Only Member david lu Read-Only Member henry sun Read-Only Member jason christensen Read-Only Member jimmy d Read-Only Member karen jansen Read-Only Member sahar aghayan Read-Only Member stefano perticoni Read-Only Member Chand John Read-Write Member Daniel Jacobs Read-Write Member Katherine Steele Read-Write Member Lorenzo Flores Read-Write Member Paul Mitiguy Read-Write Member Simtk Builder Read-Write Member Soha Pouya Read-Write Member 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/project/memberlist.php?group_id=91",
      "title": "SimTK: OpenSim: Project Member List",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Team: Members Sort by:",
      "hierarchy": [
        "project",
        "memberlist.php"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "69c5c36e-f4e7-4bcd-8981-c2f68217f198",
    "document_id": "doc_31",
    "content": "Create a SimTK account Account setup Required fields outlined in blue. Do not use a Hotmail account. You will not receive the activation email. Afghanistan Åland Islands Albania Algeria American Samoa Andorra Angola Anguilla Antarctica Antigua and Barbuda Argentina Armenia Aruba Australia Austria Azerbaijan Bahamas Bahrain Bangladesh Barbados Belarus Belgium Belize Benin Bermuda Bhutan Bolivia Bonaire, Sint Eustatius and Saba Bosnia and Herzegovina Botswana Bouvet Island Brazil British Indian Ocean Territory Brunei Darussalam Bulgaria Burkina Faso Burundi Cambodia Cameroon Canada Cape Verde Cayman Islands Central African Republic Chad Chile China Christmas Island Cocos (Keeling) Islands Colombia Comoros Congo Congo, The Democratic Republic of the Cook Islands Costa Rica Côte d'Ivoire Croatia Cuba Curaçao Cyprus Czech Republic Denmark Djibouti Dominica Dominican Republic Ecuador Egypt El Salvador Equatorial Guinea Eritrea Estonia Ethiopia Falkland Islands (Malvinas) Faroe Islands Fiji Finland France French Guiana French Polynesia French Southern Territories Gabon Gambia Georgia Germany Ghana Gibraltar Greece Greenland Grenada Guadeloupe Guam Guatemala Guernsey Guinea Guinea-Bissau Guyana Haiti Heard Island and McDonald Islands Holy See (Vatican City State) Honduras Hong Kong Hungary Iceland India Indonesia Iran, Islamic Republic of Iraq Ireland Isle of Man Israel Italy Jamaica Japan Jersey Jordan Kazakhstan Kenya Kiribati Korea, Democratic People's Republic of Korea, Republic of Kuwait Kyrgyzstan Lao People's Democratic Republic Latvia Lebanon Lesotho Liberia Libya Liechtenstein Lithuania Luxembourg Macao Macedonia, Republic of Madagascar Malawi Malaysia Maldives Mali Malta Marshall Islands Martinique Mauritania Mauritius Mayotte Mexico Micronesia, Federated States of Moldova Monaco Mongolia Montenegro Montserrat Morocco Mozambique Myanmar Namibia Nauru Nepal Netherlands New Caledonia New Zealand Nicaragua Niger Nigeria Niue Norfolk Island Northern Mariana Islands Norway Oman Pakistan Palau Palestine, State of Panama Papua New Guinea Paraguay Peru Philippines Pitcairn Poland Portugal Puerto Rico Qatar Réunion Romania Russian Federation Rwanda Saint Barthélemy Saint Helena, Ascension and Tristan da Cunha Saint Kitts and Nevis Saint Lucia Saint Martin (French part) Saint Pierre and Miquelon Saint Vincent and the Grenadines Samoa San Marino Sao Tome and Principe Saudi Arabia Senegal Serbia Seychelles Sierra Leone Singapore Sint Maarten (Dutch part) Slovakia Slovenia Solomon Islands Somalia South Africa South Georgia and the South Sandwich Islands South Sudan Spain Sri Lanka Sudan Suriname Svalbard and Jan Mayen Swaziland Sweden Switzerland Syrian Arab Republic Taiwan Tajikistan Tanzania, United Republic of Thailand Timor-Leste Togo Tokelau Tonga Trinidad and Tobago Tunisia Turkey Turkmenistan Turks and Caicos Islands Tuvalu Uganda Ukraine United Arab Emirates United Kingdom United States United States Minor Outlying Islands Uruguay Uzbekistan Vanuatu Venezuela Viet Nam Virgin Islands, British Virgin Islands, U.S. Wallis and Futuna Western Sahara Yemen Zambia Zimbabwe Your profile Your profile picture To add your photo, drag and drop a file into this box or select a file from your computer. Restrictions: JPG, PNG, GIF less than 2 MB in file size. Image must be perfect square or else image will be cropped. Browse... Connect to other profiles ? Share your story to build connections and jump start collaborations with others. I would like to receive news about the SimTK website. Help us",
    "metadata": {
      "source": "https://simtk.org/account/register.php",
      "title": "SimTK:",
      "section": "",
      "hierarchy": [
        "account",
        "register.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "21e6989b-2c3f-42f5-a601-5b02904b9d97",
    "document_id": "doc_31",
    "content": "States Minor Outlying Islands Uruguay Uzbekistan Vanuatu Venezuela Viet Nam Virgin Islands, British Virgin Islands, U.S. Wallis and Futuna Western Sahara Yemen Zambia Zimbabwe Your profile Your profile picture To add your photo, drag and drop a file into this box or select a file from your computer. Restrictions: JPG, PNG, GIF less than 2 MB in file size. Image must be perfect square or else image will be cropped. Browse... Connect to other profiles ? Share your story to build connections and jump start collaborations with others. I would like to receive news about the SimTK website. Help us reach more great people How did you learn about SimTK? This information is only used to assess our dissemination efforts. Publication (e.g., journal article) Mailing list or newsletter Conference Class Biomedical Computation Review Word of Mouth Other Verify you're not a robot Enter the result of the mathematical problem above: Try another A SimTK account allows you to create projects, join existing projects, and connect with other SimTK members. To learn more about our privacy policies, read Our Pledge and Your Responsibility . SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/account/register.php",
      "title": "SimTK:",
      "section": "",
      "hierarchy": [
        "account",
        "register.php"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "976aa861-0f67-4c5a-949f-4544123e4037",
    "document_id": "doc_189",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Protected Member Functions | Friends OpenSim::Body Class Reference An OpenSim::Body is a PhysicalFrame (reference frame) with associated inertia specified by its mass, center-of-mass located in the PhysicalFrame , and its moment of inertia tensor about the center-of-mass. More... Inheritance diagram for OpenSim::Body: OpenSim Properties, Sockets, Outputs, Inputs Properties (single-value) double mass \"The mass of the body (kg)\" More... SimTK::Vec3 mass_center \"The location (Vec3) of the mass center in the body frame.\" More... SimTK::Vec6 inertia \"The elements of the inertia tensor (Vec6) as [Ixx Iyy Izz Ixy Ixz Iyz] \" \"measured about the mass_center and not the body origin.\" More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::PhysicalFrame WrapObjectSet WrapObjectSet \"Set of wrap objects fixed to this body that GeometryPaths can wrap over.\" \"This property used to be a member of Body but was moved up with \" \"the introduction of Frames.\" More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Frame FrameGeometry frame_geometry \"The geometry used to display the axes of this Frame.\" More... Geometry attached_geometry \"List of geometry attached to this Frame. Note, the geometry \" \"are treated as fixed to the frame and they share the transform \" \"of the frame when visualized\" More... SimTK::Vec3 position Provides the value of getPositionInGround() and is available at stage SimTK::Stage::Position . More... SimTK::Rotation rotation Provides the value of getRotationInGround() and is available at stage SimTK::Stage::Position . More... SimTK::Transform transform Provides the value of getTransformInGround() and is available at stage SimTK::Stage::Position . More... SimTK::SpatialVec velocity Provides the value of getVelocityInGround() and is available at stage SimTK::Stage::Velocity . More... SimTK::Vec3 angular_velocity Provides the value of getAngularVelocityInGround() and is available at stage SimTK::Stage::Velocity . More... SimTK::Vec3 linear_velocity Provides the value of getLinearVelocityInGround() and is available at stage SimTK::Stage::Velocity . More... SimTK::SpatialVec acceleration Provides the value of getAccelerationInGround() and is available at stage SimTK::Stage::Acceleration . More... SimTK::Vec3 angular_acceleration Provides the value of getAngularAccelerationInGround() and is available at stage SimTK::Stage::Acceleration . More... SimTK::Vec3 linear_acceleration Provides the value of getLinearAccelerationInGround() and is available at stage SimTK::Stage::Acceleration . More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Component Component components \"List of components that this component owns and serializes.\" More... Public Member Functions Body () default constructor More... Body (const std::string &aName, double aMass, const SimTK::Vec3 &aMassCenter, const SimTK::Inertia &aInertia) Convenience constructor. More... const double & getMass () const Access Properties of the Body . More... void setMass (const double & mass ) const SimTK::Vec3 & getMassCenter () const The body center of mass location (Vec3) in the Body frame. More... void setMassCenter (const SimTK::Vec3 &com) const SimTK::Inertia & getInertia () const The body's inertia about the center of mass location. More... void setInertia (const SimTK::Inertia &aInertia) SimTK::MassProperties getMassProperties () const Assemble body inertial properties: mass, center of mass location, moment of inertia about the origin of the body and return as SimTK::MassProperties. More... void scale (const SimTK::Vec3 &scaleFactors, bool scaleMass =false) Scale the Body 's center of mass location and its inertial",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "dfd15cc6-e2a5-4379-a613-e07a74c1ca18",
    "document_id": "doc_189",
    "content": "Body . More... void setMass (const double & mass ) const SimTK::Vec3 & getMassCenter () const The body center of mass location (Vec3) in the Body frame. More... void setMassCenter (const SimTK::Vec3 &com) const SimTK::Inertia & getInertia () const The body's inertia about the center of mass location. More... void setInertia (const SimTK::Inertia &aInertia) SimTK::MassProperties getMassProperties () const Assemble body inertial properties: mass, center of mass location, moment of inertia about the origin of the body and return as SimTK::MassProperties. More... void scale (const SimTK::Vec3 &scaleFactors, bool scaleMass =false) Scale the Body 's center of mass location and its inertial properties. More... void extendScale (const SimTK::State &s, const ScaleSet &scaleSet) override Scale the Body 's center of mass location only. More... void scaleInertialProperties (const ScaleSet &scaleSet, bool scaleMass =true) Scale the Body 's mass and inertia tensor. More... void scaleInertialProperties (const SimTK::Vec3 &scaleFactors, bool scaleMass =true) void scaleMass (double aScaleFactor) Property-related functions const double & get_mass () const Get the value of the mass property. More... double & upd_mass () Get a writable reference to the mass property. More... void set_mass (const double &value) Set the value of the mass property. More... const SimTK::Vec3 & get_mass_center () const Get the value of the mass_center property. More... SimTK::Vec3 & upd_mass_center () Get a writable reference to the mass_center property. More... void set_mass_center (const SimTK::Vec3 &value) Set the value of the mass_center property. More... const SimTK::Vec6 & get_inertia () const Get the value of the inertia property. More... SimTK::Vec6 & upd_inertia () Get a writable reference to the inertia property. More... void set_inertia (const SimTK::Vec6 &value) Set the value of the inertia property. More... Public Member Functions inherited from OpenSim::PhysicalFrame PhysicalFrame () virtual ~PhysicalFrame () const WrapObjectSet & get_WrapObjectSet () const Get the value of the WrapObjectSet property. More... WrapObjectSet & upd_WrapObjectSet () Get a writable reference to the WrapObjectSet property. More... void set_WrapObjectSet (const WrapObjectSet &value) Set the value of the WrapObjectSet property. More... const SimTK::MobilizedBodyIndex & getMobilizedBodyIndex () const This method returns the MobilizedBodyIndex of the MobilizedBody for this PhysicalFrame . More... const SimTK::MobilizedBody & getMobilizedBody () const Access a readable SimTK::MobilizedBody that backs this PhysicalFrame . More... SimTK::MobilizedBody & updMobilizedBody () Access a writable SimTK::MobilizedBody that backs this PhysicalFrame . More... const WrapObject * getWrapObject (const std::string &aName) const Deprecated methods for intermediate integration of Frames. More... const WrapObjectSet & getWrapObjectSet () const void addWrapObject ( WrapObject *wrapObject) Add a wrap object to the Body . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::Frame Frame () virtual ~Frame () void attachGeometry ( OpenSim::Geometry *geom) Attach Geometry to this Frame and have this Frame take ownership of it by adding it to this Frame 's <attached_geometry> property list. More... void scaleAttachedGeometry (const SimTK::Vec3 &scaleFactors) const FrameGeometry & get_frame_geometry () const Get the value of the frame_geometry property. More... FrameGeometry & upd_frame_geometry () Get a writable reference to the frame_geometry property. More... void set_frame_geometry (const FrameGeometry &value)",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1fdc6a81-d43a-490e-8344-369bbbb7756a",
    "document_id": "doc_189",
    "content": "a wrap object to the Body . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::Frame Frame () virtual ~Frame () void attachGeometry ( OpenSim::Geometry *geom) Attach Geometry to this Frame and have this Frame take ownership of it by adding it to this Frame 's <attached_geometry> property list. More... void scaleAttachedGeometry (const SimTK::Vec3 &scaleFactors) const FrameGeometry & get_frame_geometry () const Get the value of the frame_geometry property. More... FrameGeometry & upd_frame_geometry () Get a writable reference to the frame_geometry property. More... void set_frame_geometry (const FrameGeometry &value) Set the value of the frame_geometry property. More... const Geometry & get_attached_geometry (int i) const Get the value of the i-th element of the attached_geometry property. More... Geometry & upd_attached_geometry (int i) Get a writable reference to the i-th element of the attached_geometry property. More... void set_attached_geometry (int i, const Geometry &value) Set the value of the i-th element of attached_geometry property. More... int append_attached_geometry (const Geometry &value) Append an element to the attached_geometry property. More... const SimTK::Transform & getTransformInGround (const SimTK::State &state) const Get the transform of this frame (F) relative to the ground frame (G). More... const SimTK::SpatialVec & getVelocityInGround (const SimTK::State &state) const The spatial velocity V_GF {omega; v} of this Frame , measured with respect to and expressed in the ground frame. More... const SimTK::Vec3 & getAngularVelocityInGround (const SimTK::State &state) const The angular velocity of this Frame , measured with respect to and expressed in the ground frame (i.e., the first half of the SpatialVec returned by getVelocityInGround() ). More... const SimTK::Vec3 & getLinearVelocityInGround (const SimTK::State &state) const The linear velocity of this Frame , measured with respect to and expressed in the ground frame (i.e., the second half of the SpatialVec returned by getVelocityInGround() ). More... const SimTK::SpatialVec & getAccelerationInGround (const SimTK::State &state) const The spatial acceleration A_GF {alpha; a} of this Frame , measured with respect to and expressed in the ground frame. More... const SimTK::Vec3 & getAngularAccelerationInGround (const SimTK::State &state) const The angular acceleration of this Frame , measured with respect to and expressed in the ground frame (i.e., the first half of the SpatialVec returned by getAccelerationInGround() ). More... const SimTK::Vec3 & getLinearAccelerationInGround (const SimTK::State &state) const The linear acceleration of this Frame , measured with respect to and expressed in the ground frame (i.e., the second half of the SpatialVec returned by getAccelerationInGround() ). More... SimTK::Transform findTransformBetween (const SimTK::State &state, const Frame &otherFrame) const Find the transform that describes this frame (F) relative to another frame (A). More... SimTK::Vec3 expressVectorInAnotherFrame (const SimTK::State &state, const SimTK::Vec3 &vec_F, const Frame &otherFrame) const Take a vector expressed in this frame (F) and re-express the same vector in another frame (A). More... SimTK::Vec3 expressVectorInGround (const SimTK::State &state, const SimTK::Vec3 &vec_F) const Take a vector in this frame (F) and re-express the same vector in Ground (G). More... SimTK::Vec3 findStationLocationInAnotherFrame (const SimTK::State &state, const SimTK::Vec3 &station_F, const Frame &otherFrame) const Take a station located and expressed",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e157e921-2faf-4c4b-b848-a20db6458aee",
    "document_id": "doc_189",
    "content": "by getAccelerationInGround() ). More... SimTK::Transform findTransformBetween (const SimTK::State &state, const Frame &otherFrame) const Find the transform that describes this frame (F) relative to another frame (A). More... SimTK::Vec3 expressVectorInAnotherFrame (const SimTK::State &state, const SimTK::Vec3 &vec_F, const Frame &otherFrame) const Take a vector expressed in this frame (F) and re-express the same vector in another frame (A). More... SimTK::Vec3 expressVectorInGround (const SimTK::State &state, const SimTK::Vec3 &vec_F) const Take a vector in this frame (F) and re-express the same vector in Ground (G). More... SimTK::Vec3 findStationLocationInAnotherFrame (const SimTK::State &state, const SimTK::Vec3 &station_F, const Frame &otherFrame) const Take a station located and expressed in this frame (F) and determine its location relative to and expressed in another frame (A). More... SimTK::Vec3 findStationLocationInGround (const SimTK::State &state, const SimTK::Vec3 &station_F) const Take a station located and expressed in this frame (F) and determine its location relative to and expressed in Ground (G). More... SimTK::Vec3 findStationVelocityInGround (const SimTK::State &state, const SimTK::Vec3 &station_F) const Take a station located and expressed in this frame (F) and determine its velocity relative to and expressed in Ground (G). More... SimTK::Vec3 findStationAccelerationInGround (const SimTK::State &state, const SimTK::Vec3 &station_F) const Take a station located and expressed in this frame (F) and determine its acceleration relative to and expressed in Ground (G). More... const Frame & findBaseFrame () const Find this Frame 's base Frame . More... SimTK::Transform findTransformInBaseFrame () const Find the equivalent Transform of this Frame (F) in its base (B) Frame . More... SimTK::Vec3 getPositionInGround (const SimTK::State &state) const Accessor for position of the origin of the Frame in Ground . More... SimTK::Rotation_< double > getRotationInGround (const SimTK::State &state) const Accessor for Rotation matrix of the Frame in Ground . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::ModelComponent ModelComponent () Default constructor. More... ModelComponent (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct ModelComponent from an XML file. More... ModelComponent (SimTK::Xml::Element &aNode) Construct ModelComponent from a specific node in an XML document. More... virtual ~ModelComponent () Destructor is virtual to allow concrete model component cleanup. More... void connectToModel ( Model &model) Connect this ModelComponent to its aggregate- a Model . More... const Model & getModel () const Get a const reference to the Model this component is part of. More... Model & updModel () Get a modifiable reference to the Model this component is part of. More... bool hasModel () const Does this ModelComponent have a Model associated with it? More... void preScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... void scale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... void postScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::Component Component",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c4848f3d-b5d5-4d00-ba5c-59ac5b4b5c60",
    "document_id": "doc_189",
    "content": "() const Does this ModelComponent have a Model associated with it? More... void preScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... void scale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... void postScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::Component Component () Default constructor. More... Component (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct Component from an XML file. More... Component (SimTK::Xml::Element &aNode) Construct Component from a specific node in an XML document. More... Component (const Component &)=default Use default copy constructor and assignment operator. More... Component & operator= (const Component &)=default virtual ~Component ()=default Destructor is virtual to allow concrete Component to cleanup. More... virtual void generateDecorations (bool fixed, const ModelDisplayHints &hints, const SimTK::State &state, SimTK::Array_< SimTK::DecorativeGeometry > &appendToThis) const Optional method for generating arbitrary display geometry that reflects this Component at the specified state . More... const SimTK::MultibodySystem & getSystem () const Get the underlying MultibodySystem that this component is connected to. More... bool hasSystem () const Check if this component has an underlying MultibodySystem. More... bool isComponentInOwnershipTree (const Component *component) const Does the provided component already exist anywhere in the ownership tree (not just subcomponents of this component)? More... void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const Uses getComponentList<T>() to count the number of underlying subcomponents of the specified type. More... std::string getAbsolutePathString () const Get the complete (absolute) pathname for this Component to its ancestral Component , which is the root of the tree to which this Component belongs. More... ComponentPath getAbsolutePath () const Return a ComponentPath of the absolute path of this Component . More... std::string getRelativePathString (const Component &wrt) const Get the relative path of this Component with respect to another Component , as a string. More... ComponentPath getRelativePath (const Component &wrt) const Get the relative path of this Component with respect to another Component . More... bool hasComponent (const std::string &pathname) const Query if there is a component (of any type) at the specified path name. More... template<class C = Component> bool hasComponent (const std::string &pathname) const Query if there is a component of a given type at the specified path name. More... template<class C = Component> const C & getComponent (const std::string &pathname) const Get a unique subcomponent of this Component by its path name and type 'C'. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b77e2968-306b-4945-bc20-4724045f94f4",
    "document_id": "doc_189",
    "content": "Component , as a string. More... ComponentPath getRelativePath (const Component &wrt) const Get the relative path of this Component with respect to another Component . More... bool hasComponent (const std::string &pathname) const Query if there is a component (of any type) at the specified path name. More... template<class C = Component> bool hasComponent (const std::string &pathname) const Query if there is a component of a given type at the specified path name. More... template<class C = Component> const C & getComponent (const std::string &pathname) const Get a unique subcomponent of this Component by its path name and type 'C'. More... template<class C = Component> const C & getComponent (const ComponentPath &pathname) const const Component & getComponent (const std::string &pathname) const Similar to the templatized getComponent() , except this returns the component as the generic Component type. More... template<class C = Component> C & updComponent (const std::string &name) Get a writable reference to a subcomponent. More... template<class C = Component> C & updComponent (const ComponentPath &name) Component & updComponent (const std::string &pathname) Similar to the templatized updComponent() , except this returns the component as the generic Component type. More... unsigned printComponentsMatching (const std::string &substring) const Print a list to the console of all components whose absolute path name contains the given string. More... int getNumStateVariables () const Get the number of \"continuous\" state variables maintained by the Component and its subcomponents. More... Array < std::string > getStateVariableNames () const Get the names of \"continuous\" state variables maintained by the Component and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name) as input. More... const StateVariable * traverseToStateVariable (const std::string &pathName) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... const StateVariable * traverseToStateVariable (const ComponentPath &path) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... void finalizeFromProperties () Define a Component 's internal data members and structure according to its properties. More... void finalizeConnections ( Component &root) Satisfy the Component 's connections specified by its Sockets and Inputs. More... void clearConnections () Disconnect/clear this Component from its aggregate component. More... void addToSystem (SimTK::MultibodySystem &system) const Have the Component add itself to the underlying computational System. More... void initStateFromProperties (SimTK::State &state) const Initialize Component 's state variable values from its properties. More... void setPropertiesFromState (const SimTK::State &state) Set Component 's properties given a state. More... int getNumSockets () const Get the number of Sockets in this Component . More... std::vector< std::string > getSocketNames () const Collect and return the names of the sockets in this component. More... template<typename T > const T & getConnectee (const std::string &name) const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c2ed5aea-4f5c-429b-a1c6-5ae74f089199",
    "document_id": "doc_189",
    "content": "Inputs. More... void clearConnections () Disconnect/clear this Component from its aggregate component. More... void addToSystem (SimTK::MultibodySystem &system) const Have the Component add itself to the underlying computational System. More... void initStateFromProperties (SimTK::State &state) const Initialize Component 's state variable values from its properties. More... void setPropertiesFromState (const SimTK::State &state) Set Component 's properties given a state. More... int getNumSockets () const Get the number of Sockets in this Component . More... std::vector< std::string > getSocketNames () const Collect and return the names of the sockets in this component. More... template<typename T > const T & getConnectee (const std::string &name) const Get the \"connectee\" object that the Component 's Socket is bound to. More... const Object & getConnectee (const std::string &name) const Get the connectee as an Object . More... const AbstractSocket & getSocket (const std::string &name) const Get an AbstractSocket for the given socket name. More... AbstractSocket & updSocket (const std::string &name) Get a writable reference to the AbstractSocket for the given socket name. More... template<typename T > const Socket < T > & getSocket (const std::string &name) const Get a const reference to the concrete Socket provided by this Component by name. More... template<typename T > Socket < T > & updSocket (const std::string &name) Get a writable reference to the concrete Socket provided by this Component by name. More... void printSubcomponentInfo () const List all subcomponents by name and recurse into these components to list their subcomponents, and so on. More... void printSocketInfo () const List all the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs () const Access the number of Outputs that this component has. More... std::vector< std::string > getInputNames () const Collect and return the names of Inputs in this component as an std::vector. More... std::vector< std::string > getOutputNames () const Collect and return the names of Outputs in this component as an std::vector. More... const AbstractInput & getInput (const std::string &name) const Get an Input provided by this Component by name. More... AbstractInput & updInput (const std::string &name) Get a writable reference to an Input provided by this Component by name. More... template<typename T > const Input < T > & getInput (const std::string &name) const Get a concrete Input that you can directly ask for its values. More... const AbstractOutput & getOutput (const std::string &name) const Get the Output provided by this Component by name. More... AbstractOutput & updOutput (const std::string &name) Get a writable reference to an Output provided by this Component by name. More... SimTK::IteratorRange< OutputConstIterator > getOutputs () const Iterate through all Outputs of this component. More... void assign ( Object &aObject) override This allows copy",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "af861daa-c995-4ccc-aee7-ffb6ff66836a",
    "document_id": "doc_189",
    "content": "writable reference to an Input provided by this Component by name. More... template<typename T > const Input < T > & getInput (const std::string &name) const Get a concrete Input that you can directly ask for its values. More... const AbstractOutput & getOutput (const std::string &name) const Get the Output provided by this Component by name. More... AbstractOutput & updOutput (const std::string &name) Get a writable reference to an Output provided by this Component by name. More... SimTK::IteratorRange< OutputConstIterator > getOutputs () const Iterate through all Outputs of this component. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... int getModelingOption (const SimTK::State &state, const std::string &name) const Get a ModelingOption flag for this Component by name. More... void setModelingOption (SimTK::State &state, const std::string &name, int flag) const Set the value of a ModelingOption flag for this Component . More... template<typename T > const T & getInputValue (const SimTK::State &state, const std::string &name) const Get the Input value that this component is dependent on. More... template<typename T > const T & getOutputValue (const SimTK::State &state, const std::string &name) const Get the Output value provided by this Component by name. More... double getStateVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable allocated by this Component . More... double getStateVariableValue (const SimTK::State &state, const ComponentPath &path) const Get the value of a state variable allocated by this Component . More... void setStateVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed by this Component . More... double getDiscreteVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a discrete variable allocated by this Component by name. More... void setDiscreteVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a discrete variable allocated by this Component by name. More... template<class T > SimTK::CacheEntryIndex getCacheVariableIndex (const CacheVariable < T > &cv) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... SimTK::CacheEntryIndex getCacheVariableIndex (const std::string &name) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a cache variable allocated by this Component by name. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Get the value of a cache variable allocated by this Component . More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const std::string &k, T value) const Set the value of a",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0e8a81b0-c987-4811-9fea-331c470b8d27",
    "document_id": "doc_189",
    "content": "allocations. More... SimTK::CacheEntryIndex getCacheVariableIndex (const std::string &name) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a cache variable allocated by this Component by name. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Get the value of a cache variable allocated by this Component . More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const std::string &k, T value) const Set the value of a cache variable, identified by name , to a new value and mark the cache variable as valid. More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv, T value) const Set the value of a cache variable to a new value and mark the cache variable as valid. More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const std::string &name) const Returns a mutable reference to the value of a cache variable identified by name . More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Returns a mutable reference to the value of a cache variable. More... bool isCacheVariableValid (const SimTK::State &state, const std::string &name) const Returns true if the cache variable, identified by name , is valid. More... template<class T > bool isCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Returns true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as invalid. More... template<class T > void markCacheVariableInvalid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as invalid. More... const Component & getOwner () const Access the owner of this Component . More... bool hasOwner () const (For advanced users) Check if this Component has an owner. More... const Component & getRoot () const Obtain the root Component, which is this component if it is orphaned. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "33b7cb4d-f260-44ee-b177-94dc144a8a31",
    "document_id": "doc_189",
    "content": "More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7d0a4385-f736-4a50-bb63-9777b7a40a44",
    "document_id": "doc_189",
    "content": "std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef Body Self This typedef might be useful within the member functions of this class. More... typedef PhysicalFrame Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::PhysicalFrame typedef PhysicalFrame Self This typedef might be useful within the member functions of this class. More... typedef Frame Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Frame typedef Frame Self This typedef might be useful within the member functions of this class. More... typedef ModelComponent Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::ModelComponent typedef ModelComponent Self This typedef might be useful within the member functions of this class. More... typedef Component Super Use this typedef",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 10,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4aee34ed-70d1-4420-9085-d46e679b079b",
    "document_id": "doc_189",
    "content": "More... Public Types inherited from OpenSim::PhysicalFrame typedef PhysicalFrame Self This typedef might be useful within the member functions of this class. More... typedef Frame Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Frame typedef Frame Self This typedef might be useful within the member functions of this class. More... typedef ModelComponent Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::ModelComponent typedef ModelComponent Self This typedef might be useful within the member functions of this class. More... typedef Component Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Component typedef Component Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... typedef std::map< std::string, SimTK::ClonePtr< AbstractOutput > >::const_iterator OutputConstIterator Define OutputConstIterator for convenience. More... Protected Member Functions void extendFinalizeFromProperties () override Associate a FrameGeometry (visualization) with the this PhysicalFrame . More... void extendConnectToModel ( Model &model) override Connect bound WrapObjects. More... Body * addSlave () Protected Member Functions inherited from OpenSim::PhysicalFrame void setMobilizedBodyIndex (const SimTK::MobilizedBodyIndex &mbix) const Specify the MobilizedBody that implements this PhysicalFrame in the underlying MultibodySystem. More... const Frame & extendFindBaseFrame () const override Extend how PhysicalFrame determines its base Frame . More... SimTK::Transform extendFindTransformInBaseFrame () const override Extend how PhysicalFrame determines its Transform in the base Frame . More... Protected Member Functions inherited from OpenSim::Frame void extendAddToSystem (SimTK::MultibodySystem &system) const override Add appropriate Simbody elements (if needed) to the System corresponding to this component and specify needed state resources. More... Protected Member Functions inherited from OpenSim::ModelComponent const SimTK::Vec3 & getScaleFactors (const ScaleSet &scaleSet, const Frame &frame) const Get the scale factors corresponding to the base OpenSim::Body of the specified Frame . More... virtual void extendPreScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... virtual void extendPostScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... Protected Member Functions inherited from OpenSim::Component SimTK_DEFINE_UNIQUE_INDEX_TYPE ( MemberSubcomponentIndex ) template<class C = Component> MemberSubcomponentIndex constructSubcomponent (const std::string &name) Construct a subcomponent as a data member of this Component . More... template<class C = Component> const C & getMemberSubcomponent ( MemberSubcomponentIndex ix) const template<class C = Component> C & updMemberSubcomponent ( MemberSubcomponentIndex ix) void adoptSubcomponent ( Component *subcomponent) Adopt a component as a subcomponent of this Component . More... size_t getNumImmediateSubcomponents () const Get the number of Subcomponents immediately owned by this Component . More... size_t getNumMemberSubcomponents () const Get the number of Subcomponents that are data members of this Component . More... size_t getNumPropertySubcomponents () const Get the number of Subcomponents that are properties of this Component . More... size_t getNumAdoptedSubcomponents () const Get the number of Subcomponents adopted by this Component . More... std::vector<",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 11,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2c4eaad6-5a69-42b0-acc8-d61a7db77ae8",
    "document_id": "doc_189",
    "content": "C & getMemberSubcomponent ( MemberSubcomponentIndex ix) const template<class C = Component> C & updMemberSubcomponent ( MemberSubcomponentIndex ix) void adoptSubcomponent ( Component *subcomponent) Adopt a component as a subcomponent of this Component . More... size_t getNumImmediateSubcomponents () const Get the number of Subcomponents immediately owned by this Component . More... size_t getNumMemberSubcomponents () const Get the number of Subcomponents that are data members of this Component . More... size_t getNumPropertySubcomponents () const Get the number of Subcomponents that are properties of this Component . More... size_t getNumAdoptedSubcomponents () const Get the number of Subcomponents adopted by this Component . More... std::vector< SimTK::ReferencePtr< const Component > > getImmediateSubcomponents () const Access this Component 's immediate subcomponents (not those owned by subcomponents) More... template<class C > const C * traversePathToComponent ( ComponentPath path) const void setNextSubcomponentInSystem (const Component &sub) const Helper method to enable Component makers to specify the order of their subcomponents to be added to the System during addToSystem() . More... void resetSubcomponentOrder () resetSubcomponentOrder clears this Component 's list of ordered subcomponents (but otherwise leaves subcomponents untouched). More... const Component & get_components (int i) const Get the value of the i-th element of the components property. More... Component & upd_components (int i) Get a writable reference to the i-th element of the components property. More... void set_components (int i, const Component &value) Set the value of the i-th element of components property. More... int append_components (const Component &value) Append an element to the components property. More... virtual void extendAddComponent ( Component *subcomponent) Perform any secondary operations, e.g. More... void initComponentTreeTraversal (const Component &root) const Build the tree of Components from this component through its descendants. More... virtual void extendAddToSystemAfterSubcomponents (SimTK::MultibodySystem &system) const Add appropriate Simbody elements (if needed) to the System after your component's subcomponents have had a chance to add themselves to the system. More... virtual void extendInitStateFromProperties (SimTK::State &state) const Transfer property values or other state-independent initial values into this component's state variables in the passed-in state argument. More... virtual void extendSetPropertiesFromState (const SimTK::State &state) Update this component's property values to match the specified State, if the component has created any state variable that is intended to correspond to a property. More... virtual void computeStateVariableDerivatives (const SimTK::State &s) const If a model component has allocated any continuous state variables using the addStateVariable() method, then computeStateVariableDerivatives() must be implemented to provide time derivatives for those states. More... void setStateVariableDerivativeValue (const SimTK::State &state, const std::string &name, double deriv) const Set the derivative of a state variable by name when computed inside of this Component 's computeStateVariableDerivatives() method. More... virtual void extendRealizeTopology (SimTK::State &state) const Obtain state resources that are needed unconditionally, and perform computations that depend only on the system topology. More... virtual void extendRealizeModel (SimTK::State &state) const Obtain and name state resources (like state variables allocated by an underlying Simbody component) that may be needed, depending on modeling options. More... virtual void extendRealizeInstance (const SimTK::State &state) const Perform computations that depend only on instance variables, like lengths and masses.",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 12,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6f29edee-07ee-4126-8dbb-fc7e2de43d55",
    "document_id": "doc_189",
    "content": "(const SimTK::State &state, const std::string &name, double deriv) const Set the derivative of a state variable by name when computed inside of this Component 's computeStateVariableDerivatives() method. More... virtual void extendRealizeTopology (SimTK::State &state) const Obtain state resources that are needed unconditionally, and perform computations that depend only on the system topology. More... virtual void extendRealizeModel (SimTK::State &state) const Obtain and name state resources (like state variables allocated by an underlying Simbody component) that may be needed, depending on modeling options. More... virtual void extendRealizeInstance (const SimTK::State &state) const Perform computations that depend only on instance variables, like lengths and masses. More... virtual void extendRealizeTime (const SimTK::State &state) const Perform computations that depend only on time and earlier stages. More... virtual void extendRealizePosition (const SimTK::State &state) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). More... virtual void extendRealizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... virtual void extendRealizeDynamics (const SimTK::State &state) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. More... virtual void extendRealizeAcceleration (const SimTK::State &state) const Perform computations that may depend on applied forces. More... virtual void extendRealizeReport (const SimTK::State &state) const Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. More... void addModelingOption (const std::string &optionName, int maxFlagValue) const Add a modeling option (integer flag stored in the State) for use by this Component . More... void addStateVariable (const std::string &stateVariableName, const SimTK::Stage &invalidatesStage=SimTK::Stage::Dynamics, bool isHidden=false) const Add a continuous system state variable belonging to this Component , and assign a name by which to refer to it. More... void addStateVariable ( Component::StateVariable *stateVariable) const The above method provides a convenient interface to this method, which automatically creates an 'AddedStateVariable' and allocates resources in the SimTK::State for this variable. More... void addDiscreteVariable (const std::string &discreteVariableName, SimTK::Stage invalidatesStage) const Add a system discrete variable belonging to this Component , give it a name by which it can be referenced, and declare the lowest Stage that should be invalidated if this variable's value is changed. More... SimTK::MultibodySystem & updSystem () const Get writable reference to the MultibodySystem that this component is connected to. More... int getStateIndex (const std::string &name) const Get the index of a Component 's continuous state variable in the Subsystem for allocations. More... SimTK::SystemYIndex getStateVariableSystemIndex (const std::string &stateVariableName) const Get the System Index of a state variable allocated by this Component . More... const SimTK::DiscreteVariableIndex getDiscreteVariableIndex (const std::string &name) const Get the index of a Component 's discrete variable in the Subsystem for allocations. More... template<typename T > PropertyIndex constructSocket (const std::string &name, const std::string &propertyComment) Construct a specialized Socket for this Component 's dependence on another Component . More... template<typename T , typename",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 13,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7f389c94-744e-4f06-83e8-3e4ee5588d52",
    "document_id": "doc_189",
    "content": "that this component is connected to. More... int getStateIndex (const std::string &name) const Get the index of a Component 's continuous state variable in the Subsystem for allocations. More... SimTK::SystemYIndex getStateVariableSystemIndex (const std::string &stateVariableName) const Get the System Index of a state variable allocated by this Component . More... const SimTK::DiscreteVariableIndex getDiscreteVariableIndex (const std::string &name) const Get the index of a Component 's discrete variable in the Subsystem for allocations. More... template<typename T > PropertyIndex constructSocket (const std::string &name, const std::string &propertyComment) Construct a specialized Socket for this Component 's dependence on another Component . More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output for a member function of the same component. More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, const T &(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) This variant handles component member functions that return the output value by const reference (const T&). More... template<typename T , typename CompType > bool constructListOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &, const std::string &channel) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output that can have multiple channels. More... bool constructOutputForStateVariable (const std::string &name) Construct an Output for a StateVariable . More... template<typename T > PropertyIndex constructInput (const std::string &name, bool isList, const std::string &propertyComment, const SimTK::Stage &requiredAtStage=SimTK::Stage::Instance) Construct an Input (socket) for this Component 's dependence on an Output signal. More... template<class T > CacheVariable < T > addCacheVariable (std::string name, T variablePrototype, SimTK::Stage dependsOnStage) const Add a state cache entry belonging to this Component to hold calculated values that must be automatically invalidated when certain state values change. More... void setOwner (const Component &owner) Set this Component's reference to its owning Component More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 14,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e3eae1f7-eeae-41d6-a174-316b3875cd3d",
    "document_id": "doc_189",
    "content": "single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Friends class Model class Joint Auto-generated functions static Body * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 15,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9e8354c0-c56d-401f-91b7-5f04a80792b1",
    "document_id": "doc_189",
    "content": "file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Friends class Model class Joint Auto-generated functions static Body * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Body\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Body * clone () const override Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::PhysicalFrame static PhysicalFrame * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"PhysicalFrame\". More... Static Public Member Functions inherited from OpenSim::Frame static Frame * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Frame\". More... Static Public Member Functions inherited from OpenSim::ModelComponent static ModelComponent * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"ModelComponent\". More... Static Public Member Functions inherited from OpenSim::Component static Component * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Component\". More... Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 16,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2d4371f5-5afe-441b-a5ee-efd80ef8c8ac",
    "document_id": "doc_189",
    "content": "if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Static Protected Member Functions inherited from OpenSim::Component static void prependComponentPathToConnecteePath ( Component &subcomponent) For internal use. More... Protected Attributes inherited from OpenSim::ModelComponent SimTK::ReferencePtr< Model > _model The model this component belongs to. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Static Protected Attributes inherited from OpenSim::ModelComponent static const SimTK::Vec3 InvalidScaleFactors Returned by getScaleFactors() if the ScaleSet does not contain scale factors",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 17,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3fb8e6dd-8476-467b-8f14-262662bf6dc8",
    "document_id": "doc_189",
    "content": "alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Static Protected Member Functions inherited from OpenSim::Component static void prependComponentPathToConnecteePath ( Component &subcomponent) For internal use. More... Protected Attributes inherited from OpenSim::ModelComponent SimTK::ReferencePtr< Model > _model The model this component belongs to. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Static Protected Attributes inherited from OpenSim::ModelComponent static const SimTK::Vec3 InvalidScaleFactors Returned by getScaleFactors() if the ScaleSet does not contain scale factors for the base Body associated with the specified Frame . More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description An OpenSim::Body is a PhysicalFrame (reference frame) with associated inertia specified by its mass, center-of-mass located in the PhysicalFrame , and its moment of inertia tensor about the center-of-mass. Author Ajay Seth Examples: exampleHangingMuscle.cpp , exampleMarkerTracking.cpp , exampleMocoCustomEffortGoal.cpp , exampleSlidingMass.cpp , exampleSlidingMassAdvanced.cpp , and exampleTracking.cpp . Member Typedef Documentation ◆ Self typedef Body OpenSim::Body::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef PhysicalFrame OpenSim::Body::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ Body() [1/2] OpenSim::Body::Body ( ) default constructor ◆ Body() [2/2] OpenSim::Body::Body ( const std::string & aName , double aMass , const SimTK::Vec3 & aMassCenter , const SimTK::Inertia & aInertia ) Convenience constructor. Member Function Documentation ◆ addSlave() Body * OpenSim::Body::addSlave ( ) protected ◆ assign() void OpenSim::Body::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Body . ◆ clone() Body * OpenSim::Body::clone ( ) const inline override virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 18,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6ce7ab0d-072e-42de-8c87-b5cdfbd3eef1",
    "document_id": "doc_189",
    "content": ") inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Body . ◆ clone() Body * OpenSim::Body::clone ( ) const inline override virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::PhysicalFrame . ◆ extendConnectToModel() void OpenSim::Body::extendConnectToModel ( Model & model ) override protected virtual Connect bound WrapObjects. Reimplemented from OpenSim::PhysicalFrame . ◆ extendFinalizeFromProperties() void OpenSim::Body::extendFinalizeFromProperties ( ) override protected virtual Associate a FrameGeometry (visualization) with the this PhysicalFrame . Reimplemented from OpenSim::PhysicalFrame . ◆ extendScale() void OpenSim::Body::extendScale ( const SimTK::State & s , const ScaleSet & scaleSet ) override virtual Scale the Body 's center of mass location only. Note that scaleInertialProperties() must be called after this method to update the Body 's mass and inertia tensor. Reimplemented from OpenSim::Frame . ◆ get_inertia() const SimTK::Vec6& OpenSim::Body::get_inertia ( ) const inline Get the value of the inertia property. ◆ get_mass() const double& OpenSim::Body::get_mass ( ) const inline Get the value of the mass property. ◆ get_mass_center() const SimTK::Vec3& OpenSim::Body::get_mass_center ( ) const inline Get the value of the mass_center property. ◆ getClassName() static const std::string& OpenSim::Body::getClassName ( ) inline static This returns \"Body\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::Body::getConcreteClassName ( ) const inline override virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::PhysicalFrame . ◆ getInertia() const SimTK::Inertia& OpenSim::Body::getInertia ( ) const The body's inertia about the center of mass location. ◆ getMass() const double& OpenSim::Body::getMass ( ) const inline Access Properties of the Body . The mass of the body in kg ◆ getMassCenter() const SimTK::Vec3& OpenSim::Body::getMassCenter ( ) const inline The body center of mass location (Vec3) in the Body frame. ◆ getMassProperties() SimTK::MassProperties OpenSim::Body::getMassProperties ( ) const Assemble body inertial properties: mass, center of mass location, moment of inertia about the origin of the body and return as SimTK::MassProperties. ◆ safeDownCast() static Body * OpenSim::Body::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Body.safeDownCast(obj) .",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 19,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "71ea95bc-22db-4c50-94ec-b600c130bff1",
    "document_id": "doc_189",
    "content": "◆ getMass() const double& OpenSim::Body::getMass ( ) const inline Access Properties of the Body . The mass of the body in kg ◆ getMassCenter() const SimTK::Vec3& OpenSim::Body::getMassCenter ( ) const inline The body center of mass location (Vec3) in the Body frame. ◆ getMassProperties() SimTK::MassProperties OpenSim::Body::getMassProperties ( ) const Assemble body inertial properties: mass, center of mass location, moment of inertia about the origin of the body and return as SimTK::MassProperties. ◆ safeDownCast() static Body * OpenSim::Body::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Body.safeDownCast(obj) . This is equivalent to dynamic_cast<Body*>(obj) in C++. ◆ scale() void OpenSim::Body::scale ( const SimTK::Vec3 & scaleFactors , bool scaleMass = false ) Scale the Body 's center of mass location and its inertial properties. ◆ scaleInertialProperties() [1/2] void OpenSim::Body::scaleInertialProperties ( const ScaleSet & scaleSet , bool scaleMass = true ) Scale the Body 's mass and inertia tensor. ◆ scaleInertialProperties() [2/2] void OpenSim::Body::scaleInertialProperties ( const SimTK::Vec3 & scaleFactors , bool scaleMass = true ) ◆ scaleMass() void OpenSim::Body::scaleMass ( double aScaleFactor ) ◆ set_inertia() void OpenSim::Body::set_inertia ( const SimTK::Vec6 & value ) inline Set the value of the inertia property. ◆ set_mass() void OpenSim::Body::set_mass ( const double & value ) inline Set the value of the mass property. ◆ set_mass_center() void OpenSim::Body::set_mass_center ( const SimTK::Vec3 & value ) inline Set the value of the mass_center property. ◆ setInertia() void OpenSim::Body::setInertia ( const SimTK::Inertia & aInertia ) ◆ setMass() void OpenSim::Body::setMass ( const double & mass ) inline ◆ setMassCenter() void OpenSim::Body::setMassCenter ( const SimTK::Vec3 & com ) inline ◆ upd_inertia() SimTK::Vec6& OpenSim::Body::upd_inertia ( ) inline Get a writable reference to the inertia property. ◆ upd_mass() double& OpenSim::Body::upd_mass ( ) inline Get a writable reference to the mass property. ◆ upd_mass_center() SimTK::Vec3& OpenSim::Body::upd_mass_center ( ) inline Get a writable reference to the mass_center property. Friends And Related Function Documentation ◆ Joint friend class Joint friend ◆ Model friend class Model friend OpenSim Property, Socket, Output, Input Documentation ◆ inertia SimTK::Vec6 OpenSim::Body::inertia \"The elements of the inertia tensor (Vec6) as [Ixx Iyy Izz Ixy Ixz Iyz] \" \"measured about the mass_center and not the body origin.\" This property appears in XML files under the tag <inertia> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_inertia() , upd_inertia() , set_inertia() ◆ mass double OpenSim::Body::mass \"The mass of the body (kg)\" This property appears in XML files under the tag <mass> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_mass() , upd_mass() , set_mass() ◆ mass_center SimTK::Vec3 OpenSim::Body::mass_center \"The location (Vec3) of the mass center in the body frame.\" This property appears in XML files under the tag <mass_center> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_mass_center() , upd_mass_center() , set_mass_center() The documentation for this class was generated from the",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 20,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bccfa323-7dc0-4349-8701-71d97d078b26",
    "document_id": "doc_189",
    "content": "double OpenSim::Body::mass \"The mass of the body (kg)\" This property appears in XML files under the tag <mass> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_mass() , upd_mass() , set_mass() ◆ mass_center SimTK::Vec3 OpenSim::Body::mass_center \"The location (Vec3) of the mass center in the body frame.\" This property appears in XML files under the tag <mass_center> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_mass_center() , upd_mass_center() , set_mass_center() The documentation for this class was generated from the following file: OpenSim/Simulation/SimbodyEngine/Body.h OpenSim Body Generated on Thu Mar 21 2024 15:02:50 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Body.html",
      "title": "API: OpenSim::Body Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Body.html"
      ],
      "content_type": "api",
      "position": 21,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f5e38414-6ec8-449f-a670-cbac77493798",
    "document_id": "doc_41",
    "content": "View Primary Publication Seth, A., Hicks, J. L., Uchida, T. K., Habib, A., Dembia, C. L., Dunne, J. J., … Delp, S. L. (2018). OpenSim: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement. PLoS Computational Biology, 14(7), 1–20. (2018) View Related Publications Delp SL, Anderson FC, Arnold AS, Loan P, Habib A, John CT, Guendelman E, Thelen DG. OpenSim: Open-source Software to Create and Analyze Dynamic Simulations of Movement. IEEE Transactions on Biomedical Engineering. (2007) View Christopher L Dembia, Nicholas A Bianco, Antoine Falisse, Jennifer L Hicks, Scott L Delp. OpenSim Moco: Musculoskeletal optimal control. PLoS Computational Biology 16(12): e1008493 (2020) View 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/publications/index.php?type=group&id=91&pluginname=publications",
      "title": "SimTK: OpenSim: Publications",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Publications:",
      "hierarchy": [
        "plugins",
        "publications",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "789c2ce0-dc26-4788-a41c-e2ff00bb268f",
    "document_id": "doc_125",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089993/Preparing+Your+Data",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089993",
        "Preparing+Your+Data"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a39a490c-7681-4d50-9800-0c01d547d351",
    "document_id": "doc_155",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53088700/Tutorial+1+-+Intro+to+Musculoskeletal+Modeling",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53088700",
        "Tutorial+1+-+Intro+to+Musculoskeletal+Modeling"
      ],
      "content_type": "tutorial",
      "position": 0,
      "tags": [
        "tutorial",
        "modeling",
        "intermediate"
      ]
    }
  },
  {
    "id": "40b8816d-43ba-4ae3-aec0-c1b241fc7814",
    "document_id": "doc_5",
    "content": "Cardiovascular System Computational biology is increasing our understanding, providing better diagnosis, and improving interventions for cardiovascular diseases, such as arrhythmias, coronary artery disease, and heart attacks. Featured projects Recently updated projects total projects 18 projects with downloads Search projects in this category News SimVascular Workshop at SB3C 2022 June 23rd SimVascular: Cardiovascular Modeling and Simulation May 26, 2022 Workshop at SB3C Conference June 13, 2021 SimVascular: Cardiovascular Modeling and Simulation Jun 7, 2021 The Reference Model for COVID-19 - The First Multi-Scale Ensemble Disease Model The Reference Model for Disease Progression Jun 6, 2021 Publications Three Dimensional Lower Extremity Musculoskeletal Geometry of the Visible Human Female and Male Open-Source Routines for Building Personalized Left Ventricular Models from Cardiac MRI Data Updegrove, A., Wilson, N.M., Merkow, J., Lan, H., Marsden, A.L., Shadden, S. C., “SimVascular - An Open Source Pipeline for Cardiovascular Simulation,” Annals of Biomedical Engineering, Vol 45 (3), pp. 525-541 Discussion Re: 1Dsover results SimVascular: Cardiovascular Modeling and Simulation Application Mar 26, 2025 Re: reading centerline from VMTK and compute_centerlines does not work SimVascular: Cardiovascular Modeling and Simulation Application Mar 26, 2025 Re: Deformable wall simulation with CMM: Warning and Lacks in the documentation SimVascular: Cardiovascular Modeling and Simulation Application Mar 24, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=309&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8e908345-1b4c-41e0-9c1d-0c7700167485",
    "document_id": "doc_78",
    "content": "Sam's Simulations Share Follow Project Follow publicly Follow privately Unfollow See followers (4) List Map More info 252 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Develop a muscle-actuated simulation of human running. This project is intended to serve as a repository for software developed for physics-based simulation of human motion, as part of the work in the Neuromuscular Biomechanics Lab. 39 downloads 3 forum posts 4 followers Last updated Nov 3, 2010 Project Statistics Join Mailing Lists Suggest Idea Sam Hamner People also viewed Muscle contributions to mass center... OpenSim Analysis of arm swing during human walking EMG-informed Computed Muscle Control for Dynamic... Dynamic Simulation of Movement Based on OpenSim and... Hamstring Function During Running Examining Muscle Forces during Sit to Stand Transfer... Chand's Simulations See all How much muscle strength is required to walk in... Upper and Lower Body Model Multiple Speed Walking Simulations Dynamic Arm Simulator A Visualization Tool for OpenSim Simulated Assistive Devices for Loaded Walking Platform for Dynamic Simulation and Control of... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/samsim/",
      "title": "SimTK: Sam's Simulations: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "samsim"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "958dc32f-ab29-484a-917c-bfc68abaf0d8",
    "document_id": "doc_141",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089616/Video+Gallery",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089616",
        "Video+Gallery"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9b824b57-367a-4720-884a-3c79e77c45e6",
    "document_id": "doc_35",
    "content": "University of Gävle a.menicacci@me.com Armando Body movement analysis Institution: UQAM Salhi Asma Shoulder Joint Biomechanics, Pediatric Shoulder Pathologies, Total and Reverse Shoulder Arthroplasties, Musculoskeletal Modeling, Statistical Shape Model based Biomechanics, Musculoskeletal Disorders, Machine Learning. Institution: LaTIM Michael Asmussen Institution: Mount Royal University Mansour Attaallah Institution: Alexandria jalil azardoost Institution: guilan university Subham Badhyal Institution: Indian Institute of Technology Ropar Ju-hwan Bae Institution: COMWEL Korea Orthopedics and Rehabilitation Engineering Center Keeran Balachandran Institution: University of Auckland alireza balaghi interest_simtk Institution: azadfaraz club malihe baraz Institution: basu Nicholas Bianco Institution: Stanford University Dimitra Blana Simulation of upper limb movement Institution: University of Aberdeen Edgar Bolívar-Nieto Estimation of lower-limb biomechanics from motion capture and force plate data. Institution: University of Notre Dame Edilson Borba Institution: UFPR Andreas Bourantanis Institution: University of Dundee Jake Bowd Institution: Cardiff University Marcus Brookshaw Gait analysis. Institution: Univeristy of New Brunswick Gabriel Bucio Caballero Institution: unam Tiago Canal Institution: CNPq Guillaume Cara Institution: UPHF attilio caravelli I am an experienced electronic engineer with 10 years of professional career and extensive experience in IT. I have skills in genetics and neuromorphic computing. Currently part of my free time is dedicated to studying nanotechnology for medicine and genetics just for personal challenge. Institution: Polytechnic University of Turin Axelle CARON Institution: Matmeca Gabriel Carreño Institution: Universidad Central de Chile Dario Cazzola Biomechanical modelling of cervical spine Institution: University of Bath Carlos CEVALLOS Doctor in Motor Sciences Institution: Universite Libre de Bruxelles Saikat Chakraborty Institution: National Institute of Technology Rourkela DEEPAK CHAUDHARY Institution: ZHCET AMU ALIGARH Manvendra Chauhan Institution: Vikash chaurasia Institution: oist Paul Chris Institution: 佳木斯大学 Uchechuku Chukudi Musculoskeletal Modelling and Analysis Institution: University of Salfrod Yosbel Cisneros Institution: university of camaguey jairo contreras Mundos virtuales con OpenSim Institution: UTPL Ulises Contreras Biomechanics Institution: PUCP Marcos Crespo Institution: FLENI João Cunha Institution: Faculty of Enginnering at University of Porto, Portugal Danilo Curci Medical doctor, psychologist, interested on applications of virtual worlds for training, learning, teaching, sharing experiences Institution: Psicologia Virtuale jimmy d Institution: Independent James Day Institution: University of Queensland Renee Degutis Institution: SHSU David Deimel Institution: Universität Wien Christopher Dembia Research. Institution: Stanford University Rud Derie Institution: Ghent University Andrea Di Pietro Musculoskeletal modelling Joint implant wear tests Sport biomechanics Motion analysis Finite Element Analysis Institution: University of Pisa Kamila Dostálová Institution: VSB-Technical University of Ostrava sky du Institution: ftx Eric Dugan Clinical Gait Analysis ACL Institution: Texas Children's Hospital su east IK Institution: Peking University Julie Ellis Institution: University of Saskatchewan Nermen Es To learn muscles simulation Institution: Tishreen Katie Ewing My PhD project investigates the efficacy of knee braces in preventing knee injury during landing. Institution: University of Melbourne Carlos Fliger Institution: Universidad Nacional de Entre Ríos - Bioingeniería Brooke Fosaaen Institution: Washington University School of Medicine Bruno Gallo I'm studyng biomedical engineering and i want know how to work OpenSim for my studies and also for understand biomechanics. Institution: University of Catanzaro (Italia) Amartya Ganguly Biomechanics Musculoskeletal modelling Sensory Feedback Postural Control Rehabilitation Institution: Keele University JUAN",
    "metadata": {
      "source": "https://simtk.org/plugins/following/index.php?group_id=91",
      "title": "SimTK: OpenSim: Project Home",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News 233 public followers and 80 private followers What does it mean to follow a project? Display followers in: List Map mostafa Abdelrahman Institution: Ain shams Neda Abdollahi Institution: Cleveland Clinic Ahmed abdulameer Institution: university of baghdad Eugene Ablordeppey Institution: Virginia Commonwealth University Deniz Ak Institution: Politecnico di Milano HASSAN AKBARPOUR Institution: Iran_Tabriz university_college of new technologies Rabé Andersson Winter school project Institution:",
      "hierarchy": [
        "plugins",
        "following",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "44959a06-7fa4-4a25-890b-bccd5fd06e5e",
    "document_id": "doc_35",
    "content": "su east IK Institution: Peking University Julie Ellis Institution: University of Saskatchewan Nermen Es To learn muscles simulation Institution: Tishreen Katie Ewing My PhD project investigates the efficacy of knee braces in preventing knee injury during landing. Institution: University of Melbourne Carlos Fliger Institution: Universidad Nacional de Entre Ríos - Bioingeniería Brooke Fosaaen Institution: Washington University School of Medicine Bruno Gallo I'm studyng biomedical engineering and i want know how to work OpenSim for my studies and also for understand biomechanics. Institution: University of Catanzaro (Italia) Amartya Ganguly Biomechanics Musculoskeletal modelling Sensory Feedback Postural Control Rehabilitation Institution: Keele University JUAN FRANCISCO GARCÍA VÁZQUEZ Institution: FREMAP MUTUA Ali Ghaffari Institution: Kharazmi University M. Hosein Ghasemi Institution: univerity of Bu-Ali Sina Aseel Ghazwan Institution: Cardiff University Kristy Godoy Areas of interest: Wheelchair propulsion biomechanics and movement analysis; Using BTS SmartD system at the moment. Institution: Universidade Federal de Rio de Janeiro Carlos Gonçalves Institution: SARAH Network of Rehabilitation Hospitals Helge Gudmundsen Institution: None Dhruv Gupta Institution: The University of Texas at Austin taehyun ha Institution: asan Eni Halilaj Institution: Carnegie Mellon University Muhammad Hamdan Biomechanics, Rehab, Strength and Conditioning researches in motion Institution: Universiti Teknologi MARA Isabella Harker Institution: University of Oregon Chris Hayot Institution: ESP-Consulting Chuan He Institution: Tianjin University Poramet Hemarachatanon Opensim Institution: Walailak Uni. Jennifer Hicks As the OpenSim R&D Manager, I am focused on guiding the development of OpenSim and facilitating its use in research and clinical settings around the world. Institution: Stanford University Tod Hing Institution: Stanford akbar hojjati Institution: islamic azad university of majlesi wk hong Institution: SNUH Mo Hossny Integration with Wii Institution: Deakin University Tassos Hourmouziadis Institution: eworks dongyuan hu multibody dynamics Institution: Tencent qi huan Institution: 东北大学 Po Hsun Huang Institution: National Chiao Tung University (Taiwan) Taj Im Institution: UoHB Nathanael Inkson Simulation of biomechanics for a book Institution: Siemens PLM Henry Isaac Institution: MNNIT Julie Iskander Institution: Deakin Daniel Jacobs Institution: Temple University Vahidreza Jafari Institution: The University of Melbourne Deepak Jindal Institution: Punjab Engineering University TSENG Ji Yang Institution: National Yunlin University and Technology LEE JUSUNG I am interested in research to prevent injury to the lower extremities when walking, running or landing. Institution: KISS Derya Karabulut Institution: Istanbul university Parashar Karthick About musculoskeletal simulation: opensim Institution: Independent Dmytro Kazanzhy Institution: GenomicsUA Mousa Kazemi Knee FE model Institution: Auckland Bioengineering Institute Mohamad Reza Kharazi spasticity, Cerebral palsy Institution: Mohamad Reza Kharazi tuba kiani Institution: uet lhr Seungyeon Kim Institution: Seoul National University Hide Kimpara Institution: Worcester Polytechnic Institute Łukasz Kożuchowski Institution: Independent Andrew Kraszewski Application to biomechanical and rehabilitation research. Improving musculoskeletal models for human movement science. Institution: New York University; Hospital for Special Surgery Joy Ku data and software sharing, scientific reproducibility, mHealth, physics-based simulation, OpenSim and the NIH-funded Restore Center (http://restore.stanford.edu) Institution: Stanford University YU LAN Institution: University Andrew LaPre Simulating use of new robotic lower limb prostheses. Institution: UMass Amherst Seven Lau Institution: China University of petroleum andrea Leo Institution: shenyangligong university Junnan Li Institution: tum chan liang",
    "metadata": {
      "source": "https://simtk.org/plugins/following/index.php?group_id=91",
      "title": "SimTK: OpenSim: Project Home",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News 233 public followers and 80 private followers What does it mean to follow a project? Display followers in: List Map mostafa Abdelrahman Institution: Ain shams Neda Abdollahi Institution: Cleveland Clinic Ahmed abdulameer Institution: university of baghdad Eugene Ablordeppey Institution: Virginia Commonwealth University Deniz Ak Institution: Politecnico di Milano HASSAN AKBARPOUR Institution: Iran_Tabriz university_college of new technologies Rabé Andersson Winter school project Institution:",
      "hierarchy": [
        "plugins",
        "following",
        "index.php"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "90ea56a7-6c2d-4299-9efd-545e68c2c1b1",
    "document_id": "doc_35",
    "content": "tuba kiani Institution: uet lhr Seungyeon Kim Institution: Seoul National University Hide Kimpara Institution: Worcester Polytechnic Institute Łukasz Kożuchowski Institution: Independent Andrew Kraszewski Application to biomechanical and rehabilitation research. Improving musculoskeletal models for human movement science. Institution: New York University; Hospital for Special Surgery Joy Ku data and software sharing, scientific reproducibility, mHealth, physics-based simulation, OpenSim and the NIH-funded Restore Center (http://restore.stanford.edu) Institution: Stanford University YU LAN Institution: University Andrew LaPre Simulating use of new robotic lower limb prostheses. Institution: UMass Amherst Seven Lau Institution: China University of petroleum andrea Leo Institution: shenyangligong university Junnan Li Institution: tum chan liang I Wanna to create some muscle bodies. Institution: Nanjing Sport Institute David Logan Institution: Drexel University College of Medicine Wenlong Ma Institution: California Institute of Technology Shwetha Macheri Ravishankar To Model the Human Leg Institution: T U Delft Byron Maeda To analyse sport technique in Guatemala Institution: CDAG maher mahdavi opensim mahermahdavi90@gmail.com Institution: shiraz university of medical science mohammad mahmoodi Institution: kntu nima majd Institution: Qazvin Islamic Azad University Dmitry Malakhov Institution: RNRMU mohammad malekzadeh arasteh Institution: tehran university Terry Martin Institution: Semantic Press Tommy McMichen I am a compiler researcher Institution: Northwestern University Fabrice MEGROT Institution: French Red Cross Pouyan Mehryar Institution: University of Leeds Uğur Mengilli Metabolic rate optimization Institution: Sabancı Üniversitesi Benben Miao Institution: AiBio stuart miller Institution: Middlesex University Cecilia Monoli Institution: Tal Tech Luis Montesinos Research on falls prediction Institution: University of Warwick Denis César Mosconi Pereira Simulate an exoskeleton model. Institution: Universidade de São Paulo Vignayanandam R. Muddapu To build neuronal network-based mechanical model of the arm Institution: Indian Institute of Technology Madras Alison Murray Institution: University of Victoria Mohamed Nafea i want to learn how to use it to make use of it in my graduation project which is about designing an orthotic leg for helping patients having foot drop. Institution: Faculty of Engineering, Ain Shams University, Cairo, Egypt Marien Narváez Institution: Universidade de Brasilia Caitlin Neher Institution: University of Washington geraldo netto Institution: universitat Duisburg Essen Vinh Nguyen Institution: University of Massachusetts - Amherst Marcos Alfredo Núñez Institution: FLENI John O Connor Orthopedic biomechanics Institution: Queens University, Belfast fethi okyar to carry out multi-body dynamic analyses in our computational biomechanics lab Institution: yeditepe university Karpinska Olena Institution: SYTENKO INSTITUTE OF SPINE AND JOINT PATHOLOGY Can Ozcan As a biomedical engineering phd candidate, I am interested in alternative solutions for biomechanics. Institution: Akro Muhendislik, Bogazici University Sudeshna Pal Institution: University of Central Florida Rahul Pandey Institution: Stanford University Heewon Park Institution: KAIST Gunjan Patel Gait Analysis, Human movement analysis, Wearable gait monitoring systems, Algorithm and software tool and app development Institution: IIT Madras Arvind Kumar Pathak Solids modeling of biomechanical systems Institution: Dr. B R Ambedkar National Institute of Technology Jalandhar Antonio Pereira Institution: Federal University of Pará Claudio Pizzolato Development of a visual biofeedback technology based on the estimation of muscle force in real-time. Institution: Griffith University Bruce Portnoff Institution: University of Michigan Soha Pouya Institution: Stanford University Pierre PUCHAUD Institution: IRISA",
    "metadata": {
      "source": "https://simtk.org/plugins/following/index.php?group_id=91",
      "title": "SimTK: OpenSim: Project Home",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News 233 public followers and 80 private followers What does it mean to follow a project? Display followers in: List Map mostafa Abdelrahman Institution: Ain shams Neda Abdollahi Institution: Cleveland Clinic Ahmed abdulameer Institution: university of baghdad Eugene Ablordeppey Institution: Virginia Commonwealth University Deniz Ak Institution: Politecnico di Milano HASSAN AKBARPOUR Institution: Iran_Tabriz university_college of new technologies Rabé Andersson Winter school project Institution:",
      "hierarchy": [
        "plugins",
        "following",
        "index.php"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8dc06110-1299-460f-817f-b7e53c7673b1",
    "document_id": "doc_35",
    "content": "Muhendislik, Bogazici University Sudeshna Pal Institution: University of Central Florida Rahul Pandey Institution: Stanford University Heewon Park Institution: KAIST Gunjan Patel Gait Analysis, Human movement analysis, Wearable gait monitoring systems, Algorithm and software tool and app development Institution: IIT Madras Arvind Kumar Pathak Solids modeling of biomechanical systems Institution: Dr. B R Ambedkar National Institute of Technology Jalandhar Antonio Pereira Institution: Federal University of Pará Claudio Pizzolato Development of a visual biofeedback technology based on the estimation of muscle force in real-time. Institution: Griffith University Bruce Portnoff Institution: University of Michigan Soha Pouya Institution: Stanford University Pierre PUCHAUD Institution: IRISA Vishal R Control of transfemoral prosthesis Institution: University of Groningen Hatem Rabei Institution: Helwan University arun ramakrishnan Institution: Drexel University R Yogeshwar Rao Rao Institution: IIT, Bombay Aviva Ratzer Institution: Open u Amir Razmi Institution: MIT Mikael Reimeringer I´m interested in finding out if Opensim can assist us in some way and give us more tools in out Gait and movement analyzis lab to further help our ortopaedic surgeons in treatment plans Institution: Karolinska Institutet fateme rezaie Institution: bu-ali university shadi rg Institution: alzahra Mark Ricard Institution: University of Texas Arlington Marco Romanato Institution: Università degli studi di Padova Christina Rossi Institution: Virginia Tech Marcel Rossi Institution: Sport Singapore LUO RUIMING My interest is to model musculoskeletal system of human(especially for lower limb) to help design exoskeleton for walking assistance. Institution: Zhejiang University ali safaeifar Institution: sharif university of technology everardo sanchez Institution: universidad simon bolivar Keela Sanders Institution: Southern Oregon University Paulo Santiago sports biomechanics Institution: University of Sao Paulo - USP Ribeirao Preto Hassan Sardar Institution: NUST Karine Sarro I am interested in OpenSim to study injury risk in sport and exercise Institution: University of Campinas Adrián Schmedling Institution: University of the Basque Country Khuram Shahzad Institution: university of Glasgow Ahmad Shaikh I have previously worked on FeBio, Abaqus, custom matlab and python codes to study cardiovascular biomechanics. So far, my studies have been on solid mechanics and idealised geometries. To venture into the realm of patient-specific models and hemodynamics, I hope to dive into the world of SimVascular Institution: BMS College of Engineering tongji shang Institution: tongji Alana Sharp Institution: University of Liverpool Keli Shen Balance control Institution: Tohoku University Hayden Sidey-Phillips Institution: University of British Columbia Andrew Slateff Biomechanics, Kinematics, Kinematic Geometry, Motion Analysis, Dynamics, Dynamical Systems, Multiple Scale Systems, Singular Perturbations, Sports Biomechanics, Multibody Systems, Robotics, Running, Cross Country Skiing, Strength Training, Sensorimotor Training Institution: TU Vienna Per Slycke Institution: Moveshelf Drew Smith Professor and Director of the Motion Analysis Research Center at Samuel Merritt University, Oakland CA Institution: Samuel Merritt University Rene Solis Arduino RaspberryPi Linux Institution: Instituto tecnologico de Tijuana Sankalp Soni Dynamic analysis of Lower Extremity using Multibody Approach. Institution: A. D. Patel Institute of Technology Ehsan Soodmand Institution: TU Chemnitz Thales Souza Opensim Institution: UFMG Dimitar Stanev Biomechanics, modeling and simulation, movement analysis, knee, neurodegenerative disorders, digital biomarkers Institution: Capgemini Engineering Kenji Takeda Gait cycle, Muscle synergy Institution: Nihon-university terry terry",
    "metadata": {
      "source": "https://simtk.org/plugins/following/index.php?group_id=91",
      "title": "SimTK: OpenSim: Project Home",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News 233 public followers and 80 private followers What does it mean to follow a project? Display followers in: List Map mostafa Abdelrahman Institution: Ain shams Neda Abdollahi Institution: Cleveland Clinic Ahmed abdulameer Institution: university of baghdad Eugene Ablordeppey Institution: Virginia Commonwealth University Deniz Ak Institution: Politecnico di Milano HASSAN AKBARPOUR Institution: Iran_Tabriz university_college of new technologies Rabé Andersson Winter school project Institution:",
      "hierarchy": [
        "plugins",
        "following",
        "index.php"
      ],
      "content_type": "reference",
      "position": 3,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7cc5462f-4342-4694-bc48-08408481cd8f",
    "document_id": "doc_35",
    "content": "Robotics, Running, Cross Country Skiing, Strength Training, Sensorimotor Training Institution: TU Vienna Per Slycke Institution: Moveshelf Drew Smith Professor and Director of the Motion Analysis Research Center at Samuel Merritt University, Oakland CA Institution: Samuel Merritt University Rene Solis Arduino RaspberryPi Linux Institution: Instituto tecnologico de Tijuana Sankalp Soni Dynamic analysis of Lower Extremity using Multibody Approach. Institution: A. D. Patel Institute of Technology Ehsan Soodmand Institution: TU Chemnitz Thales Souza Opensim Institution: UFMG Dimitar Stanev Biomechanics, modeling and simulation, movement analysis, knee, neurodegenerative disorders, digital biomarkers Institution: Capgemini Engineering Kenji Takeda Gait cycle, Muscle synergy Institution: Nihon-university terry terry just learning Institution: Shu-Zen Junior College of Medicine and Management Chetan Thakur Study effects of assistive suit and exoskeleton on human muscle and movement. Institution: Hiroshima University Millen James Theophilus I am a student studying MSc. Sport Biomechanics. Institution: Loughborough University William Thompson Institution: NASA Glenn Research Center Junjie Tian Institution: Yanshan University xie tianming Institution: heu Haruki Toda Institution: Kobe University GEORGIY TOKUNOV Institution: Skoltech LONG TUNG Institution: University of technology Rory Turnbull Human and exoskeleton motion Institution: University of Leeds Fildiaz Utama Institution: ITP Stefan van Drongelen Institution: Orthopaedic University Hospital Friedrichsheim gGmbH Julio Vargas-Riano Rehabilitation Robotics. Institution: Universitat Politecnica de Valencia Paavo Vartiainen Motion capture, Gait analysis, Biomechanics, State-space estimation, clinical trials Institution: University of Eastern Finland Lijo Varughese Chacko Institution: University of Strathclyde Prabhakaran Vasantharajan to simulate biomechanic orthosis and amputee assisting structures Institution: National Institute of Technology, Calicut Shayne Vial Ph.D. student investigating injuries in elite soccer players Institution: Edith Cowan University AGATA VIZCAYA Institution: MUTUALIA Chao Wang Upper Extremity motor assessment Institution: University of Leeds wenbin Wang Institution: Tongji University Ryan Wedge I am interested in using modeling and simulation techniques to study the effects of different prostheses on the energetics and dynamics of locomotion. Institution: University of Massachusetts Amherst lin weijian Institution: xi'an jiaotong university bao wendy apply opensim to automobile Institution: jilin university P Wesberg Research on biomechanical models and motion capture for applied motion analysis in simulation processes. Institution: Berlin University of Applied Science Gusti Winata I have undergrad thesis to build motion capture system that would combine IMU sensor system and Multi Camera inference Institution: Bandung Institute of Technology Bessie Wu Institution: National Tsing Hua University Shuai Wu Institution: Shenzhen University York Wu Institution: university of science and technology of china Qi Xing Lumbar Spine Institution: George Mason University Sergiy Yakovenko Applications: 1) neuromuscularskeletal (NMS) models of cat & human locomotion; 2) development of Matlab-OpenSim APIs; 3) development of data management APIs. Institution: University of Pittsburgh Hamit Yanalak For biomedical engineering project Institution: Çukurova University Zhang Yanyan Institution: Zhejiang lab fateme yaseri Institution: iran university of sience and technology Wayne Yin Institution: Texas A&M University feng yuming Institution: CRRC Rahid Zaman I want to simulate the Musculoskeletal model of Human body in various conditions. Institution: Oklahoma Syate University Milad Zarei Institution: Cleveland State University zhifei zhang Musculoskeletal Models Institution: chongqing University Nianlei Zhang Institution: TU Delft Yang Zhang Institution: Shenyang",
    "metadata": {
      "source": "https://simtk.org/plugins/following/index.php?group_id=91",
      "title": "SimTK: OpenSim: Project Home",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News 233 public followers and 80 private followers What does it mean to follow a project? Display followers in: List Map mostafa Abdelrahman Institution: Ain shams Neda Abdollahi Institution: Cleveland Clinic Ahmed abdulameer Institution: university of baghdad Eugene Ablordeppey Institution: Virginia Commonwealth University Deniz Ak Institution: Politecnico di Milano HASSAN AKBARPOUR Institution: Iran_Tabriz university_college of new technologies Rabé Andersson Winter school project Institution:",
      "hierarchy": [
        "plugins",
        "following",
        "index.php"
      ],
      "content_type": "reference",
      "position": 4,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e2bd5e89-076d-4cbf-a881-c78464790f57",
    "document_id": "doc_35",
    "content": "Yakovenko Applications: 1) neuromuscularskeletal (NMS) models of cat & human locomotion; 2) development of Matlab-OpenSim APIs; 3) development of data management APIs. Institution: University of Pittsburgh Hamit Yanalak For biomedical engineering project Institution: Çukurova University Zhang Yanyan Institution: Zhejiang lab fateme yaseri Institution: iran university of sience and technology Wayne Yin Institution: Texas A&M University feng yuming Institution: CRRC Rahid Zaman I want to simulate the Musculoskeletal model of Human body in various conditions. Institution: Oklahoma Syate University Milad Zarei Institution: Cleveland State University zhifei zhang Musculoskeletal Models Institution: chongqing University Nianlei Zhang Institution: TU Delft Yang Zhang Institution: Shenyang Jianzhu University Kuhn Zhao Institution: SEU rui zhou Institution: lan zhou univerity of tecology Le Zhou Institution: Oklahoma State University 龙 黄 Institution: 北京体育大学 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/following/index.php?group_id=91",
      "title": "SimTK: OpenSim: Project Home",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News 233 public followers and 80 private followers What does it mean to follow a project? Display followers in: List Map mostafa Abdelrahman Institution: Ain shams Neda Abdollahi Institution: Cleveland Clinic Ahmed abdulameer Institution: university of baghdad Eugene Ablordeppey Institution: Virginia Commonwealth University Deniz Ak Institution: Politecnico di Milano HASSAN AKBARPOUR Institution: Iran_Tabriz university_college of new technologies Rabé Andersson Winter school project Institution:",
      "hierarchy": [
        "plugins",
        "following",
        "index.php"
      ],
      "content_type": "reference",
      "position": 5,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "43741e7f-7053-4d4f-94f8-94035800e3a1",
    "document_id": "doc_55",
    "content": "Muscle-Driven Simulations and Experimental Data for Cycling Apr 11, 2024 OpenSim 4.5 Now Available Mar 08, 2024 Webinar: Energetics and Big Data Approach Explain Ecological Running Speeds Aug 16, 2022 Webinar: Estimating Energy Expenditure during Exercise Using Wearable Sensors Apr 25, 2022 Apply for Digital Human Modeling Postdoctoral Fellowships at Stanford University Jan 23, 2021 OpenSim Webinar - Inverse Kinematics: A Bayesian Versus Least-Squares Approach Jul 08, 2020 OpenSim Webinar - Automating OpenSim Workflows: An Intro to the OpenSim API in Matlab Jun 22, 2020 OpenSim Webinar: Which simulation pipeline should I use? An overview of common workflows Apr 20, 2020 OpenSim Webinar: Characterizing hyperreflexia and abnormal coordination in post-stroke stiff-knee gait Feb 25, 2020 OpenSim Webinar: Computational Models of Reaching to Test Hypotheses in Motor Control Jan 28, 2020 Apply to the Next OpenSim Advanced User Workshop at Stanford University Dec 05, 2019 OpenSim Webinar - OpenSim Moco: Software to optimize the motion and control of OpenSim models Nov 04, 2019 Webinar: Predictive Simulation of Biological Motion using SCONE Oct 21, 2019 Webinar: Metabolic cost modeling: experimental validation and predictive simulations Oct 17, 2019 Webinar: Human-machine Interfacing via Real-time Neuromechanical Modeling Jul 09, 2019 Webinar: Predictive Simulations to Study the Plantarflexors in Gait Pathologies May 03, 2019 Webinar: Muscle and Ligament Model of the Head and Neck to Study Physiological Motions and Dynamic Impacts Apr 17, 2019 Webinar: Interfacing Musculoskeletal and Finite Element Models to Study Bone Structure and Adaptation Nov 28, 2018 Webinar on Jumping Into OpenSim 4.0 Nov 08, 2018 Webinar on SimCP - A Simulation Platform to Predict Gait Performance Following Orthopedic Interventions in Children with Cerebral Palsy Sep 06, 2018 Webinar on robust control strategies for musculoskeletal models using deep reinforcement learning Jul 24, 2018 Webinar on why antagonists are activated in hip and knee flexion simulations Sep 23, 2017 Webinar on understanding how exoskeletons affect muscle-tendon mechanics during walking Sep 09, 2017 OpenSim/NCSRR 2017 Pilot Project Program Call for Proposals Jun 06, 2017 Webinar on tips and tricks for data collection, scaling and inverse kinematics in OpenSim Apr 13, 2017 OpenSim lower limb model in Super Bowl Nike commercial Feb 07, 2017 Webinar on Using musculoskeletal modeling to study human bipedalism evolution Feb 01, 2017 Webinar on Musculoskeletal simulations combining multiscale data and finite element modeling of the knee Jan 10, 2017 Webinar on Enabling Stochastic Simulations of Movement with High Throughput Computing Nov 09, 2016 OpenSim simulations yield insights into the design of assistive devices to reduce the metabolic cost of running Oct 25, 2016 Course on Open-Source Tools for Computational Biomechanics Aug 30, 2016 OpenSim Workshop at Summer School on Neurorehabilitation May 05, 2016 OpenSim Workshop at the International Shoulder Group meeting May 04, 2016 Vote for OpenSim in the NIH Video Competition! Apr 28, 2014 Dynamic Walker Challenge Winners Announced Apr 24, 2014 Registration Now Open for OpenSim Advanced User Workshop Jul 11, 2013 OpenSim/NCSRR Pilot Project Program Call for Proposals Jul 11, 2013 Webinar: All Models Are NOT Wrong ...",
    "metadata": {
      "source": "https://simtk.org/plugins/simtk_news/index.php?group_id=91&pluginname=simtk_news",
      "title": "SimTK: OpenSim: News",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News News Webinar: Hamstrings Stretch More in Accelerative than Constant-Speed Running Jan 07, 2025 Webinar:",
      "hierarchy": [
        "plugins",
        "simtk_news",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7e6e46d9-c58d-4259-8fa9-424fa43f4084",
    "document_id": "doc_55",
    "content": "09, 2016 OpenSim simulations yield insights into the design of assistive devices to reduce the metabolic cost of running Oct 25, 2016 Course on Open-Source Tools for Computational Biomechanics Aug 30, 2016 OpenSim Workshop at Summer School on Neurorehabilitation May 05, 2016 OpenSim Workshop at the International Shoulder Group meeting May 04, 2016 Vote for OpenSim in the NIH Video Competition! Apr 28, 2014 Dynamic Walker Challenge Winners Announced Apr 24, 2014 Registration Now Open for OpenSim Advanced User Workshop Jul 11, 2013 OpenSim/NCSRR Pilot Project Program Call for Proposals Jul 11, 2013 Webinar: All Models Are NOT Wrong ... Jul 11, 2013 OpenSim Workshop for Pilot Project Awardees Mar 29, 2013 Postdoctoral Fellow Opening with OpenSim Project Feb 13, 2013 OpenSim 3.0 Released with Scripting, Live Editing, and More Oct 26, 2012 Sam Hamner and OpenSim featured in NBC Learn Video Jul 17, 2012 New OpenSim Support Site Launched Apr 12, 2012 Pilot Project Winners Travel to Stanford for Workshop Apr 04, 2012 OpenSim 2.4 Released Oct 10, 2011 OpenSim at the ISB Congress Jul 11, 2011 OpenSim 2.2.1 Released Apr 11, 2011 OpenSim 2.2 Released Dec 02, 2010 OpenSim Jamboree Brings Together International Researchers Jul 14, 2010 OpenSim 2.0 Released Dec 31, 2009 First OpenSim Developers Workshop Nov 02, 2009 OpenSim 1.9.1 now available Sep 03, 2009 OpenSim Advanced User Workshop Held Aug 18, 2009 OpenSim 1.8 Released Jan 22, 2009 OpenSim 1.5.5 Released Aug 06, 2008 First OpenSim Developer's Jamboree (Aug. '08) May 29, 2008 Introductory OpenSim Workshop at NACOB '08 May 29, 2008 OpenSim 1.5 Released May 09, 2008 OpenSim 1.1 Released Dec 11, 2007 First OpenSim Workshop (Aug. '07) Aug 20, 2007 OpenSim version 1.0 released Aug 20, 2007 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/simtk_news/index.php?group_id=91&pluginname=simtk_news",
      "title": "SimTK: OpenSim: News",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News News Webinar: Hamstrings Stretch More in Accelerative than Constant-Speed Running Jan 07, 2025 Webinar:",
      "hierarchy": [
        "plugins",
        "simtk_news",
        "index.php"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "887347d5-13dc-4172-adce-58e287656551",
    "document_id": "doc_55",
    "content": "@dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/simtk_news/index.php?group_id=91&pluginname=simtk_news",
      "title": "SimTK: OpenSim: News",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News News Webinar: Hamstrings Stretch More in Accelerative than Constant-Speed Running Jan 07, 2025 Webinar:",
      "hierarchy": [
        "plugins",
        "simtk_news",
        "index.php"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6fd8bb69-026b-42ec-aafa-d21d0c6773b8",
    "document_id": "doc_154",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/overview",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "overview"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d7c40beb-91b9-4894-92e3-eb15d0b602d9",
    "document_id": "doc_134",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089719/Computed+Muscle+Control",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089719",
        "Computed+Muscle+Control"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6859f7d8-cb3a-4ca8-ad87-923c2e37222f",
    "document_id": "doc_127",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090037/Inverse+Kinematics",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090037",
        "Inverse+Kinematics"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bd9c90c2-6cd1-4b65-aada-98b5e2a708d3",
    "document_id": "doc_96",
    "content": "Hamstring Function During Running Share 642 This is a private project. You must be a member to view its contents. The goal of this project is to determine the contributions of the hamstrings and other muscled to joint accelerations at the hip and knee during running The goal of this project is to determine the contributions of the hamstrings and other muscled to joint accelerations at the hip and knee during running Denny Delp Sam Hamner People also viewed Muscle contributions to mass center... Muscle-actuated Simulation of Human Running EMG-informed Computed Muscle Control for Dynamic... Sam's Simulations How much muscle strength is required to walk in... Multiple Speed Walking Simulations OpenArm: Volumetric & Time Series Models of Muscle... Muscle function of overground running across a range of... See all Stroke gait Chand's Simulations Simulating Ideal Assistive Devices to Reduce the... How Tendon Compliance Affects the Metabolic Cost... Quantification of participant-specific iliotibial band... UW Pipeline Musculoskeletal Modelling of Hopping in Elastic... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/runham/",
      "title": "SimTK: Hamstring Function During Running: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "runham"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "20ac06d9-79e6-4a10-98c7-604d98c68a19",
    "document_id": "doc_97",
    "content": "Multidimensional Cubic B-Spline Share Follow Project Follow publicly Follow privately Unfollow See followers (3) List Map More info 891 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provide a software for fast estimation of lengths and three-dimensional moment arms for musculotendon actuators. Download Latest Releases mcbs: .zip This project presents a C++ implementation of multidimensional cubic B-spline for the fast estimation of lengths and three-dimensional moment arms for musculotendon actuators. At first, an OpenSim musculoskeletal model is used to establish the length of each musculotendon actuator for different generalized coordinates (joint angles). Then, multidimensional spline function is computed to fit the previous data. Muscle moment arms are obtained by differentiating the musculotendon length spline function with respect to the generalized coordinate of interest. 77 downloads 1 forum posts 3 followers Last updated Jul 1, 2019 Project Statistics Join Mailing Lists Suggest Idea Monica Reggiani Massimo Sartori People also viewed OpenArm: Volumetric & Time Series Models of Muscle... Muscle contributions to mass center... Are subject-specific musculoskeletal... Simulations of Crouch Gait Spasticity model in OpenSim Evertor and invertor muscle co-activation... Grand Challenge Competition to Predict In Vivo... An OpenSim plugin to minimize joint reaction forces and... See all Model of the Scapulothoracic Joint Below-Knee Amputee Model 3-D Musculoskeletal Model of the Chimpanzee Pelvis... Efficient Methods for Multi-Domain Biomechanical... Drop Landing Model MB Knee: Multibody Models of the Human Knee Optimal Control of Musculoskeletal Movement Using... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/mcbs",
      "title": "SimTK: Multidimensional Cubic B-Spline: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "mcbs"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0d1060ce-7550-4cff-82c7-c730fd53ca31",
    "document_id": "doc_116",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089894/Graphical+User+Interface",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089894",
        "Graphical+User+Interface"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cbf2e654-79d2-4700-b2e0-ba03c8cacd4a",
    "document_id": "doc_48",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Choose a tracker and you can browse/edit/add items to it. Tracker Description Open Total Bugs Bug Tracking System 333 928 Features Feature Request Tracking System 138 245 Suggested Ideas Suggested Idea Tracking System 22 22 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/tracker?group_id=91",
      "title": "SimTK: OpenSim: Features & Bugs",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7aac6bb5-3bfb-4927-b33a-50ddcdf0e7d6",
    "document_id": "doc_104",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a6335185-23ca-48e2-b95b-513869724d5a",
    "document_id": "doc_152",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/pages/diffpagesbyversion.action?pageId=53089849&selectedPageVersions=1&selectedPageVersions=2",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "pages",
        "diffpagesbyversion.action"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bb444cf0-c8cd-425b-af6a-16259ab31a56",
    "document_id": "doc_153",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53085346/Scripting+in+Python",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53085346",
        "Scripting+in+Python"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c20579d8-0260-47de-9690-a5a3f05dad5d",
    "document_id": "doc_52",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Required fields outlined in blue",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=323&group_id=91&func=add",
      "title": "SimTK: OpenSim: Submit New",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c18d2076-d95a-41f1-aabb-ee65c456ccb9",
    "document_id": "doc_108",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/settings/home",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "settings",
        "home"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a6bff19f-decb-4bb8-8bfa-ebff635882f1",
    "document_id": "doc_6",
    "content": "Cell Biocomputational methods complement experimental techniques to expand our understanding of the cell, the basic unit of life. Featured projects Recently updated projects total projects 23 projects with downloads Search projects in this category News New file added: Muscle_atrophy.nlogo Agent-based model of skeletal muscle disuse-induced atrophy Apr 1, 2016 Publications Catherine A. Rivet , Ariel S. Kniss-James , Margaret A. Gran, Anish Potnis, Abby Hill, Hang Lu, Melissa L. Kemp. \"Calcium Dynamics of Ex Vivo Long-Term Cultured CD8+ T Cells Are Regulated by Changes in Redox Metabolism\". PLoS One: e0159248, 2016. \"Competing Mechanistic Hypotheses of Acetaminophen-Induced Hepatotoxicity Challenged by Virtual Experiments\" Andrew K. Smith, Brenden K. Petersen, Glen E. P. Ropella, Ryan C. Kennedy, Neil Kaplowitz, Murad Ookhtens, C. Anthony Hunt. PLoS Comput Biol. 2016 Dec 16;12(12):e1005253 Kumar, Sandeep, et al. \"Proteolytic and non-proteolytic regulation of collective cell invasion: tuning by ECM density and organization.\" Scientific reports 6 (2016). Discussion What is aeva? Practical Annotation and Exchange of Virtual Anatomy Jan 22, 2021 Practical Annotation and Exchange of Virtual Anatomy Public Forum Practical Annotation and Exchange of Virtual Anatomy Aug 31, 2019 T cell calcium dynamics regulated by age-induced oxidation Public Forum T cell calcium dynamics regulated by age-induced oxidation Jul 10, 2016 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=421&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "aff429ec-a523-4907-9cc3-f6996ef76c4b",
    "document_id": "doc_13",
    "content": "Image Processing Processing biological images – whether from traditional microscopy, x-rays, and MRIs, or newer experimental techniques such as microarrays -- aids in their interpretation and use by other software. Featured projects Recently updated projects total projects 20 projects with downloads Search projects in this category News SimVascular Workshop at SB3C 2022 June 23rd SimVascular: Cardiovascular Modeling and Simulation May 26, 2022 Workshop at SB3C Conference June 13, 2021 SimVascular: Cardiovascular Modeling and Simulation Jun 7, 2021 Youtube Tutorial Videos for SimVascular SimVascular: Cardiovascular Modeling and Simulation Aug 28, 2020 Publications Three Dimensional Lower Extremity Musculoskeletal Geometry of the Visible Human Female and Male Accuracy of biplane videoradiography for quantifying dynamic wrist kinematics Predicting carpal bone kinematics using an expanded digital database of wrist carpal bone anatomy and kinematics, Journal of Orthopaedic Research. Discussion Re: 1Dsover results SimVascular: Cardiovascular Modeling and Simulation Application Mar 26, 2025 Re: reading centerline from VMTK and compute_centerlines does not work SimVascular: Cardiovascular Modeling and Simulation Application Mar 26, 2025 Re: Deformable wall simulation with CMM: Warning and Lacks in the documentation SimVascular: Cardiovascular Modeling and Simulation Application Mar 24, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=412&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cd730315-51d7-4962-bf00-e1e513034277",
    "document_id": "doc_65",
    "content": "Ajay Seth Delft University of Technology Biomechatronics & Human-Machine Control Personal website Contact Interests As the OpenSim software architect, I am interested in the development of tools for musculoskeletal modeling, control and simulation. Other Interests: Human performance. Contact modeling. Posture and balance. Member since Mar 15, 2007 Member of 52 projects Total forum posts: 136 Last forum post: May 30, 2019 Projects Ajay Seth is a member of the following projects: 2017 Fall OpenSim Virtual Workshop 2018 Fall OpenSim Virtual Workshop An OpenSim plugin to minimize joint reaction forces and... Are subject-specific musculoskeletal... Chand's Simulations Drop Landing Model Easy-to-use interactive musculoskeletal... Flexing Computational Muscle: Modeling... See all Marker registration method informed by anatomical... May Liu's Walking Simulations ME/BIOE 485 (Modeling and Simulation of Human... Model of the Scapulothoracic Joint Multiple Speed Walking Simulations Muscle-actuated Simulation of Human Running OpenSense OpenSense: Validation of IMU-based estimates... OpenSim OpenSim 3D World Objects Library OpenSim Advanced User and Developer Workshop, August... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced Users Workshop, April 28-30, 2010 OpenSim Advanced Users Workshop, August 12-14, 2009 OpenSim and NMS Physiome Workshop OpenSim Creator OpenSim Developer Jamboree - July 12-14, 2010 OpenSim Developer's Jamboree 2008 OpenSim Developers Jamboree - October 28-30, 2009 OpenSim Developer's Jamboree | Winter 2009 OpenSim for the Warrior Web OpenSim Soccer Ball Kicking Example OpenSim Utilities Plantarflexor personalisation with group-specific... Platform for Dynamic Simulation and Control of... Predicting changes in gait mechanics over a range of AFO... Predictive Simulation of Loaded and Inclined... Predictive Simulation of Standing Long Jumps... QSim: C++/Qt Prototype GUI for easy-to-use... Quantifying uncertainty in inverse analyses... Sensory Components for Simulating Postural Feedback... Simbios Dissemination Simbody: Multibody Physics API SimTK Planning Project Simulated muscle fiber lengths and velocities during... Simulating Ideal Assistive Devices to Reduce the... Simulation Labs utilizing OpenSim software Simulations of Crouch Gait Spasticity model in OpenSim Stretch Reflexes in OpenSim The Musculoskeletal Modeler's Kitchen Thoracoscapular muscle contributions to... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/users/aseth",
      "title": "SimTK: Ajay Seth",
      "section": "",
      "hierarchy": [
        "users",
        "aseth"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6342c6d7-b4ff-46c9-ac42-f4672b2c7efc",
    "document_id": "doc_126",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090000/Scaling",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090000",
        "Scaling"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b35d9ef3-672a-474b-8a01-1f3abe4f1092",
    "document_id": "doc_190",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Protected Member Functions | Protected Attributes | Friends OpenSim::Force Class Reference abstract This abstract class represents a force applied to bodies or generalized coordinates during a simulation. More... Inheritance diagram for OpenSim::Force: OpenSim Properties, Sockets, Outputs, Inputs Properties (single-value) bool appliesForce \"Flag indicating whether the force is applied or not. If true the force\" \"is applied to the MultibodySystem otherwise the force is not applied.\" \"NOTE: Prior to OpenSim 4.0, this behavior was controlled by the \" \"'isDisabled' property, where 'true' meant that force was not being \" \"applied. Thus, if 'isDisabled' is true, then 'appliesForce` is false.\" More... Outputs double potential_energy Provides the value of computePotentialEnergy() and is available at stage SimTK::Stage::Velocity . More... OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Component Component components \"List of components that this component owns and serializes.\" More... Public Member Functions virtual bool shouldBeParallelized () const Tell SimBody to parallelize this force. More... bool appliesForce (const SimTK::State &s) const Return if the Force is applied (or enabled) or not. More... void setAppliesForce (SimTK::State &s, bool applyForce) const Set whether or not the Force is applied. More... virtual OpenSim::Array < std::string > getRecordLabels () const Methods to query a Force for the value actually applied during simulation. More... virtual OpenSim::Array < double > getRecordValues (const SimTK::State &state) const Given SimTK::State object extract all the values necessary to report forces, application location frame, etc. More... virtual bool hasVisualPath () const Return a flag indicating whether the Force is applied along a path that can be visualized. More... Property-related functions const bool & get_appliesForce () const Get the value of the appliesForce property. More... bool & upd_appliesForce () Get a writable reference to the appliesForce property. More... void set_appliesForce (const bool &value) Set the value of the appliesForce property. More... Public Member Functions inherited from OpenSim::ModelComponent ModelComponent () Default constructor. More... ModelComponent (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct ModelComponent from an XML file. More... ModelComponent (SimTK::Xml::Element &aNode) Construct ModelComponent from a specific node in an XML document. More... virtual ~ModelComponent () Destructor is virtual to allow concrete model component cleanup. More... void connectToModel ( Model &model) Connect this ModelComponent to its aggregate- a Model . More... const Model & getModel () const Get a const reference to the Model this component is part of. More... Model & updModel () Get a modifiable reference to the Model this component is part of. More... bool hasModel () const Does this ModelComponent have a Model associated with it? More... void preScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... void scale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... void postScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void assign ( Object &aObject) override This",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "36132e4b-e20e-4b94-8fdf-41dbe250c716",
    "document_id": "doc_190",
    "content": "Get a modifiable reference to the Model this component is part of. More... bool hasModel () const Does this ModelComponent have a Model associated with it? More... void preScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... void scale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... void postScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Public Member Functions inherited from OpenSim::Component Component () Default constructor. More... Component (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct Component from an XML file. More... Component (SimTK::Xml::Element &aNode) Construct Component from a specific node in an XML document. More... Component (const Component &)=default Use default copy constructor and assignment operator. More... Component & operator= (const Component &)=default virtual ~Component ()=default Destructor is virtual to allow concrete Component to cleanup. More... virtual void generateDecorations (bool fixed, const ModelDisplayHints &hints, const SimTK::State &state, SimTK::Array_< SimTK::DecorativeGeometry > &appendToThis) const Optional method for generating arbitrary display geometry that reflects this Component at the specified state . More... const SimTK::MultibodySystem & getSystem () const Get the underlying MultibodySystem that this component is connected to. More... bool hasSystem () const Check if this component has an underlying MultibodySystem. More... bool isComponentInOwnershipTree (const Component *component) const Does the provided component already exist anywhere in the ownership tree (not just subcomponents of this component)? More... void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const Uses getComponentList<T>() to count the number of underlying subcomponents of the specified type. More... std::string getAbsolutePathString () const Get the complete (absolute) pathname for this Component to its ancestral Component , which is the root of the tree to which this Component belongs. More... ComponentPath getAbsolutePath () const Return a ComponentPath of the absolute path of this Component . More... std::string getRelativePathString (const Component &wrt) const Get the relative path of this Component with respect to another Component , as a string. More... ComponentPath getRelativePath (const Component &wrt) const Get the relative path of this Component with respect to another Component . More... bool hasComponent (const std::string &pathname) const Query if there is a component (of any type) at the specified path name. More... template<class C = Component> bool hasComponent (const std::string &pathname) const Query if there is a component of a given type at the specified path name. More... template<class C = Component> const C & getComponent (const std::string &pathname) const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a8e6d11e-5f80-489e-9256-662303411008",
    "document_id": "doc_190",
    "content": "(const Component &wrt) const Get the relative path of this Component with respect to another Component , as a string. More... ComponentPath getRelativePath (const Component &wrt) const Get the relative path of this Component with respect to another Component . More... bool hasComponent (const std::string &pathname) const Query if there is a component (of any type) at the specified path name. More... template<class C = Component> bool hasComponent (const std::string &pathname) const Query if there is a component of a given type at the specified path name. More... template<class C = Component> const C & getComponent (const std::string &pathname) const Get a unique subcomponent of this Component by its path name and type 'C'. More... template<class C = Component> const C & getComponent (const ComponentPath &pathname) const const Component & getComponent (const std::string &pathname) const Similar to the templatized getComponent() , except this returns the component as the generic Component type. More... template<class C = Component> C & updComponent (const std::string &name) Get a writable reference to a subcomponent. More... template<class C = Component> C & updComponent (const ComponentPath &name) Component & updComponent (const std::string &pathname) Similar to the templatized updComponent() , except this returns the component as the generic Component type. More... unsigned printComponentsMatching (const std::string &substring) const Print a list to the console of all components whose absolute path name contains the given string. More... int getNumStateVariables () const Get the number of \"continuous\" state variables maintained by the Component and its subcomponents. More... Array < std::string > getStateVariableNames () const Get the names of \"continuous\" state variables maintained by the Component and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name) as input. More... const StateVariable * traverseToStateVariable (const std::string &pathName) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... const StateVariable * traverseToStateVariable (const ComponentPath &path) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... void finalizeFromProperties () Define a Component 's internal data members and structure according to its properties. More... void finalizeConnections ( Component &root) Satisfy the Component 's connections specified by its Sockets and Inputs. More... void clearConnections () Disconnect/clear this Component from its aggregate component. More... void addToSystem (SimTK::MultibodySystem &system) const Have the Component add itself to the underlying computational System. More... void initStateFromProperties (SimTK::State &state) const Initialize Component 's state variable values from its properties. More... void setPropertiesFromState (const SimTK::State &state) Set Component 's properties given a state. More... int getNumSockets () const Get the number of Sockets in this Component . More... std::vector< std::string > getSocketNames () const Collect and return the names of the sockets",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0ed76458-08ef-40d8-807d-8419ac1447a2",
    "document_id": "doc_190",
    "content": "void finalizeConnections ( Component &root) Satisfy the Component 's connections specified by its Sockets and Inputs. More... void clearConnections () Disconnect/clear this Component from its aggregate component. More... void addToSystem (SimTK::MultibodySystem &system) const Have the Component add itself to the underlying computational System. More... void initStateFromProperties (SimTK::State &state) const Initialize Component 's state variable values from its properties. More... void setPropertiesFromState (const SimTK::State &state) Set Component 's properties given a state. More... int getNumSockets () const Get the number of Sockets in this Component . More... std::vector< std::string > getSocketNames () const Collect and return the names of the sockets in this component. More... template<typename T > const T & getConnectee (const std::string &name) const Get the \"connectee\" object that the Component 's Socket is bound to. More... const Object & getConnectee (const std::string &name) const Get the connectee as an Object . More... const AbstractSocket & getSocket (const std::string &name) const Get an AbstractSocket for the given socket name. More... AbstractSocket & updSocket (const std::string &name) Get a writable reference to the AbstractSocket for the given socket name. More... template<typename T > const Socket < T > & getSocket (const std::string &name) const Get a const reference to the concrete Socket provided by this Component by name. More... template<typename T > Socket < T > & updSocket (const std::string &name) Get a writable reference to the concrete Socket provided by this Component by name. More... void printSubcomponentInfo () const List all subcomponents by name and recurse into these components to list their subcomponents, and so on. More... void printSocketInfo () const List all the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs () const Access the number of Outputs that this component has. More... std::vector< std::string > getInputNames () const Collect and return the names of Inputs in this component as an std::vector. More... std::vector< std::string > getOutputNames () const Collect and return the names of Outputs in this component as an std::vector. More... const AbstractInput & getInput (const std::string &name) const Get an Input provided by this Component by name. More... AbstractInput & updInput (const std::string &name) Get a writable reference to an Input provided by this Component by name. More... template<typename T > const Input < T > & getInput (const std::string &name) const Get a concrete Input that you can directly ask for its values. More... const AbstractOutput & getOutput (const std::string &name) const Get the Output provided by this Component by name. More... AbstractOutput & updOutput (const std::string &name) Get a writable reference to an Output",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "217bb049-c174-47b4-a823-dd08bb7e5a4d",
    "document_id": "doc_190",
    "content": "as an std::vector. More... const AbstractInput & getInput (const std::string &name) const Get an Input provided by this Component by name. More... AbstractInput & updInput (const std::string &name) Get a writable reference to an Input provided by this Component by name. More... template<typename T > const Input < T > & getInput (const std::string &name) const Get a concrete Input that you can directly ask for its values. More... const AbstractOutput & getOutput (const std::string &name) const Get the Output provided by this Component by name. More... AbstractOutput & updOutput (const std::string &name) Get a writable reference to an Output provided by this Component by name. More... SimTK::IteratorRange< OutputConstIterator > getOutputs () const Iterate through all Outputs of this component. More... int getModelingOption (const SimTK::State &state, const std::string &name) const Get a ModelingOption flag for this Component by name. More... void setModelingOption (SimTK::State &state, const std::string &name, int flag) const Set the value of a ModelingOption flag for this Component . More... template<typename T > const T & getInputValue (const SimTK::State &state, const std::string &name) const Get the Input value that this component is dependent on. More... template<typename T > const T & getOutputValue (const SimTK::State &state, const std::string &name) const Get the Output value provided by this Component by name. More... double getStateVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable allocated by this Component . More... double getStateVariableValue (const SimTK::State &state, const ComponentPath &path) const Get the value of a state variable allocated by this Component . More... void setStateVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed by this Component . More... double getDiscreteVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a discrete variable allocated by this Component by name. More... void setDiscreteVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a discrete variable allocated by this Component by name. More... template<class T > SimTK::CacheEntryIndex getCacheVariableIndex (const CacheVariable < T > &cv) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... SimTK::CacheEntryIndex getCacheVariableIndex (const std::string &name) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a cache variable allocated by this Component by name. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Get the value of a cache variable allocated by this Component . More... template<typename T > void",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8564ccd3-2124-45eb-ad8b-42340b0af00a",
    "document_id": "doc_190",
    "content": "&cv) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... SimTK::CacheEntryIndex getCacheVariableIndex (const std::string &name) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a cache variable allocated by this Component by name. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Get the value of a cache variable allocated by this Component . More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const std::string &k, T value) const Set the value of a cache variable, identified by name , to a new value and mark the cache variable as valid. More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv, T value) const Set the value of a cache variable to a new value and mark the cache variable as valid. More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const std::string &name) const Returns a mutable reference to the value of a cache variable identified by name . More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Returns a mutable reference to the value of a cache variable. More... bool isCacheVariableValid (const SimTK::State &state, const std::string &name) const Returns true if the cache variable, identified by name , is valid. More... template<class T > bool isCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Returns true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as invalid. More... template<class T > void markCacheVariableInvalid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as invalid. More... const Component & getOwner () const Access the owner of this Component . More... bool hasOwner () const (For advanced users) Check if this Component has an owner. More... const Component & getRoot () const Obtain the root Component, which is this component if it is orphaned. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "016550fb-2b02-4a7a-96d5-802e6edce2f0",
    "document_id": "doc_190",
    "content": "getRoot () const Obtain the root Component, which is this component if it is orphaned. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a6b1468b-6c2d-4c93-adff-65f5d17dae28",
    "document_id": "doc_190",
    "content": "the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef Force Self This typedef might be useful within the member functions of this class. More... typedef ModelComponent Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::ModelComponent typedef ModelComponent Self This typedef might be useful within the member functions of this class. More... typedef Component Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Component typedef Component Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... typedef std::map< std::string, SimTK::ClonePtr< AbstractOutput > >::const_iterator OutputConstIterator Define OutputConstIterator for convenience.",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "38d111ef-bc68-43b3-a116-f924669ed21f",
    "document_id": "doc_190",
    "content": "More... typedef ModelComponent Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::ModelComponent typedef ModelComponent Self This typedef might be useful within the member functions of this class. More... typedef Component Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Component typedef Component Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... typedef std::map< std::string, SimTK::ClonePtr< AbstractOutput > >::const_iterator OutputConstIterator Define OutputConstIterator for convenience. More... Protected Member Functions Force () Default constructor sets up Force-level properties; can only be called from a derived class constructor. More... Force (SimTK::Xml::Element &node) Deserialization from XML, necessary so that derived classes can (de)serialize. More... void extendInitStateFromProperties (SimTK::State &state) const override Subclass should override; be sure to invoke Super::extendInitStateFromProperties() at the beginning of the overriding method. More... void extendAddToSystem (SimTK::MultibodySystem &system) const override Default is to create a ForceAdapter which is a SimTK::Force::Custom as the underlying computational component. More... void extendSetPropertiesFromState (const SimTK::State &state) override Subclass should override; be sure to invoke Force::extendSetPropertiesFromState() at the beginning of the overriding method. More... virtual void computeForce (const SimTK::State &state, SimTK::Vector_< SimTK::SpatialVec > &bodyForces, SimTK::Vector &generalizedForces) const Subclasses must implement this method to compute the forces that should be applied to bodies and generalized speeds. More... virtual double computePotentialEnergy (const SimTK::State &state) const Subclasses may optionally override this method to compute a contribution to the potential energy of the system. More... void applyForceToPoint (const SimTK::State &state, const PhysicalFrame &body, const SimTK::Vec3 &point, const SimTK::Vec3 &force, SimTK::Vector_< SimTK::SpatialVec > &bodyForces) const Apply a force at a particular point (a \"station\") on a given body. More... void applyTorque (const SimTK::State &state, const PhysicalFrame &body, const SimTK::Vec3 &torque, SimTK::Vector_< SimTK::SpatialVec > &bodyForces) const Apply a torque to a particular body. More... void applyGeneralizedForce (const SimTK::State &state, const Coordinate &coord, double force, SimTK::Vector &generalizedForces) const Apply a generalized force. More... void updateFromXMLNode (SimTK::Xml::Element &node, int versionNumber) override Handle a change in XML syntax for Sockets. More... Protected Member Functions inherited from OpenSim::ModelComponent const SimTK::Vec3 & getScaleFactors (const ScaleSet &scaleSet, const Frame &frame) const Get the scale factors corresponding to the base OpenSim::Body of the specified Frame . More... virtual void extendPreScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... virtual void extendScale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... virtual void extendPostScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void updateFromXMLNode (SimTK::Xml::Element &aNode, int versionNumber) override Handle a change in XML syntax for Sockets. More... void extendFinalizeFromProperties () override Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. More... virtual void extendConnectToModel (",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f5a18c39-8de8-4965-9a0f-a8396be91a52",
    "document_id": "doc_190",
    "content": "invoked on all ModelComponents in the Model . More... virtual void extendScale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... virtual void extendPostScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void updateFromXMLNode (SimTK::Xml::Element &aNode, int versionNumber) override Handle a change in XML syntax for Sockets. More... void extendFinalizeFromProperties () override Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. More... virtual void extendConnectToModel ( Model &model) Perform any necessary initializations required to connect the component into the Model , and check for error conditions. More... Protected Member Functions inherited from OpenSim::Component SimTK_DEFINE_UNIQUE_INDEX_TYPE ( MemberSubcomponentIndex ) template<class C = Component> MemberSubcomponentIndex constructSubcomponent (const std::string &name) Construct a subcomponent as a data member of this Component . More... template<class C = Component> const C & getMemberSubcomponent ( MemberSubcomponentIndex ix) const template<class C = Component> C & updMemberSubcomponent ( MemberSubcomponentIndex ix) void adoptSubcomponent ( Component *subcomponent) Adopt a component as a subcomponent of this Component . More... size_t getNumImmediateSubcomponents () const Get the number of Subcomponents immediately owned by this Component . More... size_t getNumMemberSubcomponents () const Get the number of Subcomponents that are data members of this Component . More... size_t getNumPropertySubcomponents () const Get the number of Subcomponents that are properties of this Component . More... size_t getNumAdoptedSubcomponents () const Get the number of Subcomponents adopted by this Component . More... std::vector< SimTK::ReferencePtr< const Component > > getImmediateSubcomponents () const Access this Component 's immediate subcomponents (not those owned by subcomponents) More... template<class C > const C * traversePathToComponent ( ComponentPath path) const void setNextSubcomponentInSystem (const Component &sub) const Helper method to enable Component makers to specify the order of their subcomponents to be added to the System during addToSystem() . More... void resetSubcomponentOrder () resetSubcomponentOrder clears this Component 's list of ordered subcomponents (but otherwise leaves subcomponents untouched). More... const Component & get_components (int i) const Get the value of the i-th element of the components property. More... Component & upd_components (int i) Get a writable reference to the i-th element of the components property. More... void set_components (int i, const Component &value) Set the value of the i-th element of components property. More... int append_components (const Component &value) Append an element to the components property. More... virtual void extendAddComponent ( Component *subcomponent) Perform any secondary operations, e.g. More... void initComponentTreeTraversal (const Component &root) const Build the tree of Components from this component through its descendants. More... virtual void extendAddToSystemAfterSubcomponents (SimTK::MultibodySystem &system) const Add appropriate Simbody elements (if needed) to the System after your component's subcomponents have had a chance to add themselves to the system. More... virtual void computeStateVariableDerivatives (const SimTK::State &s) const If a model component has allocated any continuous state variables using the addStateVariable() method, then computeStateVariableDerivatives() must be implemented to provide time derivatives for those states. More... void setStateVariableDerivativeValue (const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d33de4c8-d210-497a-b83c-f5145e68aad3",
    "document_id": "doc_190",
    "content": "components property. More... virtual void extendAddComponent ( Component *subcomponent) Perform any secondary operations, e.g. More... void initComponentTreeTraversal (const Component &root) const Build the tree of Components from this component through its descendants. More... virtual void extendAddToSystemAfterSubcomponents (SimTK::MultibodySystem &system) const Add appropriate Simbody elements (if needed) to the System after your component's subcomponents have had a chance to add themselves to the system. More... virtual void computeStateVariableDerivatives (const SimTK::State &s) const If a model component has allocated any continuous state variables using the addStateVariable() method, then computeStateVariableDerivatives() must be implemented to provide time derivatives for those states. More... void setStateVariableDerivativeValue (const SimTK::State &state, const std::string &name, double deriv) const Set the derivative of a state variable by name when computed inside of this Component 's computeStateVariableDerivatives() method. More... virtual void extendRealizeTopology (SimTK::State &state) const Obtain state resources that are needed unconditionally, and perform computations that depend only on the system topology. More... virtual void extendRealizeModel (SimTK::State &state) const Obtain and name state resources (like state variables allocated by an underlying Simbody component) that may be needed, depending on modeling options. More... virtual void extendRealizeInstance (const SimTK::State &state) const Perform computations that depend only on instance variables, like lengths and masses. More... virtual void extendRealizeTime (const SimTK::State &state) const Perform computations that depend only on time and earlier stages. More... virtual void extendRealizePosition (const SimTK::State &state) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). More... virtual void extendRealizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... virtual void extendRealizeDynamics (const SimTK::State &state) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. More... virtual void extendRealizeAcceleration (const SimTK::State &state) const Perform computations that may depend on applied forces. More... virtual void extendRealizeReport (const SimTK::State &state) const Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. More... void addModelingOption (const std::string &optionName, int maxFlagValue) const Add a modeling option (integer flag stored in the State) for use by this Component . More... void addStateVariable (const std::string &stateVariableName, const SimTK::Stage &invalidatesStage=SimTK::Stage::Dynamics, bool isHidden=false) const Add a continuous system state variable belonging to this Component , and assign a name by which to refer to it. More... void addStateVariable ( Component::StateVariable *stateVariable) const The above method provides a convenient interface to this method, which automatically creates an 'AddedStateVariable' and allocates resources in the SimTK::State for this variable. More... void addDiscreteVariable (const std::string &discreteVariableName, SimTK::Stage invalidatesStage) const Add a system discrete variable belonging to this Component , give it a name by which it can be referenced, and declare the lowest Stage that should be invalidated if this variable's value is changed. More... SimTK::MultibodySystem & updSystem () const Get writable reference to the MultibodySystem that",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 10,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d82bf0b9-cd82-45ca-bf15-f19d383c01c0",
    "document_id": "doc_190",
    "content": "Component , and assign a name by which to refer to it. More... void addStateVariable ( Component::StateVariable *stateVariable) const The above method provides a convenient interface to this method, which automatically creates an 'AddedStateVariable' and allocates resources in the SimTK::State for this variable. More... void addDiscreteVariable (const std::string &discreteVariableName, SimTK::Stage invalidatesStage) const Add a system discrete variable belonging to this Component , give it a name by which it can be referenced, and declare the lowest Stage that should be invalidated if this variable's value is changed. More... SimTK::MultibodySystem & updSystem () const Get writable reference to the MultibodySystem that this component is connected to. More... int getStateIndex (const std::string &name) const Get the index of a Component 's continuous state variable in the Subsystem for allocations. More... SimTK::SystemYIndex getStateVariableSystemIndex (const std::string &stateVariableName) const Get the System Index of a state variable allocated by this Component . More... const SimTK::DiscreteVariableIndex getDiscreteVariableIndex (const std::string &name) const Get the index of a Component 's discrete variable in the Subsystem for allocations. More... template<typename T > PropertyIndex constructSocket (const std::string &name, const std::string &propertyComment) Construct a specialized Socket for this Component 's dependence on another Component . More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output for a member function of the same component. More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, const T &(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) This variant handles component member functions that return the output value by const reference (const T&). More... template<typename T , typename CompType > bool constructListOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &, const std::string &channel) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output that can have multiple channels. More... bool constructOutputForStateVariable (const std::string &name) Construct an Output for a StateVariable . More... template<typename T > PropertyIndex constructInput (const std::string &name, bool isList, const std::string &propertyComment, const SimTK::Stage &requiredAtStage=SimTK::Stage::Instance) Construct an Input (socket) for this Component 's dependence on an Output signal. More... template<class T > CacheVariable < T > addCacheVariable (std::string name, T variablePrototype, SimTK::Stage dependsOnStage) const Add a state cache entry belonging to this Component to hold calculated values that must be automatically invalidated when certain state values change. More... void setOwner (const Component &owner) Set this Component's reference to its owning Component More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 11,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3e13a850-98ee-49e9-9b92-de74f44e6fa3",
    "document_id": "doc_190",
    "content": "() The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 12,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "a521c6b5-8550-4ce2-aea6-efa2962f7803",
    "document_id": "doc_190",
    "content": "an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Protected Attributes SimTK::ResetOnCopy< SimTK::ForceIndex > _index ID for the force in Simbody. More... Protected Attributes inherited from OpenSim::ModelComponent SimTK::ReferencePtr< Model > _model The model this component belongs to. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Friends class ForceAdapter Auto-generated functions static Force * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Force\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Force * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Member Functions inherited from OpenSim::ModelComponent static ModelComponent * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"ModelComponent\". More... Static Public Member Functions inherited from OpenSim::Component static Component * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Component\". More... Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 13,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "248b3627-00a7-4f0c-873d-7aed2b5d924c",
    "document_id": "doc_190",
    "content": "from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 14,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f53c3fa5-b1fd-41cb-b35a-be8cc14f977e",
    "document_id": "doc_190",
    "content": "void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Static Protected Member Functions inherited from OpenSim::Component static void prependComponentPathToConnecteePath ( Component &subcomponent) For internal use. More... Static Protected Attributes inherited from OpenSim::ModelComponent static const SimTK::Vec3 InvalidScaleFactors Returned by getScaleFactors() if the ScaleSet does not contain scale factors for the base Body associated with the specified Frame . More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description This abstract class represents a force applied to bodies or generalized coordinates during a simulation. Each subclass represents a different type of force. The actual force computation is done by a SimTK::Force, which is created by extendAddToSystem() . Author Peter Eastman Ajay Seth Member Typedef Documentation ◆ Self typedef Force OpenSim::Force::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef ModelComponent OpenSim::Force::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ Force() [1/2] OpenSim::Force::Force ( ) protected Default constructor sets up Force-level properties; can only be called from a derived class constructor. ◆ Force() [2/2] OpenSim::Force::Force ( SimTK::Xml::Element & node ) inline protected Deserialization from XML, necessary so that derived classes can (de)serialize. Member Function Documentation ◆ appliesForce() bool OpenSim::Force::appliesForce ( const SimTK::State & s ) const Return if the Force is applied (or enabled) or not. ◆ applyForceToPoint() void OpenSim::Force::applyForceToPoint ( const SimTK::State & state , const PhysicalFrame & body , const SimTK::Vec3 & point , const SimTK::Vec3 & force , SimTK::Vector_< SimTK::SpatialVec > & bodyForces ) const protected Apply a force at a particular point (a \"station\") on a given body. Note that the point",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 15,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2ccdae19-ea5d-4ba7-975d-ed1a9b22e0a9",
    "document_id": "doc_190",
    "content": "from a derived class constructor. ◆ Force() [2/2] OpenSim::Force::Force ( SimTK::Xml::Element & node ) inline protected Deserialization from XML, necessary so that derived classes can (de)serialize. Member Function Documentation ◆ appliesForce() bool OpenSim::Force::appliesForce ( const SimTK::State & s ) const Return if the Force is applied (or enabled) or not. ◆ applyForceToPoint() void OpenSim::Force::applyForceToPoint ( const SimTK::State & state , const PhysicalFrame & body , const SimTK::Vec3 & point , const SimTK::Vec3 & force , SimTK::Vector_< SimTK::SpatialVec > & bodyForces ) const protected Apply a force at a particular point (a \"station\") on a given body. Note that the point Vec3(0) is the body origin, not necessarily the center of mass whose location is maintained relative to the body origin. Although this applies a pure force to the given point, that will also result in a torque acting on the body when looking at the resultant at some other point. This method may only be called from inside computeForce() . Invoking it at any other time will produce an exception. Parameters state state used only to determine which element of bodyForces to modify body the body to apply the force to point the point at which to apply the force, specified in the body's frame force the force to apply, specified in the inertial (ground) reference frame bodyForces the set of system bodyForces to which this force is added ◆ applyGeneralizedForce() void OpenSim::Force::applyGeneralizedForce ( const SimTK::State & state , const Coordinate & coord , double force , SimTK::Vector & generalizedForces ) const protected Apply a generalized force. This method may only be called from inside computeForce() . Invoking it at any other time will produce an exception. Parameters state state used only to determine which element of generalizedForces to modify coord the generalized coordinate to which the force should be applied force the (scalar) force to apply generalizedForces the set of system generalizedForces to which the force is to be added ◆ applyTorque() void OpenSim::Force::applyTorque ( const SimTK::State & state , const PhysicalFrame & body , const SimTK::Vec3 & torque , SimTK::Vector_< SimTK::SpatialVec > & bodyForces ) const protected Apply a torque to a particular body. This method may only be called from inside computeForce() . Invoking it at any other time will produce an exception. Parameters state state used only to determine which element of bodyForces to modify body the body to apply the force to torque the torque to apply, specified in the inertial frame bodyForces the set of system bodyForces to which this force is added ◆ assign() void OpenSim::Force::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Force . ◆ clone() Force * OpenSim::Force::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 16,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "63d4e2b6-c2ff-42f4-b34b-75ab3d751de9",
    "document_id": "doc_190",
    "content": "to apply, specified in the inertial frame bodyForces the set of system bodyForces to which this force is added ◆ assign() void OpenSim::Force::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Force . ◆ clone() Force * OpenSim::Force::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::ModelComponent . Implemented in OpenSim::Millard2012AccelerationMuscle , OpenSim::EspositoMiller2018Force , OpenSim::Millard2012EquilibriumMuscle , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Blankevoort1991Ligament , OpenSim::MeyerFregly2016Force , OpenSim::ScalarActuator , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Thelen2003Muscle , OpenSim::DeGrooteFregly2016Muscle , OpenSim::AckermannVanDenBogert2010Force , OpenSim::Muscle , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::ClutchedPathSpring , OpenSim::CoordinateLimitForce , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::ExpressionBasedPointToPointForce , OpenSim::ExternalForce , OpenSim::ActivationFiberLengthMuscle , OpenSim::PathSpring , OpenSim::ExpressionBasedBushingForce , OpenSim::FunctionBasedBushingForce , OpenSim::PrescribedForce , OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::BushingForce , OpenSim::Ligament , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::TorqueActuator , OpenSim::BodyActuator , OpenSim::PointActuator , OpenSim::Thelen2003Muscle_Deprecated , OpenSim::PointToPointActuator , OpenSim::Actuator , OpenSim::ActivationCoordinateActuator , OpenSim::CoordinateActuator , OpenSim::McKibbenActuator , OpenSim::PathActuator , OpenSim::SpringGeneralizedForce , OpenSim::PointToPointSpring , OpenSim::ElasticFoundationForce , OpenSim::HuntCrossleyForce , OpenSim::ExpressionBasedCoordinateForce , and OpenSim::StationPlaneContactForce . ◆ computeForce() virtual void OpenSim::Force::computeForce ( const SimTK::State & state , SimTK::Vector_< SimTK::SpatialVec > & bodyForces , SimTK::Vector & generalizedForces ) const inline protected virtual Subclasses must implement this method to compute the forces that should be applied to bodies and generalized speeds. This is invoked by ForceAdapter to perform the force computation. Reimplemented in OpenSim::Muscle , OpenSim::Blankevoort1991Ligament , OpenSim::PrescribedForce , OpenSim::ExpressionBasedBushingForce , OpenSim::ExternalForce , OpenSim::CoordinateLimitForce , OpenSim::PathSpring , OpenSim::FunctionBasedBushingForce , OpenSim::ExpressionBasedPointToPointForce , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::PathActuator , OpenSim::Ligament , OpenSim::ActivationFiberLengthMuscle , OpenSim::SpringGeneralizedForce , OpenSim::ExpressionBasedCoordinateForce , and OpenSim::StationPlaneContactForce . ◆ computePotentialEnergy() virtual double OpenSim::Force::computePotentialEnergy ( const SimTK::State & state ) const protected virtual Subclasses may optionally override this method to compute a contribution to the potential energy of the system. The default implementation returns 0, which is appropriate for forces that do not contribute to potential energy. Reimplemented in OpenSim::Muscle , OpenSim::Blankevoort1991Ligament , OpenSim::BushingForce , and OpenSim::CoordinateLimitForce . ◆ extendAddToSystem() void OpenSim::Force::extendAddToSystem ( SimTK::MultibodySystem & system ) const override protected virtual Default is to create a ForceAdapter which is a SimTK::Force::Custom as the underlying computational component. Subclasses override to employ other SimTK::Forces; be sure to invoke Force::extendAddToSystem() at the beginning of the overriding method. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Muscle , OpenSim::Ligament , OpenSim::SmoothSphereHalfSpaceForce , and OpenSim::HuntCrossleyForce . ◆ extendInitStateFromProperties() void OpenSim::Force::extendInitStateFromProperties ( SimTK::State & state ) const override protected virtual Subclass should override; be sure to invoke Super::extendInitStateFromProperties() at the beginning of the overriding method. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Muscle . ◆ extendSetPropertiesFromState() void OpenSim::Force::extendSetPropertiesFromState ( const",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 17,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "ab784c3e-06de-4281-89f0-bff5011ae5d0",
    "document_id": "doc_190",
    "content": "OpenSim::Force::extendAddToSystem ( SimTK::MultibodySystem & system ) const override protected virtual Default is to create a ForceAdapter which is a SimTK::Force::Custom as the underlying computational component. Subclasses override to employ other SimTK::Forces; be sure to invoke Force::extendAddToSystem() at the beginning of the overriding method. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Muscle , OpenSim::Ligament , OpenSim::SmoothSphereHalfSpaceForce , and OpenSim::HuntCrossleyForce . ◆ extendInitStateFromProperties() void OpenSim::Force::extendInitStateFromProperties ( SimTK::State & state ) const override protected virtual Subclass should override; be sure to invoke Super::extendInitStateFromProperties() at the beginning of the overriding method. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Muscle . ◆ extendSetPropertiesFromState() void OpenSim::Force::extendSetPropertiesFromState ( const SimTK::State & state ) override protected virtual Subclass should override; be sure to invoke Force::extendSetPropertiesFromState() at the beginning of the overriding method. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Muscle . ◆ get_appliesForce() const bool& OpenSim::Force::get_appliesForce ( ) const inline Get the value of the appliesForce property. ◆ getClassName() static const std::string& OpenSim::Force::getClassName ( ) inline static This returns \"Force\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::Force::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::ModelComponent . Implemented in OpenSim::Millard2012AccelerationMuscle , OpenSim::EspositoMiller2018Force , OpenSim::Millard2012EquilibriumMuscle , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Blankevoort1991Ligament , OpenSim::MeyerFregly2016Force , OpenSim::ScalarActuator , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Thelen2003Muscle , OpenSim::DeGrooteFregly2016Muscle , OpenSim::AckermannVanDenBogert2010Force , OpenSim::Muscle , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::ClutchedPathSpring , OpenSim::CoordinateLimitForce , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::ExpressionBasedPointToPointForce , OpenSim::ExternalForce , OpenSim::ActivationFiberLengthMuscle , OpenSim::PathSpring , OpenSim::ExpressionBasedBushingForce , OpenSim::FunctionBasedBushingForce , OpenSim::PrescribedForce , OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::BushingForce , OpenSim::Ligament , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::TorqueActuator , OpenSim::BodyActuator , OpenSim::PointActuator , OpenSim::Thelen2003Muscle_Deprecated , OpenSim::PointToPointActuator , OpenSim::Actuator , OpenSim::ActivationCoordinateActuator , OpenSim::CoordinateActuator , OpenSim::McKibbenActuator , OpenSim::PathActuator , OpenSim::SpringGeneralizedForce , OpenSim::PointToPointSpring , OpenSim::ElasticFoundationForce , OpenSim::HuntCrossleyForce , OpenSim::ExpressionBasedCoordinateForce , and OpenSim::StationPlaneContactForce . ◆ getRecordLabels() virtual OpenSim::Array <std::string> OpenSim::Force::getRecordLabels ( ) const inline virtual Methods to query a Force for the value actually applied during simulation. The names of the quantities (column labels) is returned by this first function getRecordLabels() . Reimplemented in OpenSim::Blankevoort1991Ligament , OpenSim::PrescribedForce , OpenSim::ExpressionBasedBushingForce , OpenSim::ScalarActuator , OpenSim::BushingForce , OpenSim::CoordinateLimitForce , OpenSim::PathSpring , OpenSim::FunctionBasedBushingForce , OpenSim::ExternalForce , OpenSim::Ligament , OpenSim::ExpressionBasedPointToPointForce , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::PointToPointSpring , OpenSim::ExpressionBasedCoordinateForce , OpenSim::ElasticFoundationForce , OpenSim::HuntCrossleyForce , OpenSim::SpringGeneralizedForce , and OpenSim::StationPlaneContactForce . ◆ getRecordValues() virtual OpenSim::Array <double> OpenSim::Force::getRecordValues ( const SimTK::State & state ) const inline virtual Given SimTK::State object extract all the values necessary to report forces, application location frame, etc. used in conjunction with getRecordLabels and should return same size Array . Reimplemented in OpenSim::Blankevoort1991Ligament , OpenSim::PrescribedForce , OpenSim::ScalarActuator , OpenSim::ExpressionBasedBushingForce , OpenSim::CoordinateLimitForce ,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 18,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b081fbf7-0167-4dd6-afcf-c06e6bf047e0",
    "document_id": "doc_190",
    "content": "returned by this first function getRecordLabels() . Reimplemented in OpenSim::Blankevoort1991Ligament , OpenSim::PrescribedForce , OpenSim::ExpressionBasedBushingForce , OpenSim::ScalarActuator , OpenSim::BushingForce , OpenSim::CoordinateLimitForce , OpenSim::PathSpring , OpenSim::FunctionBasedBushingForce , OpenSim::ExternalForce , OpenSim::Ligament , OpenSim::ExpressionBasedPointToPointForce , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::PointToPointSpring , OpenSim::ExpressionBasedCoordinateForce , OpenSim::ElasticFoundationForce , OpenSim::HuntCrossleyForce , OpenSim::SpringGeneralizedForce , and OpenSim::StationPlaneContactForce . ◆ getRecordValues() virtual OpenSim::Array <double> OpenSim::Force::getRecordValues ( const SimTK::State & state ) const inline virtual Given SimTK::State object extract all the values necessary to report forces, application location frame, etc. used in conjunction with getRecordLabels and should return same size Array . Reimplemented in OpenSim::Blankevoort1991Ligament , OpenSim::PrescribedForce , OpenSim::ScalarActuator , OpenSim::ExpressionBasedBushingForce , OpenSim::CoordinateLimitForce , OpenSim::BushingForce , OpenSim::PathSpring , OpenSim::ExternalForce , OpenSim::Ligament , OpenSim::FunctionBasedBushingForce , OpenSim::ExpressionBasedPointToPointForce , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::PointToPointSpring , OpenSim::ExpressionBasedCoordinateForce , OpenSim::ElasticFoundationForce , OpenSim::HuntCrossleyForce , OpenSim::SpringGeneralizedForce , and OpenSim::StationPlaneContactForce . ◆ hasVisualPath() virtual bool OpenSim::Force::hasVisualPath ( ) const inline virtual Return a flag indicating whether the Force is applied along a path that can be visualized. If you override this method to return true for a specific subclass, it must also implement the getPath() method. Reimplemented in OpenSim::Blankevoort1991Ligament , OpenSim::PathSpring , OpenSim::Ligament , and OpenSim::PathActuator . ◆ safeDownCast() static Force * OpenSim::Force::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Force.safeDownCast(obj) . This is equivalent to dynamic_cast<Force*>(obj) in C++. ◆ set_appliesForce() void OpenSim::Force::set_appliesForce ( const bool & value ) inline Set the value of the appliesForce property. ◆ setAppliesForce() void OpenSim::Force::setAppliesForce ( SimTK::State & s , bool applyForce ) const Set whether or not the Force is applied. ◆ shouldBeParallelized() virtual bool OpenSim::Force::shouldBeParallelized ( ) const inline virtual Tell SimBody to parallelize this force. Should be set to true for any forces that will take time to complete their calcForce method. Note that all forces that set this flag to false will be put in series on a thread that is running in parallel with other forces that marked this flag as true. ◆ upd_appliesForce() bool& OpenSim::Force::upd_appliesForce ( ) inline Get a writable reference to the appliesForce property. ◆ updateFromXMLNode() void OpenSim::Force::updateFromXMLNode ( SimTK::Xml::Element & node , int versionNumber ) override protected virtual Handle a change in XML syntax for Sockets. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::PointToPointSpring , and OpenSim::PrescribedForce . Friends And Related Function Documentation ◆ ForceAdapter friend class ForceAdapter friend Member Data Documentation ◆ _index SimTK::ResetOnCopy<SimTK::ForceIndex> OpenSim::Force::_index protected ID for the force in Simbody. OpenSim Property, Socket, Output, Input Documentation ◆ appliesForce bool OpenSim::Force::appliesForce \"Flag indicating whether the force is applied or not. If true the force\" \"is applied to the MultibodySystem otherwise the force is not applied.\" \"NOTE: Prior to OpenSim 4.0, this behavior was controlled by the \" \"'isDisabled' property, where 'true' meant that force was not being \" \"applied. Thus, if 'isDisabled' is true, then 'appliesForce` is false.\" This property appears in XML files under the tag <appliesForce> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_appliesForce() ,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 19,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bf5cab44-5f56-4c62-8eb9-3cad4f9a0b79",
    "document_id": "doc_190",
    "content": "in Simbody. OpenSim Property, Socket, Output, Input Documentation ◆ appliesForce bool OpenSim::Force::appliesForce \"Flag indicating whether the force is applied or not. If true the force\" \"is applied to the MultibodySystem otherwise the force is not applied.\" \"NOTE: Prior to OpenSim 4.0, this behavior was controlled by the \" \"'isDisabled' property, where 'true' meant that force was not being \" \"applied. Thus, if 'isDisabled' is true, then 'appliesForce` is false.\" This property appears in XML files under the tag <appliesForce> . This property was generated with the OpenSim_DECLARE_PROPERTY macro; see Property to learn about the property system. See also get_appliesForce() , upd_appliesForce() , set_appliesForce() ◆ potential_energy double OpenSim::Force::potential_energy Provides the value of computePotentialEnergy() and is available at stage SimTK::Stage::Velocity . This output was generated with the OpenSim_DECLARE_OUTPUT macro. The documentation for this class was generated from the following file: OpenSim/Simulation/Model/Force.h OpenSim Force Generated on Thu Mar 21 2024 15:02:53 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Force.html",
      "title": "API: OpenSim::Force Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Force.html"
      ],
      "content_type": "api",
      "position": 20,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e68e9fbd-eea4-4101-8d7d-8b290eec2bc5",
    "document_id": "doc_85",
    "content": "EMG-informed Computed Muscle Control for Dynamic Simulations of Movement Share Follow Project Follow publicly Follow privately Unfollow See followers (14) List Map More info 386 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Develop a modified version of Computed Muscle Control (CMC) based on filtered EMG data to track the desired muscles and to create dynamic simulations of movement. Download Latest Releases EMG-informed CMC: EMG-informed CMC.zip This project is an EMG-informed control plug-in that interfaces with OpenSim to provide robust estimates of muscles activation patterns. 1,668 downloads 5 forum posts 14 followers Last updated Jul 31, 2011 Project Statistics Join Mailing Lists Suggest Idea Emel Demircan Downloads This project contains the motion capture, force plate, EMG data of a normal human walking together with the three-dimensional simulations (IK, RRA and CMC results) and the human model. To download the simulations and associated documentation, please see the Downloads section of this project. Please see https://simtk.org/home/opensim for more information on OpenSim and its branch /Branches/JasonEmel485Project/ in order to reproduce or modify the simulations . These simulations were generated using OpenSim version 1.5, which is the software version we recommend to those using these simulations. See all Downloads People also viewed Neuromusculoskeletal Modeling (NMSM) Pipeline How much muscle strength is required to walk in... Platform for Dynamic Simulation and Control of... Efficient Methods for Multi-Domain Biomechanical... Muscle-actuated Simulation of Human Running Simbody: Multibody Physics API A three-dimensional musculoskeletal model of the dog Dynamic Simulation of Movement Based on OpenSim and... See all Dynamic Arm Simulator Are subject-specific musculoskeletal... An OpenSim plugin to minimize joint reaction forces and... MB Knee: Multibody Models of the Human Knee Batch OpenSim Processing Scripts (BOPS) Functional Electrical Stimulation... CT-scan based extended dynamic foot model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/emg",
      "title": "SimTK: EMG-informed Computed Muscle Control for Dynamic Simulations of Movement: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "emg"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "0027ceed-7557-4976-9ebf-7ad5bb0bea1b",
    "document_id": "doc_105",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/templates",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "templates"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "530ba9a6-ebc2-4221-b5b6-5122b04880ef",
    "document_id": "doc_73",
    "content": "Muscle contributions to mass center accelerations over a range of running speeds Share Follow Project Follow publicly Follow privately Unfollow See followers (9) List Map More info 603 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Hamner SR and Delp SL. Muscle contributions to fore-aft and vertical body mass center accelerations over a range of running speeds. Journal of Biomechanics; 46(4), 780-7. (2013) Abstract View Running is a bouncing gait in which the body mass center slows and lowers during the first half of the stance phase; the mass center is then accelerated forward and upward into flight during the second half of the stance phase. Muscle-driven simulations can be analyzed to determine how muscle forces accelerate the body mass center. However, muscle-driven simulations of running at different speeds have not been previously developed, and it remains unclear how muscle forces modulate mass center accelerations at different running speeds. Thus, to examine how muscles generate accelerations of the body mass center, we created three-dimensional muscle-driven simulations of ten subjects running at 2.0, 3.0, 4.0, and 5.0 m/s. An induced acceleration analysis determined the contribution of each muscle to mass center accelerations. Our simulations included arms, allowing us to investigate the contributions of arm motion to running dynamics. Analysis of the simulations revealed that soleus provides the greatest upward mass center acceleration at all running speeds; soleus generates a peak upward acceleration of 19.8 m/s/s (i.e., the equivalent of approximately 2.0 bodyweights of ground reaction force) at 5.0 m/s. Soleus also provided the greatest contribution to forward mass center acceleration, which increased from 2.5 m/s/s at 2.0 m/s to 4.0 m/s/s at 5.0 m/s. At faster running speeds, greater velocity of the legs produced larger angular momentum about the vertical axis passing through the body mass center; angular momentum about this vertical axis from arm swing simultaneously increased to counterbalance the legs. We provide open-access to data and simulations from this study for further analysis in OpenSim at simtk.org/home/nmbl_running, enabling muscle actions during running to be studied in unprecedented detail. Repository of experimental data (i.e., motion capture, EMG, GRFs), subject-specific models, and muscle-driven simulation results of 10 male subject running across a range of speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Download Latest Releases Raw EMG Data: RAW_EMG_DATA.zip Subject 01: subject01.zip Subject 02: subject02.zip Subject 03: subject03.zip Subject 04: subject04.zip Subject 08: subject08.zip Subject 10: subject10.zip Subject 11: subject11.zip Subject 17: subject17.zip Subject 19: subject19.zip Subject 20: subject20.zip License: Raw EMG Data , Subject",
    "metadata": {
      "source": "https://simtk.org/projects/nmbl_running",
      "title": "SimTK: Muscle contributions to mass center accelerations over a range of running speeds: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmbl_running"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9b550f4e-dd37-42bc-bb1e-67a1e96470ed",
    "document_id": "doc_73",
    "content": "and simulations from this study for further analysis in OpenSim at simtk.org/home/nmbl_running, enabling muscle actions during running to be studied in unprecedented detail. Repository of experimental data (i.e., motion capture, EMG, GRFs), subject-specific models, and muscle-driven simulation results of 10 male subject running across a range of speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Download Latest Releases Raw EMG Data: RAW_EMG_DATA.zip Subject 01: subject01.zip Subject 02: subject02.zip Subject 03: subject03.zip Subject 04: subject04.zip Subject 08: subject08.zip Subject 10: subject10.zip Subject 11: subject11.zip Subject 17: subject17.zip Subject 19: subject19.zip Subject 20: subject20.zip License: Raw EMG Data , Subject 01 , Subject 02 , Subject 03 , Subject 04 , Subject 08 , Subject 10 , Subject 11 , Subject 17 , Subject 19 , Subject 20 These simulations were created using OpenSim and the workflow included Scale, Inverse Kinematics (IK), Reduced Residual Algorithm (RRA), Computed Muscle Control (CMC), and Induced Acceleration Analysis (IAA). The following resources provide instructions for using these tools and information on how to generate and evaluate musculoskeletal simulations: • OpenSim User's Guide | http://stanford.io/17cia3U • OpenSim Support Webpage | http://stanford.io/17ciwrn • Webinar on Simulations of Running | http://bit.ly/oDIUOa Muscle contributions to fore-aft and vertical body mass center accelerations over a range of running speeds from Sam Hamner on Vimeo . The goal of this study was to determine how muscles and arm swing affect dynamics of the body at different running speeds. Specifically, we determined how muscles contribute to mass center accelerations during the stance phase of running, and how the arms act to counterbalance the motion of the legs. We achieved this goal by creating and analyzing muscle-driven, forward dynamic simulations of ten subjects running across a range of speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. An induced acceleration analysis determined the contribution of each muscle to mass center accelerations. Our simulations also included arm motion, allowing us to investigate the contributions of arm swing to running dynamics. These simulations use experimental data as inputs, so we also collected data to characterize joint angles, joint moments, and ground reaction forces at different running speeds. 4,002 downloads 3 forum posts 9 followers Last updated Jan 17, 2024 Project Statistics Join Mailing Lists Suggest Idea Sam Hamner Scott Delp Downloads This project serves as a repository of experimental data (i.e., motion capture, EMG, GRFs), subject-specific models, and resulting muscle-driven simulation results for 10 male subjects running at multiple speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Data was collected on an instrumented treadmill in the Human Performance Lab at Stanford University. All subjects were experienced runners, each reporting to run at least 30 miles per week. See all Downloads People also viewed Muscle-actuated Simulation of Human Running Hamstring Function During Running Simbody: Multibody Physics API Sam's Simulations A three-dimensional musculoskeletal model of the dog Multiple Speed Walking Simulations Examining Muscle Forces during Sit to Stand Transfer... Efficient Methods for Multi-Domain Biomechanical... See all OpenArm: Volumetric & Time Series Models of",
    "metadata": {
      "source": "https://simtk.org/projects/nmbl_running",
      "title": "SimTK: Muscle contributions to mass center accelerations over a range of running speeds: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmbl_running"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "69d54b6f-edc0-4f96-89e3-16d8e11b004a",
    "document_id": "doc_73",
    "content": "10 male subjects running at multiple speeds: 2 m/s, 3 m/s, 4 m/s, and 5 m/s. Data was collected on an instrumented treadmill in the Human Performance Lab at Stanford University. All subjects were experienced runners, each reporting to run at least 30 miles per week. See all Downloads People also viewed Muscle-actuated Simulation of Human Running Hamstring Function During Running Simbody: Multibody Physics API Sam's Simulations A three-dimensional musculoskeletal model of the dog Multiple Speed Walking Simulations Examining Muscle Forces during Sit to Stand Transfer... Efficient Methods for Multi-Domain Biomechanical... See all OpenArm: Volumetric & Time Series Models of Muscle... MB Knee: Multibody Models of the Human Knee Chand's Simulations Multidimensional Cubic B-Spline OpenSim Analysis of arm swing during human walking Calibrated EMG-Informed Neuromusculoskeletal... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/nmbl_running",
      "title": "SimTK: Muscle contributions to mass center accelerations over a range of running speeds: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmbl_running"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cfe1c079-6e83-490e-8d15-a52731dfc1b6",
    "document_id": "doc_83",
    "content": "1) develop a model that would be adequate in analyzing the sit to stand (STS) transfer motion 2) examine individual muscle forces, their contributions to the acceleration of the center of mass, as well as inter-limb differences in muscle forces produced during the STS transfer in a young, healthy population. Download Latest Releases osufullbody_sts: Caruthers_FullBodyModel2016_Scaled_Arms.osim osufullbody_sts: Geometry_FINAL.zip Sample STS Transfer Data: Sample Data.zip License: Sample STS Transfer Data Our STS transfer analysis required a three-dimensional musculoskeletal model that had lower extremities, flexibility in the lumbar vertebrae, and arms. Capturing the dynamics of the lower back and arms was critical for 1) ensuring more dynamically accurate calculations of muscle forces and induced accelerations and 2) developing benchmark simulations for young healthy adults using a model that could be applied in future studies to capture possible compensatory strategies (e.g., the use of arms or torso) in various populations completing the STS transfer. Because no previously developed model met these criteria, we created a three-dimensional musculoskeletal model, the Full Body Model 2016, by combining these models: Lower Limb Model 2010, Musculoskeletal Model of the Lumbar Spine, MoBL-ARMS Upper Limb Model, and Head and Neck Musculoskeletal Biomechanics Model. It has 46 degrees of freedom with 194 Hill-type muscle-tendon actuators. A description of how the model was assembled and evaluated is in Appendix 1 of our manuscript, Muscle Forces and Their Contributions to Vertical and Horizontal Acceleration of the Center of Mass during Sit-to-Stand Transfer in Young, Healthy Adults (see publications). Watch this video to get a sneak peek of STS transfer simulation with the Full Body Model 2016. http://www.youtube.com/v/j-o94qfJKvM &showsearch=0&rel=0&fs=1&autoplay=0≈=%2526fmt%3D18\" name=\"movie\" /> View on YouTube 1,813 downloads 4 forum posts 10 followers Last updated Apr 27, 2020 Project Statistics Join Mailing Lists Suggest Idea Elena Caruthers People also viewed Muscle contributions to mass center... Analysis of arm swing during human walking Sam's Simulations OpenSim A three-dimensional musculoskeletal model of the dog Evertor and invertor muscle co-activation... Multiple Speed Walking Simulations Spasticity model in OpenSim See all OpenSim Moco Hamstring Function During Running Full-body Musculoskeletal Model of the Lumbar... SPAN: Simulated parallel annealing by neighborhood Multidimensional Cubic B-Spline Chand's Simulations Tibial forces in independently ambulatory children... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/osufullbody_sts",
      "title": "SimTK: Examining Muscle Forces during Sit to Stand Transfer with Full Body Model 2016: Project Home",
      "section": "Examining Muscle Forces during Sit to Stand Transfer with Full Body Model 2016 Share Follow Project Follow publicly Follow privately Unfollow See followers (10) List Map More info 951 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow The purpose of this study was to:",
      "hierarchy": [
        "projects",
        "osufullbody_sts"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "85d44edf-5810-435a-b52b-f48f4409fd72",
    "document_id": "doc_27",
    "content": "Enables you to easily share your software, data, and models Tracks the impact of the resources you share Provides the infrastructure so you can support and grow a community around your projects Connects you and your project to thousands of researchers working at the intersection of biology, medicine, and computations Individuals have created SimTK projects to meet publisher and funding agencies’ software and data sharing requirements, run scientific challenges, create a collection of their community’s resources, and much more. Explore projects using the search bar above Join SimTK and create your own projects SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/whatIsSimtk.php",
      "title": "SimTK",
      "section": "SimTK What is SimTK? SimTK is a free project-hosting platform for the biomedical computation community that:",
      "hierarchy": [
        "whatIsSimtk.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e33620cf-2ac8-4d8f-a148-2c4f5a86763c",
    "document_id": "doc_0",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Provide easy-to-use, extensible software for modeling, simulating, controlling, and analyzing the neuromusculoskeletal system. Download Latest Releases OpenSim: OpenSim-4.5-Mac.pkg OpenSim: OpenSim-4.5-win64.exe OpenSim Models and Examples: OptimalJump.zip OpenSim Models and Examples: StaticOpt_JointReaction.zip OpenSim Models and Examples: WorkingWithStaticOptimization.zip License: Github Source Code Repository , OpenSim , OpenSim Models and Examples , OpenSim Source Code OpenSim is a freely available, user extensible software system that lets users develop models of musculoskeletal structures and create dynamic simulations of movement. Find out how to join the community and see the work being performed using OpenSim at opensim.stanford.edu . Access all of our OpenSim resources at the new Support Site . Watch our Introductory Video get an overview of the OpenSim project and see how modeling can be used to help plan surgery for children with cerebral palsy. 836,655 downloads 25011 forum posts 313 followers Last updated Mar 20, 2025 Project Statistics Join Mailing Lists Suggest Idea Scott Delp Jennifer Hicks Ayman Habib Carmichael Ong Ajay Seth Thomas Uchida Related Projects The project owner recommends the following other projects: Neuromuscular Models Library OpenSim Utilities OpenSim Motion and Simulation Data C3D Extraction Toolbox The Osteoporotic Virtual Physiological Human The Musculoskeletal Modeler's Kitchen People also viewed Muscle contributions to mass center... Analysis of arm swing during human walking Sam's Simulations Spasticity model in OpenSim Chand's Simulations Examining Muscle Forces during Sit to Stand Transfer... EMG-informed Computed Muscle Control for Dynamic... How much muscle strength is required to walk in... See all OpenArm: Volumetric & Time Series Models of Muscle... OpenSim plugin to extract the muscle lines of action Dynamic Simulation of Movement Based on OpenSim and... Hamstring Function During Running Multidimensional Cubic B-Spline Tibial forces in independently ambulatory children... Neuromuscular Models for the Predictive... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/opensim",
      "title": "SimTK: OpenSim: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "opensim"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b31268dc-4d25-4f42-9b20-81efd078ee9e",
    "document_id": "doc_50",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Required fields outlined in blue",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=322&group_id=91&func=add",
      "title": "SimTK: OpenSim: Submit New",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4cdf9d34-8d6e-4b23-b84a-19be30533680",
    "document_id": "doc_10",
    "content": "RNA Biocomputational methods complement experimental techniques to expand our understanding of RNA, molecules vital to the normal expression of genes within our bodies. Featured projects Recently updated projects total projects 68 projects with downloads Search projects in this category News New package added: MMB 3.14 for Windows MMB (MacroMoleculeBuilder) Apr 7, 2021 ForceBalance version 1.7.0 released! ForceBalance : Systematic Force Field Optimization Dec 3, 2019 OpenSim gets high marks as a multibody system simulator Simbody: Multibody Physics API Aug 3, 2015 Publications P. Eastman, J. Swails, J. D. Chodera, R. T. McGibbon, Y. Zhao, K. A. Beauchamp, L.-P. Wang, A. C. Simmonett, M. P. Harrigan, C. D. Stern, R. P. Wiewiora, B. R. Brooks, and V. S. Pande. \"OpenMM 7: Rapid development of high performance algorithms for molecular dynamics.\" PLOS Comp. Biol. 13(7): e1005659. Tek, A., Korostelev, A.A. and Flores, S.C. (2015) MMB-GUI: a fast morphing method demonstrates a possible ribosomal tRNA translocation trajectory. Nucleic Acids Res., 10.1093/nar/gkv1457. Wang, L-P., Martinez, T. J. and Pande, V.S. \"Building force fields - an automatic, systematic and reproducible approach\", submitted. Discussion THIS FORUM IS MOVING TO GITHUB! OpenMM Feb 24, 2025 Re: Help Needed with Drude Modeling for Molten Salts in OpenMM OpenMM Feb 19, 2025 Re: Combining AMD integrator with Langevin integrator OpenMM Feb 13, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=307&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "669ca166-4218-479d-9f17-1cef4f76e706",
    "document_id": "doc_111",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090577/Getting+Started",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090577",
        "Getting+Started"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b2798312-6a0f-404d-aecc-ed48bd3abff9",
    "document_id": "doc_87",
    "content": "How much muscle strength is required to walk in a crouch gait? Share Follow Project Follow publicly Follow privately Unfollow See followers (6) List Map More info 608 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Use musculoskeletal modeling to determine how robost unimpaired and crouch gait are to weakness of individual muscle groups. Individuals with cerebral palsy (CP) who walk in a crouch gait often receive strength training as part of their therapy. An underlying assumption is that these individuals do not have adequate muscle strength to walk in an upright posture, and strengthening weak muscle groups will enable these individuals to improve their knee extension. However, outcomes from strength training programs for individuals with cerebral palsy and crouch gait are inconsistent. The purpose of this project is to determine how much strength is required to walk in a crouch gait and compare this to unimpaired gait. Identifying which muscle groups require more or less force to maintain a crouch gait versus an upright gait can provide guidance for designing effective strength training programs for individuals with CP who walk in a crouch gait. 0 downloads 3 forum posts 6 followers Last updated Feb 8, 2011 Project Statistics Join Mailing Lists Suggest Idea Katherine Steele Marjolein van der Krogt Scott Delp People also viewed EMG-informed Computed Muscle Control for Dynamic... Simulations of Crouch Gait Calibrated EMG-Informed Neuromusculoskeletal... Dynamic Arm Simulator Platform for Dynamic Simulation and Control of... Hip Musculoskeletal Model Efficient Methods for Multi-Domain Biomechanical... OpenArm: Volumetric & Time Series Models of Muscle... See all Simulating the effects of weakness and muscle... How Robust is Human Gait to Calf Muscle Shortening? Muscle-actuated Simulation of Human Running Simbody: Multibody Physics API OpenSim plugin to extract the muscle lines of action Muscle contributions to mass center... Dynamic Simulation of Movement Based on OpenSim and... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/crouch_strength",
      "title": "SimTK: How much muscle strength is required to walk in a crouch gait?: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "crouch_strength"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "217c4c39-6bd8-40ae-ba12-6d4a15fbe901",
    "document_id": "doc_159",
    "content": "OpenSim relies on a large and diverse group of developers and other contributors who have written and tested the software and developed examples and documentation. Current OpenSim Development Team Nick Bianco Alberto Casas Ortiz Scott Delp Jennifer Hicks Ayman Habib Antoine Falisse Carmichael Ong Matt Petrucci OpenSim Contributors and Past Developers Clay Anderson Allison Arnold Edith Arnold Cindy Au Peter Eastman Chris Dembia James Dunne Dominic Farris Lorenzo Flores Saryn Goldberg Eran Guendelman Sam Hamner Katherine Holzbaur Chand John Cassidy Kelly Marjolein van der Krogt Joy Ku Glen Lichtwark Jingjing Liu May Liu Peter Loan Katie Lund Matthew Millard Paul Mitiguy Apoorva Rajagopal Jeffrey Reinbolt Andreas Scholz Ajay Seth Michael Sherman Ian Stavness Katherine Steele Shrinidhi KL Darryl Thelen Thomas Uchida Jack Wang Kevin Xu",
    "metadata": {
      "source": "http://opensim.stanford.edu/about/people.html",
      "title": "Authors - OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "about",
        "people.html"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9e31d84a-d8bb-43ba-acbe-3acc39df1936",
    "document_id": "doc_68",
    "content": "OpenSim Utilities Share Follow Project Follow publicly Follow privately Unfollow See followers (9) List Map More info 248 About Project summary Project statistics Project Activity Plots Geography of Use Team members About Project summary Project statistics Project Activity Plots Geography of Use Team members The purpose of this umbrella project is to provide a central repository of user-contributed OpenSim utilities and extensions. Download Latest Releases External Loads File Script: generateExternalLoadsFile.zip matlab_preprocessing: Matlab.zip License: Neuromusculoskeletal Builder This collection is no longer being maintained through this project. To find OpenSim utilities, you now have two options: 1) Visit the summary table on the OpenSim documentation pages ( http://simtk-confluence.stanford.edu:8080/display/OpenSim/Tools+for+Preparing+Motion+Data ) 2) Conduct a search on SimTK. Click here ( https://simtk.org/search/search.php?srch=opensim&type_of_search=soft ) and then narrow your search to \"Scripts, Plug-Ins, and Other Utilities\" by checking the box on the left. ------------------------------------------ A repository of tools written by members of the OpenSim community to support their usage of the software. Please respect your fellow OpenSim Users. In using these utilities we ask that you respect the hard work of your fellow researchers by citing their work appropriately. When you go to the Download section you will be directed to individual project pages for each model which contain all of the files and documentation. Please carefully review the publications and cite the references in your future papers, presentations, grant applications, etc. Have a utility to contribute? Do you have a utility which you would like to make available through this library? Providing others with access to your tools and utiities can stimulate future studies, provide a foundation for young researchers, and maximize the impact of your work. It’s easy to set up a project page to post your work. This will allow you to track who is using your utilities and be in contact with them. Please consider contributing! If you would like to have your project included on this site, please contact Jennifer Hicks, listed as one of the Project Leads. No guarantees about quality, correctness or support are provided by the SimTK team or OpenSim team. Use at your own risk. To find out more about the OpenSim project, please visit http://opensim.stanford.edu 9 followers Last updated Oct 11, 2017 Project Statistics Jennifer Hicks Ayman Habib People also viewed OpenSim Utilities and Beta Releases SCONE: Open Source Software for Predictive... OpenSim Motion and Simulation Data Dynamic Simulation of Movement Based on OpenSim and... Lee-Son's Toolbox: a Toolbox that Converts VICON... Neuromusculoskeletal Modeling (NMSM) Pipeline C3D Extraction Toolbox OpenSIM users group: University of Delaware See all STO / TRC / MOT files plotter Platform for Dynamic Simulation and Control of... A Visualization Tool for OpenSim Tim's OpenSim Utilities C3D Extraction Toolbox GUI Real-time OpenSim extension Marker registration method informed by anatomical... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility",
    "metadata": {
      "source": "https://simtk.org/projects/opensim-utils",
      "title": "SimTK: OpenSim Utilities: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "opensim-utils"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4c012618-a4ec-42fb-974f-571fd2b01e29",
    "document_id": "doc_68",
    "content": "a Toolbox that Converts VICON... Neuromusculoskeletal Modeling (NMSM) Pipeline C3D Extraction Toolbox OpenSIM users group: University of Delaware See all STO / TRC / MOT files plotter Platform for Dynamic Simulation and Control of... A Visualization Tool for OpenSim Tim's OpenSim Utilities C3D Extraction Toolbox GUI Real-time OpenSim extension Marker registration method informed by anatomical... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/opensim-utils",
      "title": "SimTK: OpenSim Utilities: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "opensim-utils"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "24bd2ce1-a227-4458-a388-6b4aad7de23b",
    "document_id": "doc_53",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Displaying results 1‒22 out of 22 total. Displaying 10 25 50 100 1000 results. Submit new issue Advanced queries Simple Filtering and Sorting Build Query Assignee: Unassigned Joy Ku Ayman Habib Ajay Seth Jennifer Hicks Scott Delp Thomas Uchida Diane Bush Jacqueline Tran Carmichael Ong Matt Petrucci Nicholas Bianco Matt DeMers Shrinidhi KL Michael Sherman Apoorva Rajagopal Paul Mitiguy Chand John Katherine Steele Lorenzo Flores Simtk Builder Daniel Jacobs Soha Pouya Any State: Any Open Closed Deleted Order by: Id Priority Summary Open Date Last Modified Date Close Date Submitter Assignee # Votes # Voters % Votes Ascending Descending Id Summary Open Date Assigned to Submitted by 2474 Difference between Opensim and Anybody software * 2016-12-23 06:24 Nobody Gunjan Patel 2488 Extra time control for Analyze while using analyze tool from Matlab. * 2017-02-03 05:52 Nobody Hari S 2506 How to put parts built with other software * 2017-03-13 08:46 Nobody cui weiling 2507 How to put parts built with other software into opensim * 2017-03-13 08:49 Nobody cui weiling 2537 RRA adjusted segment weights * 2017-05-07 23:25 Nobody Michael Samaan 2713 oursainsburys * 2018-12-06 13:37 Nobody our sainsbur 2714 mycoles * 2018-12-06 13:38 Nobody our sainsbur 2715 mandspeoplesystem * 2018-12-06 13:38 Nobody our sainsbur 2716 mynordstrom * 2018-12-06 13:39 Nobody our sainsbur 2717 mymorri * 2018-12-06 13:39 Nobody our sainsbur 2735 32-bit version * 2019-02-06 21:28 Nobody Elroy Sullivan, PhD 2814 suggestion * 2019-05-28 05:23 Nobody alireza Faghihi 2831 How to download xml files all * 2019-06-19 09:30 Nobody RAHUL GHARATE 2894 Data Normalization * 2020-02-17 07:43 Nobody Mohammadreza Rezaie 2941 IAA configuration in GUI * 2020-04-10 16:24 Nobody Mohammadreza Rezaie 2984 OpenSim 4.1 problem * 2020-07-18 14:15 Nobody yong-siang zhang 3029 More wrapping surfaces shapes, or ability to combine them * 2020-12-19 15:34 Nobody A B 3183 Multiuser capability of Matlab Scripting Environment (Windows) * 2022-06-24 11:25 Nobody Lorenz Winkler 3240 Configuring With Matlab * 2023-08-17 15:29 Nobody Luke Sarantos 3262 Auto save API visualizations * 2023-11-16 13:51 Nobody Therese Parr 3308 Fascia Simulation + Geometry + Group Activation. * 2024-07-15 11:49 Nobody Fernando García-Avello 3313 Movesense data transform problem. * 2024-09-18 08:00 Nobody Ge Cos * Denotes requests > 45 Days Old SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=2089&group_id=91&func=browse",
      "title": "SimTK: OpenSim: Suggested Ideas",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "54279dc4-e077-4379-ac10-c8bbbe88330e",
    "document_id": "doc_53",
    "content": "ability to combine them * 2020-12-19 15:34 Nobody A B 3183 Multiuser capability of Matlab Scripting Environment (Windows) * 2022-06-24 11:25 Nobody Lorenz Winkler 3240 Configuring With Matlab * 2023-08-17 15:29 Nobody Luke Sarantos 3262 Auto save API visualizations * 2023-11-16 13:51 Nobody Therese Parr 3308 Fascia Simulation + Geometry + Group Activation. * 2024-07-15 11:49 Nobody Fernando García-Avello 3313 Movesense data transform problem. * 2024-09-18 08:00 Nobody Ge Cos * Denotes requests > 45 Days Old SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=2089&group_id=91&func=browse",
      "title": "SimTK: OpenSim: Suggested Ideas",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0528923c-831c-456a-89c8-2e581d64960e",
    "document_id": "doc_107",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "26d5654c-1572-4491-a03c-7dcd45d9896b",
    "document_id": "doc_17",
    "content": "SCONE 2.4.1 SCONE: Open Source Software for Predictive Simulation Feb 27, 2025 New publication at the IFAC-PapersOnLine Predictive framework for functional electrical stimulation (FES) cycling Nov 22, 2024 New release: SCONE 2.4.0 SCONE: Open Source Software for Predictive Simulation Oct 28, 2024 Publications Predictive Framework for Electrical Stimulation Cycling in Spinal Cord Injury Three Dimensional Lower Extremity Musculoskeletal Geometry of the Visible Human Female and Male Stark H, Fischer MS, Hunt A, Young F, Quinn R & Andrada E (2020) A three-dimensional musculoskeletal model of the dog. BioRxiv:2020.07.16.205856; DOI:10.1101/2020.07.16.205856 Discussion Re: DepRL - training & OpenSim baseline SCONE Mar 24, 2025 Re: Evaluating Small Forward Dynamics Simulations Using Results SCONE Mar 20, 2025 Re: workspace SCONE Mar 14, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=415&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "Visualization Visualization tools help make sense of the ever-growing amount of information available Featured projects Recently updated projects total projects 40 projects with downloads Search projects in this category News New release:",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "687596fe-cf87-44bc-b75a-02076f894c1e",
    "document_id": "doc_139",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53088473/OpenSim+Models",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53088473",
        "OpenSim+Models"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "468248de-d3eb-48df-a9f9-ab7355c028ab",
    "document_id": "doc_166",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53086422/Modeling+and+Simulation+Best+Practices",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53086422",
        "Modeling+and+Simulation+Best+Practices"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "modeling",
        "intermediate"
      ]
    }
  },
  {
    "id": "6f481ed2-06c5-4089-8e6d-ad4caec8c246",
    "document_id": "doc_162",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53087739/How+to+Contribute",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53087739",
        "How+to+Contribute"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c767af30-6b9c-4c44-8d76-5b243011e087",
    "document_id": "doc_86",
    "content": "EMG-informed Computed Muscle Control for Dynamic Simulations of Movement Share Follow Project Follow publicly Follow privately Unfollow See followers (14) List Map More info 386 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Develop a modified version of Computed Muscle Control (CMC) based on filtered EMG data to track the desired muscles and to create dynamic simulations of movement. Download Latest Releases EMG-informed CMC: EMG-informed CMC.zip This project is an EMG-informed control plug-in that interfaces with OpenSim to provide robust estimates of muscles activation patterns. 1,668 downloads 5 forum posts 14 followers Last updated Jul 31, 2011 Project Statistics Join Mailing Lists Suggest Idea Emel Demircan Downloads This project contains the motion capture, force plate, EMG data of a normal human walking together with the three-dimensional simulations (IK, RRA and CMC results) and the human model. To download the simulations and associated documentation, please see the Downloads section of this project. Please see https://simtk.org/home/opensim for more information on OpenSim and its branch /Branches/JasonEmel485Project/ in order to reproduce or modify the simulations . These simulations were generated using OpenSim version 1.5, which is the software version we recommend to those using these simulations. See all Downloads People also viewed Neuromusculoskeletal Modeling (NMSM) Pipeline How much muscle strength is required to walk in... Platform for Dynamic Simulation and Control of... Efficient Methods for Multi-Domain Biomechanical... Muscle-actuated Simulation of Human Running Simbody: Multibody Physics API A three-dimensional musculoskeletal model of the dog Dynamic Simulation of Movement Based on OpenSim and... See all Dynamic Arm Simulator Are subject-specific musculoskeletal... An OpenSim plugin to minimize joint reaction forces and... MB Knee: Multibody Models of the Human Knee Batch OpenSim Processing Scripts (BOPS) Functional Electrical Stimulation... CT-scan based extended dynamic foot model SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/emg/",
      "title": "SimTK: EMG-informed Computed Muscle Control for Dynamic Simulations of Movement: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "emg"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "simulation",
        "intermediate"
      ]
    }
  },
  {
    "id": "d5300775-071f-4130-8325-d36e1b3a2d70",
    "document_id": "doc_157",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090607/Musculoskeletal+Models",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090607",
        "Musculoskeletal+Models"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "328e9d3b-29cb-43f3-89d0-464d168253bf",
    "document_id": "doc_29",
    "content": "SimTK FAQ Do I have to register with SimTK to utilize its resources? You must be a member of SimTK in order to create a project and upload files. Some projects require that you be a SimTK member in order to download their resources. This enables them to determine the number of individuals utilizing their software and data, thus easily demonstrating the value of their resources to funding agencies. Other projects allow anyone, SimTK members and non-members, to access their resources. What copyright or license applies to the resources I provide through my project? When you upload your software or other files to SimTK, you choose what license or copyright is assigned to it. SimTK provides some commonly used licenses (like MIT, GPL, Creative Commons Attribution-Non-Commercial). You can also add your own custom license or not have any license at all for the resource you're sharing. To have all users agree to the license when they download your resource, you need to remember to check the box next to \"Show download agreement.\" Can projects be modified or even deleted once they were created? Projects can be modified after creation. However, they cannot currently be deleted. Is a project immediately public after clicking the \"Create Project\" button? When you click the \"Create Project\" button, there is a checkbox that allows you to determine if the project is public or private. You can change this after you create the project. We recommend that individuals create public projects and instead opt to make certain sections of their project private. This enables others to learn the most about your project and encourages collaboration. I am a member of SimTK. Why am I unable to access content for a private project on the site? A private project is only accessible to members of that specific private project. Being a member of the SimTK community is different from being a member of a specific project. A private project does not allow the general public or SimTK members who are not members of that private project to access its content. Have a question that's not answered here? Check out our discussion forum page . SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/faq.php",
      "title": "SimTK",
      "section": "",
      "hierarchy": [
        "faq.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cf392cec-ef9c-4278-b165-fbcb095d4b18",
    "document_id": "doc_179",
    "content": "Opensim-announcement -- Announcements of OpenSim releases and updates About Opensim-announcement English (USA) Welcome to the OpenSim mailing list signup page. Enter your email address and name below and we will keep you up-to-date on new OpenSim software releases, documentation, tutorials, and events. The list is very low volume (1 or 2 emails per month). Membership is strongly recommended to keep track of the latest news about OpenSim. To see the collection of prior postings to the list, visit the Opensim-announcement Archives . Using Opensim-announcement To post a message to all the list members, send email to opensim-announcement@simtk.org . You can subscribe to the list, or change your existing subscription, in the sections below. Subscribing to Opensim-announcement Subscribe to Opensim-announcement by filling out the following form. You will be sent email requesting confirmation, to prevent others from gratuitously subscribing you. This is a hidden list, which means that the list of members is available only to the list administrator. Your email address: Your name: You may enter a privacy password below. This provides only mild security, but should prevent others from messing with your subscription. Do not use a valuable password as it will occasionally be emailed back to you in cleartext. If you choose not to enter a password, one will be automatically generated for you, and it will be sent to you once you've confirmed your subscription. You can always request a mail-back of your password when you edit your personal options. Pick a password: Reenter password to confirm: Which language do you prefer to display your messages? English (USA) Opensim-announcement Subscribers ( The subscribers list is only available to the list administrator. ) Enter your admin address and password to visit the subscribers list: Admin address: Password: To unsubscribe from Opensim-announcement, get a password reminder, or change your subscription options enter your subscription email address: If you leave the field blank, you will be prompted for your email address Opensim-announcement list run by ahabib at stanford.edu, delp at stanford.edu, jenhicks at stanford.edu, joyku at stanford.edu, dbush1 at stanford.edu, mpetrucc at stanford.edu Opensim-announcement administrative interface (requires authorization) Overview of all simtk.org mailing lists Delivered by Mailman version 2.1.23 Python Powered GNU's Not Unix Debian Powered",
    "metadata": {
      "source": "https://lists.simtk.org/mailman/listinfo/opensim-announcement",
      "title": "Opensim-announcement Info Page",
      "section": "",
      "hierarchy": [
        "mailman",
        "listinfo",
        "opensim-announcement"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "34141f48-21f9-4ecb-a912-2451b21eac6c",
    "document_id": "doc_135",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089589/Analyses",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089589",
        "Analyses"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "164fac2f-b610-4595-b0a4-c352ec01e8ed",
    "document_id": "doc_171",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53094951/Courses",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53094951",
        "Courses"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f3f52c12-f38d-40cf-bb82-c700cb976648",
    "document_id": "doc_92",
    "content": "OpenSim plugin to extract the muscle lines of action Share Follow Project Follow publicly Follow privately Unfollow See followers (14) List Map More info 750 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums van Arkel, R. J., Modenese, L., Phillips, A. and Jeffers, J. R. (2013), Hip Abduction Can Prevent Posterior Edge Loading of Hip Replacements. Journal of Orthopaedic Research 31, 1172-1179. (2013) Abstract View Edge loading causes clinical problems for hard-on-hard hip replacements, and edge loading wear scars are present on the majority of retrieved components. We asked the question: are the lines of action of hip joint muscles such that edge loading can occur in a well-designed, well-positioned acetabular cup? A musculoskeletal model, based on cadaveric lower limb geometry, was used to calculate for each muscle, in every position within the complete range of motion, whether its contraction would safely pull the femoral head into the cup or contribute to edge loading. The results show that all the muscles that insert into the distal femur, patella, or tibia could cause edge loading of a well-positioned cup when the hip is in deep flexion. Patients frequently use distally inserting muscles for movements requiring deep hip flexion, such as sit-to-stand. Importantly, the results, which are supported by in vivo data and clinical findings, also show that risk of edge loading is dramatically reduced by combining deep hip flexion with hip abduction. Patients, including those with sub-optimally positioned cups, may be able to reduce the prevalence of edge loading by rising from chairs or stooping with the hip abducted. The aim of this project is to provide OpenSim users with a useful tool to obtain muscle lines of actions and potentially link their musculoskeletal models and simulations to their finite element models. NOTE: This version of the plugin work with OpenSim 4.x but previous versions for OpenSim 3.x are still available in the Downloads > View Downloads > Previous Releases section The source code of the plugin is available at https://github.com/modenaxe/MuscleForceDirection. Download Latest Releases MuscleForceDirection plugin: MFD-OS4.1-VSC16.5.4.zip License: MuscleForceDirection plugin The OpenSim plugin made available with this project extends the functionality of OpenSim and allows the user to extract the directionality of the muscle lines of action for a given kinematics. Also the muscle attachments can be exported if required by the user. With this information it is generally possible to define loads representative of the muscle forces in finite element models of bone structures. 1,994 downloads 32 forum posts 14 followers Last updated May 31, 2023 Project Statistics Join Mailing Lists Luca Modenese Andrew Phillips Downloads An OpenSim plugin is available for download and can extract the muscle force directions at the anatomical and effective muscle attachments (see related documentation for details). See all Downloads Related Projects The project owner recommends the following other projects: London Lower Limb",
    "metadata": {
      "source": "https://simtk.org/projects/force_direction/",
      "title": "SimTK: OpenSim plugin to extract the muscle lines of action: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "force_direction"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0a262e8e-8e95-41d4-97af-8fbe5d8fb969",
    "document_id": "doc_92",
    "content": "given kinematics. Also the muscle attachments can be exported if required by the user. With this information it is generally possible to define loads representative of the muscle forces in finite element models of bone structures. 1,994 downloads 32 forum posts 14 followers Last updated May 31, 2023 Project Statistics Join Mailing Lists Luca Modenese Andrew Phillips Downloads An OpenSim plugin is available for download and can extract the muscle force directions at the anatomical and effective muscle attachments (see related documentation for details). See all Downloads Related Projects The project owner recommends the following other projects: London Lower Limb Model People also viewed OpenArm: Volumetric & Time Series Models of Muscle... Open Knee(s): Virtual Biomechanical... OpenSim plugin to optimize musculotendon... Fiber Tractography for Finite-Element Modeling of... SimVascular: Cardiovascular Modeling and... Muscle-actuated Simulation of Human Running Muscle contributions to mass center... Calibrated EMG-Informed Neuromusculoskeletal... See all How much muscle strength is required to walk in... Practical Annotation and Exchange of Virtual... Hip Musculoskeletal Model Efficient Methods for Multi-Domain Biomechanical... Upper Extremity Kinematic Model Continuity: A Problem-Solving Environment for... Cal Poly Human Motion Biomechanics Lab Knee Joint... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/force_direction/",
      "title": "SimTK: OpenSim plugin to extract the muscle lines of action: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "force_direction"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "333380b7-bc95-44a6-a099-f650d959a57a",
    "document_id": "doc_147",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53086030/Models+Data+Utilities",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53086030",
        "Models+Data+Utilities"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "72003b8a-988a-494a-a427-2167aa112cdb",
    "document_id": "doc_33",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Open transaction detected!!!",
    "metadata": {
      "source": "https://simtk.org/plugins/following/index.php?group_id=91&unfollow=1",
      "title": "SimTK: OpenSim: Project Home",
      "section": "",
      "hierarchy": [
        "plugins",
        "following",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2b17c486-8a0b-455e-b3b4-1ba8ffcc0481",
    "document_id": "doc_91",
    "content": "OpenSim plugin to extract the muscle lines of action Share Follow Project Follow publicly Follow privately Unfollow See followers (14) List Map More info 750 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Forums van Arkel, R. J., Modenese, L., Phillips, A. and Jeffers, J. R. (2013), Hip Abduction Can Prevent Posterior Edge Loading of Hip Replacements. Journal of Orthopaedic Research 31, 1172-1179. (2013) Abstract View Edge loading causes clinical problems for hard-on-hard hip replacements, and edge loading wear scars are present on the majority of retrieved components. We asked the question: are the lines of action of hip joint muscles such that edge loading can occur in a well-designed, well-positioned acetabular cup? A musculoskeletal model, based on cadaveric lower limb geometry, was used to calculate for each muscle, in every position within the complete range of motion, whether its contraction would safely pull the femoral head into the cup or contribute to edge loading. The results show that all the muscles that insert into the distal femur, patella, or tibia could cause edge loading of a well-positioned cup when the hip is in deep flexion. Patients frequently use distally inserting muscles for movements requiring deep hip flexion, such as sit-to-stand. Importantly, the results, which are supported by in vivo data and clinical findings, also show that risk of edge loading is dramatically reduced by combining deep hip flexion with hip abduction. Patients, including those with sub-optimally positioned cups, may be able to reduce the prevalence of edge loading by rising from chairs or stooping with the hip abducted. The aim of this project is to provide OpenSim users with a useful tool to obtain muscle lines of actions and potentially link their musculoskeletal models and simulations to their finite element models. NOTE: This version of the plugin work with OpenSim 4.x but previous versions for OpenSim 3.x are still available in the Downloads > View Downloads > Previous Releases section The source code of the plugin is available at https://github.com/modenaxe/MuscleForceDirection. Download Latest Releases MuscleForceDirection plugin: MFD-OS4.1-VSC16.5.4.zip License: MuscleForceDirection plugin The OpenSim plugin made available with this project extends the functionality of OpenSim and allows the user to extract the directionality of the muscle lines of action for a given kinematics. Also the muscle attachments can be exported if required by the user. With this information it is generally possible to define loads representative of the muscle forces in finite element models of bone structures. 1,994 downloads 32 forum posts 14 followers Last updated May 31, 2023 Project Statistics Join Mailing Lists Luca Modenese Andrew Phillips Downloads An OpenSim plugin is available for download and can extract the muscle force directions at the anatomical and effective muscle attachments (see related documentation for details). See all Downloads Related Projects The project owner recommends the following other projects: London Lower Limb",
    "metadata": {
      "source": "https://simtk.org/projects/force_direction",
      "title": "SimTK: OpenSim plugin to extract the muscle lines of action: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "force_direction"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "8806d83e-548a-4a56-8700-2c716c16d1cc",
    "document_id": "doc_91",
    "content": "given kinematics. Also the muscle attachments can be exported if required by the user. With this information it is generally possible to define loads representative of the muscle forces in finite element models of bone structures. 1,994 downloads 32 forum posts 14 followers Last updated May 31, 2023 Project Statistics Join Mailing Lists Luca Modenese Andrew Phillips Downloads An OpenSim plugin is available for download and can extract the muscle force directions at the anatomical and effective muscle attachments (see related documentation for details). See all Downloads Related Projects The project owner recommends the following other projects: London Lower Limb Model People also viewed OpenArm: Volumetric & Time Series Models of Muscle... Open Knee(s): Virtual Biomechanical... OpenSim plugin to optimize musculotendon... Fiber Tractography for Finite-Element Modeling of... SimVascular: Cardiovascular Modeling and... Muscle-actuated Simulation of Human Running Muscle contributions to mass center... Calibrated EMG-Informed Neuromusculoskeletal... See all How much muscle strength is required to walk in... Practical Annotation and Exchange of Virtual... Hip Musculoskeletal Model Efficient Methods for Multi-Domain Biomechanical... Upper Extremity Kinematic Model Continuity: A Problem-Solving Environment for... Cal Poly Human Motion Biomechanics Lab Knee Joint... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/force_direction",
      "title": "SimTK: OpenSim plugin to extract the muscle lines of action: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "force_direction"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9f4bcc10-9f09-4129-a411-673cc0c4df3b",
    "document_id": "doc_186",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Protected Member Functions | Protected Attributes | Static Protected Attributes | Friends OpenSim::ModelComponent Class Reference abstract This defines the abstract ModelComponent class, which is used to specify components of a musculoskeletal model and the elements they add to the underlying computational SimTK::System (MultibodySystem). More... Inheritance diagram for OpenSim::ModelComponent: Public Member Functions ModelComponent () Default constructor. More... ModelComponent (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct ModelComponent from an XML file. More... ModelComponent (SimTK::Xml::Element &aNode) Construct ModelComponent from a specific node in an XML document. More... virtual ~ModelComponent () Destructor is virtual to allow concrete model component cleanup. More... void connectToModel ( Model &model) Connect this ModelComponent to its aggregate- a Model . More... const Model & getModel () const Get a const reference to the Model this component is part of. More... Model & updModel () Get a modifiable reference to the Model this component is part of. More... bool hasModel () const Does this ModelComponent have a Model associated with it? More... void preScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... void scale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... void postScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... Public Member Functions inherited from OpenSim::Component Component () Default constructor. More... Component (const std::string &aFileName, bool aUpdateFromXMLNode=true) Construct Component from an XML file. More... Component (SimTK::Xml::Element &aNode) Construct Component from a specific node in an XML document. More... Component (const Component &)=default Use default copy constructor and assignment operator. More... Component & operator= (const Component &)=default virtual ~Component ()=default Destructor is virtual to allow concrete Component to cleanup. More... virtual void generateDecorations (bool fixed, const ModelDisplayHints &hints, const SimTK::State &state, SimTK::Array_< SimTK::DecorativeGeometry > &appendToThis) const Optional method for generating arbitrary display geometry that reflects this Component at the specified state . More... const SimTK::MultibodySystem & getSystem () const Get the underlying MultibodySystem that this component is connected to. More... bool hasSystem () const Check if this component has an underlying MultibodySystem. More... bool isComponentInOwnershipTree (const Component *component) const Does the provided component already exist anywhere in the ownership tree (not just subcomponents of this component)? More... void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const Uses getComponentList<T>() to count the number of underlying subcomponents of the specified type. More... std::string getAbsolutePathString () const Get the complete (absolute) pathname for this Component",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d65f97d0-f181-4489-aa45-b23a93bfc300",
    "document_id": "doc_186",
    "content": "void addComponent ( Component *subcomponent) Add a Component (as a subcomponent) of this component. More... template<typename T = Component> ComponentList < const T > getComponentList () const Get an iterator through the underlying subcomponents that this component is composed of. More... template<typename T = Component> ComponentList < T > updComponentList () Similar to getComponentList() , except the resulting list allows one to modify the components. More... template<typename T = Component> unsigned countNumComponents () const Uses getComponentList<T>() to count the number of underlying subcomponents of the specified type. More... std::string getAbsolutePathString () const Get the complete (absolute) pathname for this Component to its ancestral Component , which is the root of the tree to which this Component belongs. More... ComponentPath getAbsolutePath () const Return a ComponentPath of the absolute path of this Component . More... std::string getRelativePathString (const Component &wrt) const Get the relative path of this Component with respect to another Component , as a string. More... ComponentPath getRelativePath (const Component &wrt) const Get the relative path of this Component with respect to another Component . More... bool hasComponent (const std::string &pathname) const Query if there is a component (of any type) at the specified path name. More... template<class C = Component> bool hasComponent (const std::string &pathname) const Query if there is a component of a given type at the specified path name. More... template<class C = Component> const C & getComponent (const std::string &pathname) const Get a unique subcomponent of this Component by its path name and type 'C'. More... template<class C = Component> const C & getComponent (const ComponentPath &pathname) const const Component & getComponent (const std::string &pathname) const Similar to the templatized getComponent() , except this returns the component as the generic Component type. More... template<class C = Component> C & updComponent (const std::string &name) Get a writable reference to a subcomponent. More... template<class C = Component> C & updComponent (const ComponentPath &name) Component & updComponent (const std::string &pathname) Similar to the templatized updComponent() , except this returns the component as the generic Component type. More... unsigned printComponentsMatching (const std::string &substring) const Print a list to the console of all components whose absolute path name contains the given string. More... int getNumStateVariables () const Get the number of \"continuous\" state variables maintained by the Component and its subcomponents. More... Array < std::string > getStateVariableNames () const Get the names of \"continuous\" state variables maintained by the Component and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name) as input. More... const StateVariable * traverseToStateVariable (const std::string &pathName) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... const StateVariable",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "76912b0a-4aec-4d39-8199-6bbbec9389eb",
    "document_id": "doc_186",
    "content": "and its subcomponents. More... template<class C = Component> const C * findComponent (const ComponentPath &pathToFind) const Find a Component to which this Component is an ancestor—in other words, a Component that is directly owned by this Component or is owned by one of its sub-components, sub-sub-components, etc. More... template<class C = Component> const C * findComponent (const std::string &pathToFind) const Same as findComponent(const ComponentPath&), but accepting a string (a path or just a name) as input. More... const StateVariable * traverseToStateVariable (const std::string &pathName) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... const StateVariable * traverseToStateVariable (const ComponentPath &path) const Get a StateVariable anywhere in the Component tree, given a StateVariable path. More... void finalizeFromProperties () Define a Component 's internal data members and structure according to its properties. More... void finalizeConnections ( Component &root) Satisfy the Component 's connections specified by its Sockets and Inputs. More... void clearConnections () Disconnect/clear this Component from its aggregate component. More... void addToSystem (SimTK::MultibodySystem &system) const Have the Component add itself to the underlying computational System. More... void initStateFromProperties (SimTK::State &state) const Initialize Component 's state variable values from its properties. More... void setPropertiesFromState (const SimTK::State &state) Set Component 's properties given a state. More... int getNumSockets () const Get the number of Sockets in this Component . More... std::vector< std::string > getSocketNames () const Collect and return the names of the sockets in this component. More... template<typename T > const T & getConnectee (const std::string &name) const Get the \"connectee\" object that the Component 's Socket is bound to. More... const Object & getConnectee (const std::string &name) const Get the connectee as an Object . More... const AbstractSocket & getSocket (const std::string &name) const Get an AbstractSocket for the given socket name. More... AbstractSocket & updSocket (const std::string &name) Get a writable reference to the AbstractSocket for the given socket name. More... template<typename T > const Socket < T > & getSocket (const std::string &name) const Get a const reference to the concrete Socket provided by this Component by name. More... template<typename T > Socket < T > & updSocket (const std::string &name) Get a writable reference to the concrete Socket provided by this Component by name. More... void printSubcomponentInfo () const List all subcomponents by name and recurse into these components to list their subcomponents, and so on. More... void printSocketInfo () const List all the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs () const Access the number of Outputs that this component has. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c87965c8-ca77-4247-8755-847145031b31",
    "document_id": "doc_186",
    "content": "the Sockets of this component and whether or not they are connected. More... void printInputInfo () const List all the inputs of this component and whether or not they are connected. More... template<typename C > void printSubcomponentInfo () const void printOutputInfo (const bool includeDescendants=true) const Print outputs of this component and optionally, those of all subcomponents. More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... int getNumInputs () const Access the number of Inputs that this component has. More... int getNumOutputs () const Access the number of Outputs that this component has. More... std::vector< std::string > getInputNames () const Collect and return the names of Inputs in this component as an std::vector. More... std::vector< std::string > getOutputNames () const Collect and return the names of Outputs in this component as an std::vector. More... const AbstractInput & getInput (const std::string &name) const Get an Input provided by this Component by name. More... AbstractInput & updInput (const std::string &name) Get a writable reference to an Input provided by this Component by name. More... template<typename T > const Input < T > & getInput (const std::string &name) const Get a concrete Input that you can directly ask for its values. More... const AbstractOutput & getOutput (const std::string &name) const Get the Output provided by this Component by name. More... AbstractOutput & updOutput (const std::string &name) Get a writable reference to an Output provided by this Component by name. More... SimTK::IteratorRange< OutputConstIterator > getOutputs () const Iterate through all Outputs of this component. More... int getModelingOption (const SimTK::State &state, const std::string &name) const Get a ModelingOption flag for this Component by name. More... void setModelingOption (SimTK::State &state, const std::string &name, int flag) const Set the value of a ModelingOption flag for this Component . More... template<typename T > const T & getInputValue (const SimTK::State &state, const std::string &name) const Get the Input value that this component is dependent on. More... template<typename T > const T & getOutputValue (const SimTK::State &state, const std::string &name) const Get the Output value provided by this Component by name. More... double getStateVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable allocated by this Component . More... double getStateVariableValue (const SimTK::State &state, const ComponentPath &path) const Get the value of a state variable allocated by this Component . More... void setStateVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed by this Component . More... double getDiscreteVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a discrete variable allocated by this Component by",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9ebcac84-2885-4c9b-b0f0-1ee22d5b1aa0",
    "document_id": "doc_186",
    "content": "value) const Set the value of a state variable allocated by this Component by name. More... SimTK::Vector getStateVariableValues (const SimTK::State &state) const Get all values of the state variables allocated by this Component . More... void setStateVariableValues (SimTK::State &state, const SimTK::Vector &values) const Set all values of the state variables allocated by this Component . More... double getStateVariableDerivativeValue (const SimTK::State &state, const std::string &name) const Get the value of a state variable derivative computed by this Component . More... double getDiscreteVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a discrete variable allocated by this Component by name. More... void setDiscreteVariableValue (SimTK::State &state, const std::string &name, double value) const Set the value of a discrete variable allocated by this Component by name. More... template<class T > SimTK::CacheEntryIndex getCacheVariableIndex (const CacheVariable < T > &cv) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... SimTK::CacheEntryIndex getCacheVariableIndex (const std::string &name) const Get the index of a Component 's cache variable in the Subsystem for allocations. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const std::string &name) const Get the value of a cache variable allocated by this Component by name. More... template<class T > const T & getCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Get the value of a cache variable allocated by this Component . More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const std::string &k, T value) const Set the value of a cache variable, identified by name , to a new value and mark the cache variable as valid. More... template<typename T > void setCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv, T value) const Set the value of a cache variable to a new value and mark the cache variable as valid. More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const std::string &name) const Returns a mutable reference to the value of a cache variable identified by name . More... template<typename T > T & updCacheVariableValue (const SimTK::State &state, const CacheVariable < T > &cv) const Returns a mutable reference to the value of a cache variable. More... bool isCacheVariableValid (const SimTK::State &state, const std::string &name) const Returns true if the cache variable, identified by name , is valid. More... template<class T > bool isCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Returns true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as invalid. More... template<class T > void markCacheVariableInvalid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bf62611b-b7aa-44b3-9eca-ea1790be986a",
    "document_id": "doc_186",
    "content": "true if the cache variable is valid. More... void markCacheVariableValid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as valid. More... template<typename T > void markCacheVariableValid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as valid. More... void markCacheVariableInvalid (const SimTK::State &state, const std::string &name) const Marks the value of a cache variable, identified by name , as invalid. More... template<class T > void markCacheVariableInvalid (const SimTK::State &state, const CacheVariable < T > &cv) const Marks the value of a cache variable as invalid. More... const Component & getOwner () const Access the owner of this Component . More... bool hasOwner () const (For advanced users) Check if this Component has an owner. More... const Component & getRoot () const Obtain the root Component, which is this component if it is orphaned. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7be419d5-680f-4c5d-9a3f-7a491e0ffe6a",
    "document_id": "doc_186",
    "content": "AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet ()",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "37c0f817-8948-40aa-9fab-2a65def4abb1",
    "document_id": "doc_186",
    "content": "std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef ModelComponent Self This typedef might be useful within the member functions of this class. More... typedef Component Super Use this typedef to refer to the superclass of this class. More... Public Types inherited from OpenSim::Component typedef Component Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... typedef std::map< std::string, SimTK::ClonePtr< AbstractOutput > >::const_iterator OutputConstIterator Define OutputConstIterator for convenience. More... Protected Member Functions const SimTK::Vec3 & getScaleFactors (const ScaleSet &scaleSet, const Frame &frame) const Get the scale factors corresponding to the base OpenSim::Body of the specified Frame . More... virtual void extendPreScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . More... virtual void extendScale (const SimTK::State &s, const ScaleSet &scaleSet) Scale the ModelComponent . More... virtual void extendPostScale (const SimTK::State &s, const ScaleSet &scaleSet) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . More... void updateFromXMLNode (SimTK::Xml::Element &aNode, int versionNumber) override Handle a change in XML syntax for Sockets. More... ModelComponent Basic Interface The interface ensures that deserialization, resolution of inter-connections, and handling of dependencies are performed systematically and prior to system creation, followed by allocation of necessary System resources. These methods are virtual and may be implemented by subclasses of ModelComponents. Note Every implementation of virtual method xxx(args) must begin with the line \"Super::xxx(args);\" to ensure that the parent class methods execute before the child class method, starting with ModelComponent::xxx() and going down. The base class implementations here do two things: (1) take care of any needs of the ModelComponent base class itself, and then (2) ensure that the corresponding calls are made to any subcomponents that have been specified by derived ModelComponent objects, via calls to the includeAsSubComponent() method. So assuming that your concrete ModelComponent and all intermediate classes from which it derives properly follow the requirement of calling the Super class method first, the order of operations enforced here for a call to a single method will be ModelComponent base class computations calls to that same method for all subcomponents calls to that same method for intermediate ModelComponent-derived objects' computations, in order",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "fb8a635a-3f7e-45d6-8380-8656d5f20298",
    "document_id": "doc_186",
    "content": "of any needs of the ModelComponent base class itself, and then (2) ensure that the corresponding calls are made to any subcomponents that have been specified by derived ModelComponent objects, via calls to the includeAsSubComponent() method. So assuming that your concrete ModelComponent and all intermediate classes from which it derives properly follow the requirement of calling the Super class method first, the order of operations enforced here for a call to a single method will be ModelComponent base class computations calls to that same method for all subcomponents calls to that same method for intermediate ModelComponent-derived objects' computations, in order down from ModelComponent, and finally a call to that method for the bottom-level concrete class. You should consider this ordering when designing a ModelComponent. In particular the fact that all your subcomponents will be invoked before you are may be surprising. void extendFinalizeFromProperties () override Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. More... virtual void extendConnectToModel ( Model &model) Perform any necessary initializations required to connect the component into the Model , and check for error conditions. More... Protected Member Functions inherited from OpenSim::Component SimTK_DEFINE_UNIQUE_INDEX_TYPE ( MemberSubcomponentIndex ) template<class C = Component> MemberSubcomponentIndex constructSubcomponent (const std::string &name) Construct a subcomponent as a data member of this Component . More... template<class C = Component> const C & getMemberSubcomponent ( MemberSubcomponentIndex ix) const template<class C = Component> C & updMemberSubcomponent ( MemberSubcomponentIndex ix) void adoptSubcomponent ( Component *subcomponent) Adopt a component as a subcomponent of this Component . More... size_t getNumImmediateSubcomponents () const Get the number of Subcomponents immediately owned by this Component . More... size_t getNumMemberSubcomponents () const Get the number of Subcomponents that are data members of this Component . More... size_t getNumPropertySubcomponents () const Get the number of Subcomponents that are properties of this Component . More... size_t getNumAdoptedSubcomponents () const Get the number of Subcomponents adopted by this Component . More... std::vector< SimTK::ReferencePtr< const Component > > getImmediateSubcomponents () const Access this Component 's immediate subcomponents (not those owned by subcomponents) More... template<class C > const C * traversePathToComponent ( ComponentPath path) const void setNextSubcomponentInSystem (const Component &sub) const Helper method to enable Component makers to specify the order of their subcomponents to be added to the System during addToSystem() . More... void resetSubcomponentOrder () resetSubcomponentOrder clears this Component 's list of ordered subcomponents (but otherwise leaves subcomponents untouched). More... const Component & get_components (int i) const Get the value of the i-th element of the components property. More... Component & upd_components (int i) Get a writable reference to the i-th element of the components property. More... void set_components (int i, const Component &value) Set the value of the i-th element of components property. More... int append_components (const Component &value) Append an element to the components property. More... virtual void extendAddComponent ( Component *subcomponent) Perform any secondary operations, e.g. More... void initComponentTreeTraversal (const Component &root) const Build the tree of Components",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9835a593-167f-4601-829e-0fbde6002884",
    "document_id": "doc_186",
    "content": "of ordered subcomponents (but otherwise leaves subcomponents untouched). More... const Component & get_components (int i) const Get the value of the i-th element of the components property. More... Component & upd_components (int i) Get a writable reference to the i-th element of the components property. More... void set_components (int i, const Component &value) Set the value of the i-th element of components property. More... int append_components (const Component &value) Append an element to the components property. More... virtual void extendAddComponent ( Component *subcomponent) Perform any secondary operations, e.g. More... void initComponentTreeTraversal (const Component &root) const Build the tree of Components from this component through its descendants. More... virtual void extendAddToSystem (SimTK::MultibodySystem &system) const Add appropriate Simbody elements (if needed) to the System corresponding to this component and specify needed state resources. More... virtual void extendAddToSystemAfterSubcomponents (SimTK::MultibodySystem &system) const Add appropriate Simbody elements (if needed) to the System after your component's subcomponents have had a chance to add themselves to the system. More... virtual void extendInitStateFromProperties (SimTK::State &state) const Transfer property values or other state-independent initial values into this component's state variables in the passed-in state argument. More... virtual void extendSetPropertiesFromState (const SimTK::State &state) Update this component's property values to match the specified State, if the component has created any state variable that is intended to correspond to a property. More... virtual void computeStateVariableDerivatives (const SimTK::State &s) const If a model component has allocated any continuous state variables using the addStateVariable() method, then computeStateVariableDerivatives() must be implemented to provide time derivatives for those states. More... void setStateVariableDerivativeValue (const SimTK::State &state, const std::string &name, double deriv) const Set the derivative of a state variable by name when computed inside of this Component 's computeStateVariableDerivatives() method. More... virtual void extendRealizeTopology (SimTK::State &state) const Obtain state resources that are needed unconditionally, and perform computations that depend only on the system topology. More... virtual void extendRealizeModel (SimTK::State &state) const Obtain and name state resources (like state variables allocated by an underlying Simbody component) that may be needed, depending on modeling options. More... virtual void extendRealizeInstance (const SimTK::State &state) const Perform computations that depend only on instance variables, like lengths and masses. More... virtual void extendRealizeTime (const SimTK::State &state) const Perform computations that depend only on time and earlier stages. More... virtual void extendRealizePosition (const SimTK::State &state) const Perform computations that depend only on position-level state variables and computations performed in earlier stages (including time). More... virtual void extendRealizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... virtual void extendRealizeDynamics (const SimTK::State &state) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. More... virtual void extendRealizeAcceleration (const SimTK::State &state) const Perform computations that may depend on applied forces. More... virtual void extendRealizeReport (const SimTK::State &state) const Perform computations that may depend on anything but",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 9,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "38df87c9-2950-4134-9efe-21a8e09b1699",
    "document_id": "doc_186",
    "content": "virtual void extendRealizeVelocity (const SimTK::State &state) const Perform computations that depend only on velocity-level state variables and computations performed in earlier stages (including position, and time). More... virtual void extendRealizeDynamics (const SimTK::State &state) const Perform computations (typically forces) that may depend on dynamics-stage state variables, and on computations performed in earlier stages (including velocity, position, and time), but not on other forces, accelerations, constraint multipliers, or reaction forces. More... virtual void extendRealizeAcceleration (const SimTK::State &state) const Perform computations that may depend on applied forces. More... virtual void extendRealizeReport (const SimTK::State &state) const Perform computations that may depend on anything but are only used for reporting and cannot affect subsequent simulation behavior. More... void addModelingOption (const std::string &optionName, int maxFlagValue) const Add a modeling option (integer flag stored in the State) for use by this Component . More... void addStateVariable (const std::string &stateVariableName, const SimTK::Stage &invalidatesStage=SimTK::Stage::Dynamics, bool isHidden=false) const Add a continuous system state variable belonging to this Component , and assign a name by which to refer to it. More... void addStateVariable ( Component::StateVariable *stateVariable) const The above method provides a convenient interface to this method, which automatically creates an 'AddedStateVariable' and allocates resources in the SimTK::State for this variable. More... void addDiscreteVariable (const std::string &discreteVariableName, SimTK::Stage invalidatesStage) const Add a system discrete variable belonging to this Component , give it a name by which it can be referenced, and declare the lowest Stage that should be invalidated if this variable's value is changed. More... SimTK::MultibodySystem & updSystem () const Get writable reference to the MultibodySystem that this component is connected to. More... int getStateIndex (const std::string &name) const Get the index of a Component 's continuous state variable in the Subsystem for allocations. More... SimTK::SystemYIndex getStateVariableSystemIndex (const std::string &stateVariableName) const Get the System Index of a state variable allocated by this Component . More... const SimTK::DiscreteVariableIndex getDiscreteVariableIndex (const std::string &name) const Get the index of a Component 's discrete variable in the Subsystem for allocations. More... template<typename T > PropertyIndex constructSocket (const std::string &name, const std::string &propertyComment) Construct a specialized Socket for this Component 's dependence on another Component . More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output for a member function of the same component. More... template<typename T , typename CompType = Component> bool constructOutput (const std::string &name, const T &(CompType::*const memFunc)(const SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) This variant handles component member functions that return the output value by const reference (const T&). More... template<typename T , typename CompType > bool constructListOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &, const std::string &channel) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output that can have multiple channels. More... bool constructOutputForStateVariable (const std::string &name) Construct an Output for a StateVariable . More... template<typename T > PropertyIndex constructInput (const std::string &name, bool isList, const std::string &propertyComment, const SimTK::Stage &requiredAtStage=SimTK::Stage::Instance) Construct an Input (socket) for this Component 's dependence on an Output signal. More... template<class T >",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 10,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2d70fa21-ba27-4fb2-b409-8d4ce4f79c9d",
    "document_id": "doc_186",
    "content": "SimTK::State &) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) This variant handles component member functions that return the output value by const reference (const T&). More... template<typename T , typename CompType > bool constructListOutput (const std::string &name, T(CompType::*const memFunc)(const SimTK::State &, const std::string &channel) const, const SimTK::Stage &dependsOn=SimTK::Stage::Acceleration) Construct an output that can have multiple channels. More... bool constructOutputForStateVariable (const std::string &name) Construct an Output for a StateVariable . More... template<typename T > PropertyIndex constructInput (const std::string &name, bool isList, const std::string &propertyComment, const SimTK::Stage &requiredAtStage=SimTK::Stage::Instance) Construct an Input (socket) for this Component 's dependence on an Output signal. More... template<class T > CacheVariable < T > addCacheVariable (std::string name, T variablePrototype, SimTK::Stage dependsOnStage) const Add a state cache entry belonging to this Component to hold calculated values that must be automatically invalidated when certain state values change. More... void setOwner (const Component &owner) Set this Component's reference to its owning Component More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More...",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 11,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7d8625d6-85f2-41d7-bbbc-87ad783ed22f",
    "document_id": "doc_186",
    "content": "T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Protected Attributes SimTK::ReferencePtr< Model > _model The model this component belongs to. More... Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Static Protected Attributes static const SimTK::Vec3 InvalidScaleFactors Returned by getScaleFactors() if the ScaleSet does not contain scale factors for the base Body associated with the specified Frame . More... Friends template<class T > class ModelComponentSet Auto-generated functions static ModelComponent * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"ModelComponent\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... ModelComponent * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members OpenSim Properties, Sockets, Outputs,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 12,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "329fd9bc-f6f9-4946-bfdc-32e6e47a1f75",
    "document_id": "doc_186",
    "content": "static ModelComponent * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"ModelComponent\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... ModelComponent * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members OpenSim Properties, Sockets, Outputs, Inputs inherited from OpenSim::Component Component components \"List of components that this component owns and serializes.\" More... Static Public Member Functions inherited from OpenSim::Component static Component * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Component\". More... Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 13,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bcbacb7f-48f2-4283-9bec-3f2475d971ed",
    "document_id": "doc_186",
    "content": "as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Static Protected Member Functions inherited from OpenSim::Component static void prependComponentPathToConnecteePath ( Component &subcomponent) For internal use. More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description This defines the abstract ModelComponent class, which is used to specify components of a musculoskeletal model and the elements they add to the underlying computational SimTK::System (MultibodySystem). A ModelComponent is an OpenSim::Component and therefore has the capabilities to add necessary system resources to the System and to manage access to those resources ( See also Component ) Bodies, Joints, Coordinates, Constraints, Forces, Actuators, Controllers, and even Model itself, are ModelComponents. Each component is \"connected\" to a model and an underlying SimTK::Subsystem, which by default is the System's DefaultSubsystem. The primary responsibility of a ModelComponent is to add its computational representation(s) of physical musculoskeletal structures to the underlying",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 14,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "5a9dd4ca-878b-4017-9d79-cee55233f86c",
    "document_id": "doc_186",
    "content": "is used to specify components of a musculoskeletal model and the elements they add to the underlying computational SimTK::System (MultibodySystem). A ModelComponent is an OpenSim::Component and therefore has the capabilities to add necessary system resources to the System and to manage access to those resources ( See also Component ) Bodies, Joints, Coordinates, Constraints, Forces, Actuators, Controllers, and even Model itself, are ModelComponents. Each component is \"connected\" to a model and an underlying SimTK::Subsystem, which by default is the System's DefaultSubsystem. The primary responsibility of a ModelComponent is to add its computational representation(s) of physical musculoskeletal structures to the underlying SimTK::System by implementing extendAddToSystem() . Additional methods provide support for adding modeling options, state and cache variables ( See also Component ). Public methods enable access to component variables via their names. Author Ajay Seth, Michael Sherman Member Typedef Documentation ◆ Self typedef ModelComponent OpenSim::ModelComponent::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Component OpenSim::ModelComponent::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ ModelComponent() [1/3] OpenSim::ModelComponent::ModelComponent ( ) Default constructor. ◆ ModelComponent() [2/3] OpenSim::ModelComponent::ModelComponent ( const std::string & aFileName , bool aUpdateFromXMLNode = true ) Construct ModelComponent from an XML file. ◆ ModelComponent() [3/3] OpenSim::ModelComponent::ModelComponent ( SimTK::Xml::Element & aNode ) explicit Construct ModelComponent from a specific node in an XML document. ◆ ~ModelComponent() virtual OpenSim::ModelComponent::~ModelComponent ( ) inline virtual Destructor is virtual to allow concrete model component cleanup. Member Function Documentation ◆ assign() void OpenSim::ModelComponent::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type ModelComponent . ◆ clone() ModelComponent * OpenSim::ModelComponent::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Component . Implemented in OpenSim::Model , OpenSim::Millard2012AccelerationMuscle , OpenSim::EspositoMiller2018Force , OpenSim::Bhargava2004SmoothedMuscleMetabolics , OpenSim::Umberger2010MuscleMetabolicsProbe , OpenSim::Millard2012EquilibriumMuscle , OpenSim::Bhargava2004MuscleMetabolicsProbe , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Blankevoort1991Ligament , OpenSim::MeyerFregly2016Force , OpenSim::ScalarActuator , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Probe , OpenSim::Thelen2003Muscle , OpenSim::FunctionBasedPath , OpenSim::Joint , OpenSim::DeGrooteFregly2016Muscle , OpenSim::MuscleFixedWidthPennationModel , OpenSim::FirstOrderMuscleActivationDynamics , OpenSim::Frame , OpenSim::MuscleFirstOrderActivationDynamicModel , OpenSim::AckermannVanDenBogert2010Force , OpenSim::Muscle , OpenSim::CMC , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::ExternalLoads , OpenSim::OffsetFrame< PhysicalFrame > , OpenSim::ClutchedPathSpring , OpenSim::AbstractGeometryPath , OpenSim::CoordinateLimitForce , OpenSim::PhysicalFrame , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::GeometryPath , OpenSim::ModelComponentSet< T > , OpenSim::RollingOnSurfaceConstraint , OpenSim::ModelComponentSet< ExternalForce > , OpenSim::ModelComponentSet< ContactGeometry > , OpenSim::ModelComponentSet<",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 15,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b0d643e9-6f03-4798-ab59-5b787f31d183",
    "document_id": "doc_186",
    "content": "with (that is, derives from) Object. Implements OpenSim::Component . Implemented in OpenSim::Model , OpenSim::Millard2012AccelerationMuscle , OpenSim::EspositoMiller2018Force , OpenSim::Bhargava2004SmoothedMuscleMetabolics , OpenSim::Umberger2010MuscleMetabolicsProbe , OpenSim::Millard2012EquilibriumMuscle , OpenSim::Bhargava2004MuscleMetabolicsProbe , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Blankevoort1991Ligament , OpenSim::MeyerFregly2016Force , OpenSim::ScalarActuator , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Probe , OpenSim::Thelen2003Muscle , OpenSim::FunctionBasedPath , OpenSim::Joint , OpenSim::DeGrooteFregly2016Muscle , OpenSim::MuscleFixedWidthPennationModel , OpenSim::FirstOrderMuscleActivationDynamics , OpenSim::Frame , OpenSim::MuscleFirstOrderActivationDynamicModel , OpenSim::AckermannVanDenBogert2010Force , OpenSim::Muscle , OpenSim::CMC , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::ExternalLoads , OpenSim::OffsetFrame< PhysicalFrame > , OpenSim::ClutchedPathSpring , OpenSim::AbstractGeometryPath , OpenSim::CoordinateLimitForce , OpenSim::PhysicalFrame , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::GeometryPath , OpenSim::ModelComponentSet< T > , OpenSim::RollingOnSurfaceConstraint , OpenSim::ModelComponentSet< ExternalForce > , OpenSim::ModelComponentSet< ContactGeometry > , OpenSim::ModelComponentSet< WrapObject > , OpenSim::ModelComponentSet< Force > , OpenSim::ModelComponentSet< Joint > , OpenSim::ModelComponentSet< Probe > , OpenSim::ModelComponentSet< Controller > , OpenSim::ModelComponentSet< ModelComponent > , OpenSim::ModelComponentSet< Marker > , OpenSim::ModelComponentSet< Body > , OpenSim::ModelComponentSet< Constraint > , OpenSim::ScapulothoracicJoint , OpenSim::MuscleActivationDynamics , OpenSim::ExpressionBasedPointToPointForce , OpenSim::ExternalForce , OpenSim::Controller , OpenSim::ActivationFiberLengthMuscle , OpenSim::PathSpring , OpenSim::ExpressionBasedBushingForce , OpenSim::FunctionBasedBushingForce , OpenSim::PrescribedForce , OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::TwoFrameLinker< Constraint, PhysicalFrame > , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::BushingForce , OpenSim::Ligament , OpenSim::Coordinate , OpenSim::CustomJoint , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::TorqueActuator , OpenSim::BallJoint , OpenSim::CoordinateCouplerConstraint , OpenSim::BodyActuator , OpenSim::PointActuator , OpenSim::Thelen2003Muscle_Deprecated , OpenSim::PointToPointActuator , OpenSim::Actuator , OpenSim::Point , OpenSim::FreeJoint , OpenSim::UnilateralConstraint , OpenSim::ActivationCoordinateActuator , OpenSim::CoordinateActuator , OpenSim::McKibbenActuator , OpenSim::ForceSet , OpenSim::JointInternalPowerProbe , OpenSim::PhysicalOffsetFrame , OpenSim::WeldConstraint , OpenSim::ControlSetController , OpenSim::ConstantCurvatureJoint , OpenSim::EllipsoidJoint , OpenSim::CorrectionController , OpenSim::PathActuator , OpenSim::ExperimentalMarker , OpenSim::IMU , OpenSim::WrapObject , OpenSim::Set< Joint, ModelComponent > , OpenSim::Set< Marker, ModelComponent > , OpenSim::Set< T, ModelComponent > , OpenSim::Set< ContactGeometry, ModelComponent > , OpenSim::Set< Controller, ModelComponent > , OpenSim::Set< WrapObject, ModelComponent > , OpenSim::Set< Probe, ModelComponent > , OpenSim::Set< ModelComponent, ModelComponent > , OpenSim::Set< Body, ModelComponent > , OpenSim::Set< Constraint, ModelComponent > , OpenSim::Set< ExternalForce, ModelComponent > , OpenSim::Set< Force, ModelComponent > , OpenSim::SpringGeneralizedForce , OpenSim::ControllerSet , OpenSim::ExperimentalFrame , OpenSim::PinJoint , OpenSim::UniversalJoint , OpenSim::AccelerationMotion , OpenSim::PrescribedController , OpenSim::ActuatorPowerProbe , OpenSim::ContactGeometry , OpenSim::Force , OpenSim::Marker , OpenSim::MovingPathPoint , OpenSim::MuscleActiveFiberPowerProbe , OpenSim::SystemEnergyProbe , OpenSim::PointConstraint , OpenSim::Constraint , OpenSim::GimbalJoint , OpenSim::PlanarJoint , OpenSim::WrapCylinder , OpenSim::WrapEllipsoid , OpenSim::WrapSphere , OpenSim::WrapTorus , OpenSim::ActuatorForceProbe , OpenSim::ConditionalPathPoint , OpenSim::JointSet , OpenSim::Station , OpenSim::PositionMotion , OpenSim::Body , OpenSim::SliderJoint , OpenSim::WeldJoint , OpenSim::PathWrapPoint , OpenSim::ConstantMuscleActivation , OpenSim::ComponentSet , OpenSim::Ground , OpenSim::PointToPointSpring , OpenSim::ConstantDistanceConstraint , OpenSim::ZerothOrderMuscleActivationDynamics , OpenSim::ElasticFoundationForce , OpenSim::PathPoint , OpenSim::ProbeSet , OpenSim::PointOnLineConstraint , OpenSim::WrapObjectSet , OpenSim::DiscreteForces , OpenSim::AbstractPathPoint , OpenSim::ContactGeometrySet , OpenSim::ContactHalfSpace , OpenSim::HuntCrossleyForce , OpenSim::BodySet , OpenSim::ConstraintSet , OpenSim::ContactMesh , OpenSim::MarkerSet , OpenSim::ContactSphere , OpenSim::ExpressionBasedCoordinateForce , OpenSim::DiscreteController , and OpenSim::StationPlaneContactForce . ◆ connectToModel() void OpenSim::ModelComponent::connectToModel ( Model & model ) Connect this ModelComponent to its aggregate- a Model . ◆ extendConnectToModel() virtual void OpenSim::ModelComponent::extendConnectToModel ( Model & model ) inline protected virtual Perform any necessary initializations required to connect the component into the Model , and check for error conditions. extendConnectToModel() is invoked on all components to complete construction of a Model , prior to creating a Simbody System to represent it computationally. It may also be invoked at times just for its error-checking side effects. If you override this method, be sure to invoke the base class method first, using",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 16,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1e90020f-26ec-4cb1-b3eb-64e3c6f6672e",
    "document_id": "doc_186",
    "content": "◆ connectToModel() void OpenSim::ModelComponent::connectToModel ( Model & model ) Connect this ModelComponent to its aggregate- a Model . ◆ extendConnectToModel() virtual void OpenSim::ModelComponent::extendConnectToModel ( Model & model ) inline protected virtual Perform any necessary initializations required to connect the component into the Model , and check for error conditions. extendConnectToModel() is invoked on all components to complete construction of a Model , prior to creating a Simbody System to represent it computationally. It may also be invoked at times just for its error-checking side effects. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::extendConnectToModel(Model& model) { Super::extendConnectToModel(model); // invoke parent class method // ... your code goes here } Note that this method is expected to check for modeling errors and should throw an OpenSim::Exception if there is something wrong. For example, if your model component references another object by name, you should verify that it exists in the supplied Model , which is not guaranteed since components may be independently instantiated or constructed from XML files. Parameters [in,out] model The Model currently being constructed to which this ModelComponent should be connected. Reimplemented in OpenSim::Model , OpenSim::Millard2012EquilibriumMuscle , OpenSim::Muscle , OpenSim::Frame , OpenSim::Joint , OpenSim::Thelen2003Muscle , OpenSim::Probe , OpenSim::ExternalForce , OpenSim::CMC , OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::TwoFrameLinker< Constraint, PhysicalFrame > , OpenSim::CoordinateLimitForce , OpenSim::GeometryPath , OpenSim::PhysicalFrame , OpenSim::OffsetFrame< PhysicalFrame > , OpenSim::ExpressionBasedPointToPointForce , OpenSim::RollingOnSurfaceConstraint , OpenSim::Delp1990Muscle_Deprecated , OpenSim::PointToPointSpring , OpenSim::Controller , OpenSim::CorrectionController , OpenSim::ActivationFiberLengthMuscle , OpenSim::ActuatorPowerProbe , OpenSim::CoordinateCouplerConstraint , OpenSim::PrescribedController , OpenSim::ExpressionBasedCoordinateForce , OpenSim::ActuatorForceProbe , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::Body , OpenSim::Constraint , OpenSim::ExternalLoads , OpenSim::SpringGeneralizedForce , OpenSim::ForceSet , OpenSim::PathPoint , and OpenSim::UnilateralConstraint . ◆ extendFinalizeFromProperties() void OpenSim::ModelComponent::extendFinalizeFromProperties ( ) override protected virtual Perform any time-invariant calculations, data structure initializations, or other configuration based on the component's properties to form a functioning (but not yet connected) component. For example, each property should be checked to ensure that its value is within an acceptable range. When this method returns, the component will be marked as being up-to-date with its properties. Do not perform any configuration that depends on the SimTK::MultibodySystem; it is not available at this point. If you override this method, be sure to invoke the base class method first, using code like this: void MyComponent::extendFinalizeFromProperties() { Super::extendFinalizeFromProperties (); // invoke parent class method // ... your code goes here // ... catch invalid property values // ... initialize any internal data structures } Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Joint , OpenSim::PathSpring , OpenSim::PhysicalFrame , OpenSim::OffsetFrame< PhysicalFrame > , OpenSim::WrapObject , OpenSim::Body , OpenSim::PathPoint , OpenSim::WrapTorus , OpenSim::WrapSphere , OpenSim::WrapCylinder , OpenSim::WrapEllipsoid , OpenSim::ModelComponentSet< T > , OpenSim::ModelComponentSet< ExternalForce > , OpenSim::ModelComponentSet< ContactGeometry > , OpenSim::ModelComponentSet< WrapObject > , OpenSim::ModelComponentSet< Force > , OpenSim::ModelComponentSet< Joint > , OpenSim::ModelComponentSet< Probe > , OpenSim::ModelComponentSet< Controller > , OpenSim::ModelComponentSet< ModelComponent > , OpenSim::ModelComponentSet< Marker > , OpenSim::ModelComponentSet< Body > , and OpenSim::ModelComponentSet< Constraint > . Referenced by OpenSim::ModelComponentSet< Constraint >::extendFinalizeFromProperties() . ◆ extendPostScale() virtual void OpenSim::ModelComponent::extendPostScale ( const SimTK::State & s ,",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 17,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d2af1cf3-0166-4d86-ac45-d34d78fcea0a",
    "document_id": "doc_186",
    "content": "internal data structures } Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Joint , OpenSim::PathSpring , OpenSim::PhysicalFrame , OpenSim::OffsetFrame< PhysicalFrame > , OpenSim::WrapObject , OpenSim::Body , OpenSim::PathPoint , OpenSim::WrapTorus , OpenSim::WrapSphere , OpenSim::WrapCylinder , OpenSim::WrapEllipsoid , OpenSim::ModelComponentSet< T > , OpenSim::ModelComponentSet< ExternalForce > , OpenSim::ModelComponentSet< ContactGeometry > , OpenSim::ModelComponentSet< WrapObject > , OpenSim::ModelComponentSet< Force > , OpenSim::ModelComponentSet< Joint > , OpenSim::ModelComponentSet< Probe > , OpenSim::ModelComponentSet< Controller > , OpenSim::ModelComponentSet< ModelComponent > , OpenSim::ModelComponentSet< Marker > , OpenSim::ModelComponentSet< Body > , and OpenSim::ModelComponentSet< Constraint > . Referenced by OpenSim::ModelComponentSet< Constraint >::extendFinalizeFromProperties() . ◆ extendPostScale() virtual void OpenSim::ModelComponent::extendPostScale ( const SimTK::State & s , const ScaleSet & scaleSet ) inline protected virtual Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . This method is virtual and may be implemented by any subclass of ModelComponent , but all implementations must begin with a call to Super::extendPostScale() to execute the parent class methods before the child class method. The base class implementation in ModelComponent does nothing. See also postScale() Reimplemented in OpenSim::DeGrooteFregly2016Muscle , OpenSim::Millard2012AccelerationMuscle , OpenSim::Millard2012EquilibriumMuscle , OpenSim::Blankevoort1991Ligament , OpenSim::GeometryPath , OpenSim::PathSpring , OpenSim::Ligament , OpenSim::ActivationFiberLengthMuscle_Deprecated , and OpenSim::ActivationFiberLengthMuscle . ◆ extendPreScale() virtual void OpenSim::ModelComponent::extendPreScale ( const SimTK::State & s , const ScaleSet & scaleSet ) inline protected virtual Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . For example, a GeometryPath must calculate and store its path length in the original model before scaling so that an owning Muscle can use this information to update the properties of the muscle after scaling. This method is virtual and may be implemented by any subclass of ModelComponent , but all implementations must begin with a call to Super::extendPreScale() to execute the parent class methods before the child class method. The base class implementation in ModelComponent does nothing. See also preScale() Reimplemented in OpenSim::GeometryPath . ◆ extendScale() virtual void OpenSim::ModelComponent::extendScale ( const SimTK::State & s , const ScaleSet & scaleSet ) inline protected virtual Scale the ModelComponent . This method is virtual and may be implemented by any subclass of ModelComponent , but all implementations must begin with a call to Super::extendScale() to execute the parent class methods before the child class method. The base class implementation in ModelComponent does nothing. See also scale() Reimplemented in OpenSim::Frame , OpenSim::ScapulothoracicJoint , OpenSim::ConstantCurvatureJoint , OpenSim::OffsetFrame< PhysicalFrame > , OpenSim::EllipsoidJoint , OpenSim::CustomJoint , OpenSim::CoordinateCouplerConstraint , OpenSim::MovingPathPoint , OpenSim::Body , OpenSim::WrapObject , OpenSim::Station , OpenSim::WrapTorus , OpenSim::PathPoint , OpenSim::WrapSphere , OpenSim::WrapEllipsoid , and OpenSim::WrapCylinder . ◆ getClassName() static const std::string& OpenSim::ModelComponent::getClassName ( ) inline static This returns \"ModelComponent\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::ModelComponent::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 18,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e2366188-73c8-4161-97c0-371aa425e2ab",
    "document_id": "doc_186",
    "content": ", OpenSim::MovingPathPoint , OpenSim::Body , OpenSim::WrapObject , OpenSim::Station , OpenSim::WrapTorus , OpenSim::PathPoint , OpenSim::WrapSphere , OpenSim::WrapEllipsoid , and OpenSim::WrapCylinder . ◆ getClassName() static const std::string& OpenSim::ModelComponent::getClassName ( ) inline static This returns \"ModelComponent\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::ModelComponent::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::Component . Implemented in OpenSim::Model , OpenSim::Millard2012AccelerationMuscle , OpenSim::EspositoMiller2018Force , OpenSim::Bhargava2004SmoothedMuscleMetabolics , OpenSim::Umberger2010MuscleMetabolicsProbe , OpenSim::Millard2012EquilibriumMuscle , OpenSim::Bhargava2004MuscleMetabolicsProbe , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Blankevoort1991Ligament , OpenSim::MeyerFregly2016Force , OpenSim::ScalarActuator , OpenSim::HuntCrossleyForce , OpenSim::ElasticFoundationForce , OpenSim::Probe , OpenSim::Thelen2003Muscle , OpenSim::FunctionBasedPath , OpenSim::Joint , OpenSim::DeGrooteFregly2016Muscle , OpenSim::MuscleFixedWidthPennationModel , OpenSim::FirstOrderMuscleActivationDynamics , OpenSim::Frame , OpenSim::MuscleFirstOrderActivationDynamicModel , OpenSim::AckermannVanDenBogert2010Force , OpenSim::Muscle , OpenSim::CMC , OpenSim::SmoothSphereHalfSpaceForce , OpenSim::ExternalLoads , OpenSim::OffsetFrame< PhysicalFrame > , OpenSim::ClutchedPathSpring , OpenSim::AbstractGeometryPath , OpenSim::CoordinateLimitForce , OpenSim::PhysicalFrame , OpenSim::Delp1990Muscle_Deprecated , OpenSim::RigidTendonMuscle , OpenSim::GeometryPath , OpenSim::ModelComponentSet< T > , OpenSim::RollingOnSurfaceConstraint , OpenSim::ModelComponentSet< ExternalForce > , OpenSim::ModelComponentSet< ContactGeometry > , OpenSim::ModelComponentSet< WrapObject > , OpenSim::ModelComponentSet< Force > , OpenSim::ModelComponentSet< Joint > , OpenSim::ModelComponentSet< Probe > , OpenSim::ModelComponentSet< Controller > , OpenSim::ModelComponentSet< ModelComponent > , OpenSim::ModelComponentSet< Marker > , OpenSim::ModelComponentSet< Body > , OpenSim::ModelComponentSet< Constraint > , OpenSim::ScapulothoracicJoint , OpenSim::MuscleActivationDynamics , OpenSim::ExpressionBasedPointToPointForce , OpenSim::ExternalForce , OpenSim::Controller , OpenSim::ActivationFiberLengthMuscle , OpenSim::PathSpring , OpenSim::ExpressionBasedBushingForce , OpenSim::FunctionBasedBushingForce , OpenSim::PrescribedForce , OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::TwoFrameLinker< Constraint, PhysicalFrame > , OpenSim::ActivationFiberLengthMuscle_Deprecated , OpenSim::BushingForce , OpenSim::Ligament , OpenSim::Coordinate , OpenSim::CustomJoint , OpenSim::Schutte1993Muscle_Deprecated , OpenSim::TorqueActuator , OpenSim::BallJoint , OpenSim::CoordinateCouplerConstraint , OpenSim::BodyActuator , OpenSim::PointActuator , OpenSim::Thelen2003Muscle_Deprecated , OpenSim::PointToPointActuator , OpenSim::Actuator , OpenSim::Point , OpenSim::FreeJoint , OpenSim::UnilateralConstraint , OpenSim::ActivationCoordinateActuator , OpenSim::CoordinateActuator , OpenSim::McKibbenActuator , OpenSim::ForceSet , OpenSim::JointInternalPowerProbe , OpenSim::PhysicalOffsetFrame , OpenSim::WeldConstraint , OpenSim::ControlSetController , OpenSim::ConstantCurvatureJoint , OpenSim::EllipsoidJoint , OpenSim::CorrectionController , OpenSim::PathActuator , OpenSim::ExperimentalMarker , OpenSim::IMU , OpenSim::WrapObject , OpenSim::Set< Joint, ModelComponent > , OpenSim::Set< Marker, ModelComponent > , OpenSim::Set< T, ModelComponent > , OpenSim::Set< ContactGeometry, ModelComponent > , OpenSim::Set< Controller, ModelComponent > , OpenSim::Set< WrapObject, ModelComponent > , OpenSim::Set< Probe, ModelComponent > , OpenSim::Set< ModelComponent, ModelComponent > , OpenSim::Set< Body, ModelComponent > , OpenSim::Set< Constraint, ModelComponent > , OpenSim::Set< ExternalForce, ModelComponent > , OpenSim::Set< Force, ModelComponent > , OpenSim::SpringGeneralizedForce , OpenSim::ControllerSet , OpenSim::ExperimentalFrame , OpenSim::PinJoint , OpenSim::UniversalJoint , OpenSim::AccelerationMotion , OpenSim::PrescribedController , OpenSim::ActuatorPowerProbe , OpenSim::ContactGeometry , OpenSim::Force , OpenSim::Marker , OpenSim::MovingPathPoint , OpenSim::MuscleActiveFiberPowerProbe , OpenSim::SystemEnergyProbe , OpenSim::PointConstraint , OpenSim::Constraint , OpenSim::GimbalJoint , OpenSim::PlanarJoint , OpenSim::WrapCylinder , OpenSim::WrapEllipsoid , OpenSim::WrapSphere , OpenSim::WrapTorus , OpenSim::ActuatorForceProbe , OpenSim::ConditionalPathPoint , OpenSim::JointSet , OpenSim::Station , OpenSim::PositionMotion , OpenSim::Body , OpenSim::SliderJoint , OpenSim::WeldJoint , OpenSim::PathWrapPoint , OpenSim::ConstantMuscleActivation , OpenSim::ComponentSet , OpenSim::Ground , OpenSim::PointToPointSpring , OpenSim::ConstantDistanceConstraint , OpenSim::ZerothOrderMuscleActivationDynamics , OpenSim::ElasticFoundationForce , OpenSim::PathPoint",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 19,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c7819ba2-ee00-42fb-9d55-527cc37eeb88",
    "document_id": "doc_186",
    "content": "ModelComponent > , OpenSim::Set< Body, ModelComponent > , OpenSim::Set< Constraint, ModelComponent > , OpenSim::Set< ExternalForce, ModelComponent > , OpenSim::Set< Force, ModelComponent > , OpenSim::SpringGeneralizedForce , OpenSim::ControllerSet , OpenSim::ExperimentalFrame , OpenSim::PinJoint , OpenSim::UniversalJoint , OpenSim::AccelerationMotion , OpenSim::PrescribedController , OpenSim::ActuatorPowerProbe , OpenSim::ContactGeometry , OpenSim::Force , OpenSim::Marker , OpenSim::MovingPathPoint , OpenSim::MuscleActiveFiberPowerProbe , OpenSim::SystemEnergyProbe , OpenSim::PointConstraint , OpenSim::Constraint , OpenSim::GimbalJoint , OpenSim::PlanarJoint , OpenSim::WrapCylinder , OpenSim::WrapEllipsoid , OpenSim::WrapSphere , OpenSim::WrapTorus , OpenSim::ActuatorForceProbe , OpenSim::ConditionalPathPoint , OpenSim::JointSet , OpenSim::Station , OpenSim::PositionMotion , OpenSim::Body , OpenSim::SliderJoint , OpenSim::WeldJoint , OpenSim::PathWrapPoint , OpenSim::ConstantMuscleActivation , OpenSim::ComponentSet , OpenSim::Ground , OpenSim::PointToPointSpring , OpenSim::ConstantDistanceConstraint , OpenSim::ZerothOrderMuscleActivationDynamics , OpenSim::ElasticFoundationForce , OpenSim::PathPoint , OpenSim::ProbeSet , OpenSim::PointOnLineConstraint , OpenSim::WrapObjectSet , OpenSim::DiscreteForces , OpenSim::AbstractPathPoint , OpenSim::ContactGeometrySet , OpenSim::ContactHalfSpace , OpenSim::HuntCrossleyForce , OpenSim::BodySet , OpenSim::ConstraintSet , OpenSim::ContactMesh , OpenSim::MarkerSet , OpenSim::ContactSphere , OpenSim::ExpressionBasedCoordinateForce , OpenSim::DiscreteController , and OpenSim::StationPlaneContactForce . ◆ getModel() const Model & OpenSim::ModelComponent::getModel ( ) const Get a const reference to the Model this component is part of. Referenced by OpenSim::MocoPhase::getModel() . ◆ getScaleFactors() const SimTK::Vec3& OpenSim::ModelComponent::getScaleFactors ( const ScaleSet & scaleSet , const Frame & frame ) const protected Get the scale factors corresponding to the base OpenSim::Body of the specified Frame . Returns ModelComponent::InvalidScaleFactors if the ScaleSet does not contain scale factors for the base Body . ◆ hasModel() bool OpenSim::ModelComponent::hasModel ( ) const inline Does this ModelComponent have a Model associated with it? ◆ postScale() void OpenSim::ModelComponent::postScale ( const SimTK::State & s , const ScaleSet & scaleSet ) Perform any computations that must occur after ModelComponent::scale() has been invoked on all ModelComponents in the Model . This method calls the virtual extendPostScale() method, which may be implemented by any subclass of ModelComponent . See also preScale() scale() extendPostScale() ◆ preScale() void OpenSim::ModelComponent::preScale ( const SimTK::State & s , const ScaleSet & scaleSet ) Perform any computations that must occur before ModelComponent::scale() is invoked on all ModelComponents in the Model . For example, a GeometryPath must calculate and store its path length in the original model before scaling so that an owning Muscle can use this information to update the properties of the muscle after scaling. This method calls the virtual extendPreScale() method, which may be implemented by any subclass of ModelComponent . See also extendPreScale() scale() postScale() ◆ safeDownCast() static ModelComponent * OpenSim::ModelComponent::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = ModelComponent.safeDownCast(obj) . This is equivalent to dynamic_cast<ModelComponent*>(obj) in C++. ◆ scale() void OpenSim::ModelComponent::scale ( const SimTK::State & s , const ScaleSet & scaleSet ) Scale the ModelComponent . This method calls the virtual extendScale() method, which may be implemented by any subclass of ModelComponent . See also preScale() extendScale() postScale() ◆ updateFromXMLNode() void OpenSim::ModelComponent::updateFromXMLNode ( SimTK::Xml::Element & node , int versionNumber ) override protected virtual Handle a change in XML syntax for Sockets. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Joint , OpenSim::Coordinate , OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::TwoFrameLinker< Constraint, PhysicalFrame > , OpenSim::Probe , OpenSim::PhysicalFrame , OpenSim::RollingOnSurfaceConstraint , OpenSim::WrapObject , OpenSim::CustomJoint , OpenSim::PointToPointSpring , OpenSim::PrescribedForce",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 20,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "01f388cb-1161-440b-acba-faa5267d665e",
    "document_id": "doc_186",
    "content": "dynamic_cast<ModelComponent*>(obj) in C++. ◆ scale() void OpenSim::ModelComponent::scale ( const SimTK::State & s , const ScaleSet & scaleSet ) Scale the ModelComponent . This method calls the virtual extendScale() method, which may be implemented by any subclass of ModelComponent . See also preScale() extendScale() postScale() ◆ updateFromXMLNode() void OpenSim::ModelComponent::updateFromXMLNode ( SimTK::Xml::Element & node , int versionNumber ) override protected virtual Handle a change in XML syntax for Sockets. Reimplemented from OpenSim::Component . Reimplemented in OpenSim::Joint , OpenSim::Coordinate , OpenSim::TwoFrameLinker< Force, PhysicalFrame > , OpenSim::TwoFrameLinker< Constraint, PhysicalFrame > , OpenSim::Probe , OpenSim::PhysicalFrame , OpenSim::RollingOnSurfaceConstraint , OpenSim::WrapObject , OpenSim::CustomJoint , OpenSim::PointToPointSpring , OpenSim::PrescribedForce , OpenSim::Constraint , OpenSim::ConstantDistanceConstraint , OpenSim::PointConstraint , OpenSim::MovingPathPoint , and OpenSim::PointOnLineConstraint . ◆ updModel() Model & OpenSim::ModelComponent::updModel ( ) Get a modifiable reference to the Model this component is part of. Referenced by OpenSim::MocoPhase::updModel() , and OpenSim::MocoProblem::updModel() . Friends And Related Function Documentation ◆ ModelComponentSet template<class T > friend class ModelComponentSet friend Member Data Documentation ◆ _model SimTK::ReferencePtr< Model > OpenSim::ModelComponent::_model protected The model this component belongs to. Referenced by OpenSim::Joint::setCoordinateModel() . ◆ InvalidScaleFactors const SimTK::Vec3 OpenSim::ModelComponent::InvalidScaleFactors static protected Returned by getScaleFactors() if the ScaleSet does not contain scale factors for the base Body associated with the specified Frame . The documentation for this class was generated from the following file: OpenSim/Simulation/Model/ModelComponent.h OpenSim ModelComponent Generated on Thu Mar 21 2024 15:02:57 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1ModelComponent.html",
      "title": "API: OpenSim::ModelComponent Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1ModelComponent.html"
      ],
      "content_type": "api",
      "position": 21,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "bd1db3d1-95d5-4567-936d-61f2dd6df9ad",
    "document_id": "doc_181",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53088743/OpenSim+Fellows",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53088743",
        "OpenSim+Fellows"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "de8c48ff-7029-4ce8-9c18-134da051dd4e",
    "document_id": "doc_142",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53088371/Theory+and+Publications",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53088371",
        "Theory+and+Publications"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9a59903c-e86e-4cac-bec9-825d9a138f12",
    "document_id": "doc_110",
    "content": "Ayman Habib, Jennifer Hicks, Scott Delp, Ajay Seth, Joy Ku, Matt Petrucci, Carmichael Ong, Thomas Uchida, Nicholas Bianco, Diane Bush, Jacqueline Tran Forum Statistics and Usage SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/phpBB/indexPhpbb.php?f=91",
      "title": "SimTK: OpenSim: phpBB",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Forum Moderators:",
      "hierarchy": [
        "plugins",
        "phpBB",
        "indexPhpbb.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2fab0ee6-ff74-4c14-a6db-f982c20fa654",
    "document_id": "doc_163",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53114247/Introductory+Examples",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53114247",
        "Introductory+Examples"
      ],
      "content_type": "example",
      "position": 0,
      "tags": [
        "example",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d1787506-71c5-4f2b-8f2b-2a373ff23f5b",
    "document_id": "doc_57",
    "content": "No results",
    "metadata": {
      "source": "http://opensim.stanford.edu/support/index.html",
      "title": "Page not found – OpenSim Community",
      "section": "",
      "hierarchy": [
        "support",
        "index.html"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1a21d118-5d41-4fe1-9be6-7f9223c97f8f",
    "document_id": "doc_15",
    "content": "SCONE 2.4.1 SCONE: Open Source Software for Predictive Simulation Feb 27, 2025 New publication at the IFAC-PapersOnLine Predictive framework for functional electrical stimulation (FES) cycling Nov 22, 2024 Publications Sampaio de Oliveira ML, Uchida TK. Phenomenological muscle constitutive model with actin–titin binding for simulating active stretching. Journal of Biomechanical Engineering 147(1): 011002, 2025. Predictive Framework for Electrical Stimulation Cycling in Spinal Cord Injury The Neuromusculoskeletal Modeling Pipeline: MATLAB-based Model Personalization and Treatment Optimization Functionality for OpenSim Discussion Re: MocoTrack - GRF Parameter Tuning & Convergence Issues OpenSim Moco Mar 29, 2025 Re: Tutorial may conflict with opensim 4.5 OpenSim Mar 28, 2025 SO runs OK in gui but error in API OpenSim Mar 27, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=409&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "Physics-Based Simulation Physics and computation are a powerful combination used to understand biological form and function to create novel drugs, synthetic tissues, medical devices, and surgical interventions Featured projects Recently updated projects total projects 115 projects with downloads Search projects in this category News New Calibrated Knee Models and Dataset Validation of Subject-Specific Knee Models from In Vivo Measurements Mar 20, 2025 New release:",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "d267e6d5-33f0-428e-be9b-a8fc791b792e",
    "document_id": "doc_165",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53114340/Advanced+Examples",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53114340",
        "Advanced+Examples"
      ],
      "content_type": "example",
      "position": 0,
      "tags": [
        "example",
        "general",
        "advanced"
      ]
    }
  },
  {
    "id": "9aabee66-9d29-43a2-ad54-fa5034b3148f",
    "document_id": "doc_124",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53084226/Overview+of+OpenSim+Workflows",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53084226",
        "Overview+of+OpenSim+Workflows"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1d5db566-0f74-430f-bb2c-6b3d11f30cb1",
    "document_id": "doc_191",
    "content": "API 4.5 For C++ developers List of all members | Public Member Functions | Public Types | Static Public Member Functions | Protected Member Functions | Protected Attributes OpenSim::Function Class Reference abstract An abstract class for representing a function. More... Inheritance diagram for OpenSim::Function: Public Member Functions Function () Function (const Function &aFunction) virtual ~Function () virtual void init ( Function *aFunction) Function & operator= (const Function &aFunction) virtual double calcValue (const SimTK::Vector &x) const Calculate the value of this function at a particular point. More... virtual double calcDerivative (const std::vector< int > &derivComponents, const SimTK::Vector &x) const Calculate a partial derivative of this function at a particular point. More... virtual int getArgumentSize () const Get the number of components expected in the input vector. More... virtual int getMaxDerivativeOrder () const Get the maximum derivative order this Function object can calculate. More... virtual SimTK::Function * createSimTKFunction () const =0 Return a SimTK::Function that can be used natively by the underlying SimTK::System and its elements. More... Public Member Functions inherited from OpenSim::Object virtual ~Object () Virtual destructor for cleanup. More... bool isEqualTo (const Object &aObject) const Equality operator wrapper for use from languages not supporting operator overloading. More... Object & operator= (const Object &aObject) Copy assignment copies he base class fields, including the properties. More... virtual bool operator== (const Object &aObject) const Determine if two objects are equal. More... virtual bool operator< (const Object &aObject) const Provide an ordering for objects so they can be put in sorted containers. More... void setName (const std::string &name) Set the name of the Object . More... const std::string & getName () const Get the name of this Object . More... void setDescription (const std::string &description) Set description, a one-liner summary. More... const std::string & getDescription () const Get description, a one-liner summary. More... const std::string & getAuthors () const Get Authors of this Object . More... void setAuthors (const std::string &authors) Set Authors of this object. More... const std::string & getReferences () const Get references or publications to cite if using this object. More... void setReferences (const std::string &references) Set references or publications to cite if using this object. More... int getNumProperties () const Determine how many properties are stored with this Object. More... const AbstractProperty & getPropertyByIndex (int propertyIndex) const Get a const reference to a property by its index number, returned as an AbstractProperty . More... AbstractProperty & updPropertyByIndex (int propertyIndex) Get a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7e95bb73-8aa4-49ee-9cc9-323f22b14346",
    "document_id": "doc_191",
    "content": "a writable reference to a property by its index number, returned as an AbstractProperty . More... bool hasProperty (const std::string &name) const Return true if this Object has a property of any type with the given name , which must not be empty. More... const AbstractProperty & getPropertyByName (const std::string &name) const Get a const reference to a property by its name, returned as an AbstractProperty . More... AbstractProperty & updPropertyByName (const std::string &name) Get a writable reference to a property by its name, returned as an AbstractProperty . More... template<class T > bool hasProperty () const Return true if this Object contains an unnamed, one-object property that contains objects of the given template type T. More... template<class T > const Property < T > & getProperty (const PropertyIndex &index) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > const Property < T > & getPropertyByName (const std::string &name) const Get property of known type Property <T> as a const reference; the property must be present and have the right type. More... template<class T > Property < T > & updProperty (const PropertyIndex &index) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... template<class T > Property < T > & updPropertyByName (const std::string &name) Get property of known type Property <T> as a writable reference; the property must be present and have the right type. More... bool isObjectUpToDateWithProperties () const Returns true if no property's value has changed since the last time setObjectIsUpToDateWithProperties() was called. More... void readObjectFromXMLNodeOrFile (SimTK::Xml::Element &objectElement, int versionNumber) We're given an XML element from which we are to populate this Object. More... virtual void updateFromXMLNode (SimTK::Xml::Element &objectElement, int versionNumber) Use this method to deserialize an object from a SimTK::Xml::Element. More... void updateXMLNode (SimTK::Xml::Element &parent, const AbstractProperty *prop=nullptr) const Serialize this object into the XML node that represents it. More... bool getInlined () const Inlined means an in-memory Object that is not associated with an XMLDocument . More... void setInlined (bool aInlined, const std::string &aFileName=\"\") Mark this as inlined or not and optionally provide a file name to associate with the new XMLDocument for the non-inline case. More... std::string getDocumentFileName () const If there is a document associated with this object then return the file name maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 1,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2e76b8b0-555f-4090-be70-73934de5fe8f",
    "document_id": "doc_191",
    "content": "maintained by the document. More... int getDocumentFileVersion () const If there is a document associated with this object then return its version number. More... void setAllPropertiesUseDefault (bool aUseDefault) bool print (const std::string &fileName) const Write this Object into an XML file of the given name; conventionally the suffix to use is \".osim\". More... std::string dump () const dump the XML representation of this Object into an std::string and return it. More... virtual bool isA (const char *type) const The default implementation returns true only if the supplied string is \"Object\"; each Object-derived class overrides this to match its own class name. More... const std::string & toString () const Wrapper to be used on Java side to display objects in tree; this returns just the object's name. More... PropertySet & getPropertySet () OBSOLETE: Get a reference to the PropertySet maintained by the Object . More... const PropertySet & getPropertySet () const Public Types typedef Function Self This typedef might be useful within the member functions of this class. More... typedef Object Super Use this typedef to refer to the superclass of this class. More... Static Public Member Functions static Function * makeFunctionOfType ( Function *aFunction, const std::string &aNewTypeName) Static Public Member Functions inherited from OpenSim::Object static void registerType (const Object &defaultObject) Register an instance of a class; if the class is already registered it will be replaced. More... static void renameType (const std::string &oldTypeName, const std::string &newTypeName) Support versioning by associating the current Object type with an old name. More... static const Object * getDefaultInstanceOfType (const std::string &concreteClassName) Return a pointer to the default instance of the registered (concrete) Object whose class name is given, or NULL if the type is not registered. More... template<class T > static bool isObjectTypeDerivedFrom (const std::string &concreteClassName) Return true if the given concrete object type represents a subclass of the template object type T, and thus could be referenced with a T*. More... static Object * newInstanceOfType (const std::string &concreteClassName) Create a new instance of the concrete Object type whose class name is given as concreteClassName . More... static void getRegisteredTypenames ( Array < std::string > &typeNames) Retrieve all the typenames registered so far. More... template<class T > static void getRegisteredObjectsOfGivenType ( ArrayPtrs < T > &rArray) Return an array of pointers to the default instances of all registered (concrete) Object types that derive from a given Object-derived type that does not have to be concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 2,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c499a6ac-bb08-4267-ba2a-9eb70500ef2d",
    "document_id": "doc_191",
    "content": "concrete. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &classNameDotPropertyName, bool printFlagInfo=true) Dump formatted property information to a given output stream, useful for creating a \"help\" facility for registered objects. More... static bool PrintPropertyInfo (std::ostream &os, const std::string &className, const std::string &propertyName, bool printFlagInfo=true) Same as the other signature but the class name and property name are provided as two separate strings. More... static Object * makeObjectFromFile (const std::string &fileName) Create an OpenSim object whose type is based on the tag at the root node of the XML file passed in. More... static const std::string & getClassName () Return the name of this class as a string; i.e., \"Object\". More... static void setSerializeAllDefaults (bool shouldSerializeDefaults) Static function to control whether all registered objects and their properties are written to the defaults section of output files rather than only those values for which the default was explicitly overwritten when read in from an input file or set programmatically. More... static bool getSerializeAllDefaults () Report the value of the \"serialize all defaults\" flag. More... static bool isKindOf (const char *type) Returns true if the passed-in string is \"Object\"; each Object-derived class defines a method of this name for its own class name. More... static void setDebugLevel (int newLevel) Set the amount of logging output. More... static int getDebugLevel () Get the current setting of debug level. More... static Object * SafeCopy (const Object *aObject) Use the clone() method to duplicate the given object unless the pointer is null in which case null is returned. More... static void RegisterType (const Object &defaultObject) OBSOLETE alternate name for registerType() . More... static void RenameType (const std::string &oldName, const std::string &newName) OBSOLETE alternate name for renameType() . More... Protected Member Functions void resetFunction () This should be called whenever this object has been modified. More... Protected Member Functions inherited from OpenSim::Object Object () The default constructor is only for use by constructors of derived types. More... Object (const std::string &fileName, bool aUpdateFromXMLNode=true) Constructor from a file, to be called from other constructors that take a file as input. More... Object (const Object &source) Copy constructor is invoked automatically by derived classes with default copy constructors; otherwise it must be invoked explicitly. More... Object (SimTK::Xml::Element &aElement) Construct the base class portion of an Object from a given Xml element that describes this Object . More... template<class T > PropertyIndex addProperty (const std::string &name, const std::string &comment, const T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 3,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3d8911b2-07dc-446f-a5cc-3e698caa285f",
    "document_id": "doc_191",
    "content": "T &value) Define a new single-value property of known type T, with the given name , associated comment , and initial value . More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addOptionalProperty (const std::string &name, const std::string &comment, const T &value) Add an optional property, meaning it can contain either no value or a single value. More... template<class T > PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize) Define a new list-valued property of known type T, with the given name , associated comment , minimum (==0) and maximum (>0) allowable list lengths, and a zero-length initial value. More... template<class T , template< class > class Container> PropertyIndex addListProperty (const std::string &name, const std::string &comment, int minSize, int maxSize, const Container< T > &valueList) Define a new list-valued property as above, but assigning an initial value via some templatized container class that supports size() and indexing. More... PropertyIndex getPropertyIndex (const std::string &name) const Look up a property by name and return its PropertyIndex if it is found. More... template<class T > PropertyIndex getPropertyIndex () const Look up an unnamed property by the type of object it contains, and return its PropertyIndex if it is found. More... template<class T > void checkPropertyValueIsPositive (const Property < T > &p) const Throw an exception if any of the property's values are not positive. More... template<class T > void checkPropertyValueIsInSet (const Property < T > &p, const std::set< T > &set) const Throw an exception if any of the property's values are not in the provided set. More... template<class T > void checkPropertyValueIsInRangeOrSet (const Property < T > &p, const T &lower, const T &upper, const std::set< T > &set) const Throw an exception if any of the property's values are neither in the provided range nor in the provided set. More... void setObjectIsUpToDateWithProperties () When an object is initialized using the current values of its properties, it can set a flag indicating that it is up to date. More... void clearObjectIsUpToDateWithProperties () For testing or debugging purposes, manually clear the \"object is up to date with respect to properties\" flag. More... void makeObjectNamesConsistentWithProperties () Make sure the name of an object is consistent with its property type. More... void updateFromXMLDocument () Use this method only if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Protected Attributes SimTK::Function * _function Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 4,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "3b348f9e-3170-4c0c-8184-2f0dfdcf5198",
    "document_id": "doc_191",
    "content": "if you're deserializing from a file and the object is at the top level; that is, primarily in constructors that take a file name as input. More... void setDocument ( XMLDocument *doc) Unconditionally set the XMLDocument associated with this object. More... const XMLDocument * getDocument () const Get a const pointer to the document (if any) associated with this object. More... XMLDocument * updDocument () Get a writable pointer to the document (if any) associated with this object. More... Protected Attributes SimTK::Function * _function Protected Attributes inherited from OpenSim::Object PropertySet _propertySet OBSOLETE: Property_Deprecated set for serializable member variables of this and derived classes. More... Auto-generated functions static Function * safeDownCast ( OpenSim::Object *obj) For use in MATLAB and Python to access the concrete class. More... static const std::string & getClassName () This returns \"Function\". More... void assign ( Object &aObject) override This allows copy assignment in the Java GUI. More... Function * clone () const override=0 Create a new heap-allocated copy of the concrete object to which this Object refers. More... const std::string & getConcreteClassName () const override=0 Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. More... Additional Inherited Members Static Public Attributes inherited from OpenSim::Object static const std::string DEFAULT_NAME Name used for default objects when they are serialized. More... Related Functions inherited from OpenSim::Object #define OpenSim_DECLARE_CONCRETE_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any non-templatized, concrete class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_ABSTRACT_OBJECT (ConcreteClass, SuperClass) Macro to be included as the first line of the class declaration for any still-abstract class that derives from OpenSim::Object . More... #define OpenSim_DECLARE_CONCRETE_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, concrete class that derives from OpenSim::Object , like Set <T>. More... #define OpenSim_DECLARE_ABSTRACT_OBJECT_T (ConcreteClass, TArg, SuperClass) Macro to be included as the first line of the class declaration for any templatized, still-abstract class that derives from OpenSim::Object . More... Detailed Description An abstract class for representing a function. A function is a relation between independent variables and a dependent value such that for any particular set of independent variables there is only one unique dependent value. Values of the function and its derivatives are obtained by calling the calcValue() method. The curve may or may not be finite or differentiable; the calcValue() method returns values between - SimTK::Infinity and SimTK::Infinity , or it returns SimTK::NaN (not a number) if the curve is not defined. Currently, functions of up to 3 variables (x,y,z) are supported. Author Frank C. Anderson Member Typedef Documentation ◆ Self typedef Function OpenSim::Function::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Object OpenSim::Function::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 5,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cfa836d4-9e37-45b0-9644-e5cc5b05837f",
    "document_id": "doc_191",
    "content": "the calcValue() method returns values between - SimTK::Infinity and SimTK::Infinity , or it returns SimTK::NaN (not a number) if the curve is not defined. Currently, functions of up to 3 variables (x,y,z) are supported. Author Frank C. Anderson Member Typedef Documentation ◆ Self typedef Function OpenSim::Function::Self This typedef might be useful within the member functions of this class. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ Super typedef Object OpenSim::Function::Super Use this typedef to refer to the superclass of this class. Avoid using the explicit type name of the superclass; this would introduce bugs if the superclass is changed. This is generated by the OpenSim_DECLARE_*_OBJECT macros. Constructor & Destructor Documentation ◆ Function() [1/2] OpenSim::Function::Function ( ) ◆ Function() [2/2] OpenSim::Function::Function ( const Function & aFunction ) ◆ ~Function() virtual OpenSim::Function::~Function ( ) virtual Member Function Documentation ◆ assign() void OpenSim::Function::assign ( Object & aObject ) inline override This allows copy assignment in the Java GUI. Exceptions Exception if the argument is not of type Function . ◆ calcDerivative() virtual double OpenSim::Function::calcDerivative ( const std::vector< int > & derivComponents , const SimTK::Vector & x ) const virtual Calculate a partial derivative of this function at a particular point. Which derivative to take is specified by listing the input components with which to take it. For example, if derivComponents=={0}, that indicates a first derivative with respective to component 0. If derivComponents=={0, 0, 0}, that indicates a third derivative with respective to component 0. If derivComponents=={4, 7}, that indicates a partial second derivative with respect to components 4 and 7. Parameters derivComponents the input components with respect to which the derivative should be taken. Its size must be less than or equal to the value returned by getMaxDerivativeOrder() . x the Vector of input arguments. Its size must equal the value returned by getArgumentSize() . Reimplemented in OpenSim::FiberCompressiveForceCosPennationCurve , OpenSim::ForceVelocityCurve , OpenSim::FiberForceLengthCurve , OpenSim::ForceVelocityInverseCurve , OpenSim::TendonForceLengthCurve , OpenSim::FiberCompressiveForceLengthCurve , OpenSim::ActiveForceLengthCurve , OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultiplierFunction , and OpenSim::Sine . ◆ calcValue() virtual double OpenSim::Function::calcValue ( const SimTK::Vector & x ) const virtual Calculate the value of this function at a particular point. Parameters x the Vector of input arguments. its size must equal the value returned by getArgumentSize() . Reimplemented in OpenSim::FiberCompressiveForceCosPennationCurve , OpenSim::ForceVelocityCurve , OpenSim::FiberForceLengthCurve , OpenSim::ForceVelocityInverseCurve , OpenSim::TendonForceLengthCurve , OpenSim::FiberCompressiveForceLengthCurve , OpenSim::ActiveForceLengthCurve , OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultiplierFunction , OpenSim::Constant , and OpenSim::Sine . ◆ clone() Function * OpenSim::Function::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Object . Implemented",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 6,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "4593f6d7-fda1-4bc9-96ce-ae1238f02e36",
    "document_id": "doc_191",
    "content": "Function * OpenSim::Function::clone ( ) const override pure virtual Create a new heap-allocated copy of the concrete object to which this Object refers. It is up to the caller to delete the returned object when no longer needed. Every concrete object deriving from Object implements this pure virtual method automatically, via the declaration macro it invokes (e.g., OpenSim_DECLARE_CONCRETE_OBJECT() ). Note that the concrete class overrides modify the return type to be a pointer to the concrete object; that still overrides the base class method because the return type is covariant with (that is, derives from) Object. Implements OpenSim::Object . Implemented in OpenSim::FiberForceLengthCurve , OpenSim::TendonForceLengthCurve , OpenSim::ForceVelocityCurve , OpenSim::ActiveForceLengthCurve , OpenSim::ForceVelocityInverseCurve , OpenSim::FiberCompressiveForceCosPennationCurve , OpenSim::GCVSpline , OpenSim::MultivariatePolynomialFunction , OpenSim::FiberCompressiveForceLengthCurve , OpenSim::StepFunction , OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultiplierFunction , OpenSim::LinearFunction , OpenSim::Sine , OpenSim::Constant , and OpenSim::PolynomialFunction . ◆ createSimTKFunction() virtual SimTK::Function* OpenSim::Function::createSimTKFunction ( ) const pure virtual Return a SimTK::Function that can be used natively by the underlying SimTK::System and its elements. Implemented in OpenSim::GCVSpline , OpenSim::StepFunction , OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultivariatePolynomialFunction , OpenSim::MultiplierFunction , OpenSim::LinearFunction , OpenSim::Sine , OpenSim::PolynomialFunction , and OpenSim::Constant . ◆ getArgumentSize() virtual int OpenSim::Function::getArgumentSize ( ) const virtual Get the number of components expected in the input vector. Reimplemented in OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultiplierFunction , and OpenSim::Sine . ◆ getClassName() static const std::string& OpenSim::Function::getClassName ( ) inline static This returns \"Function\". See getConcreteClassName() if you want the class name of the underlying concrete object instead. This is generated by the OpenSim_DECLARE_*_OBJECT macros. ◆ getConcreteClassName() const std::string& OpenSim::Function::getConcreteClassName ( ) const override pure virtual Returns the class name of the concrete Object-derived class of the actual object referenced by this Object, as a string. This is the string that is used as the tag for this concrete object in an XML file. Every concrete class derived from Object automatically overrides this method via the declaration macro it uses. See getClassName() to get the class name of the referencing (possibly abstract) class rather than the concrete object. See also getClassName() Implements OpenSim::Object . Implemented in OpenSim::FiberForceLengthCurve , OpenSim::TendonForceLengthCurve , OpenSim::ForceVelocityCurve , OpenSim::ActiveForceLengthCurve , OpenSim::ForceVelocityInverseCurve , OpenSim::FiberCompressiveForceCosPennationCurve , OpenSim::GCVSpline , OpenSim::MultivariatePolynomialFunction , OpenSim::FiberCompressiveForceLengthCurve , OpenSim::StepFunction , OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultiplierFunction , OpenSim::LinearFunction , OpenSim::Sine , OpenSim::Constant , and OpenSim::PolynomialFunction . ◆ getMaxDerivativeOrder() virtual int OpenSim::Function::getMaxDerivativeOrder ( ) const virtual Get the maximum derivative order this Function object can calculate. Reimplemented in OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultiplierFunction , and OpenSim::Sine . ◆ init() virtual void OpenSim::Function::init ( Function * aFunction ) inline virtual Reimplemented in OpenSim::SimmSpline , OpenSim::PiecewiseLinearFunction , OpenSim::PiecewiseConstantFunction , and OpenSim::MultiplierFunction . ◆ makeFunctionOfType() static Function * OpenSim::Function::makeFunctionOfType ( Function * aFunction , const std::string & aNewTypeName ) static ◆ operator=() Function & OpenSim::Function::operator= ( const Function & aFunction ) ◆ resetFunction() void OpenSim::Function::resetFunction ( ) protected This should be called whenever this object has been modified. It clears the internal SimTK::Function object used to evaluate it. ◆ safeDownCast() static Function * OpenSim::Function::safeDownCast ( OpenSim::Object",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 7,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "dce307e0-4264-4f31-b135-fac1be0cc84b",
    "document_id": "doc_191",
    "content": "calculate. Reimplemented in OpenSim::SimmSpline , OpenSim::PiecewiseConstantFunction , OpenSim::PiecewiseLinearFunction , OpenSim::MultiplierFunction , and OpenSim::Sine . ◆ init() virtual void OpenSim::Function::init ( Function * aFunction ) inline virtual Reimplemented in OpenSim::SimmSpline , OpenSim::PiecewiseLinearFunction , OpenSim::PiecewiseConstantFunction , and OpenSim::MultiplierFunction . ◆ makeFunctionOfType() static Function * OpenSim::Function::makeFunctionOfType ( Function * aFunction , const std::string & aNewTypeName ) static ◆ operator=() Function & OpenSim::Function::operator= ( const Function & aFunction ) ◆ resetFunction() void OpenSim::Function::resetFunction ( ) protected This should be called whenever this object has been modified. It clears the internal SimTK::Function object used to evaluate it. ◆ safeDownCast() static Function * OpenSim::Function::safeDownCast ( OpenSim::Object * obj ) inline static For use in MATLAB and Python to access the concrete class. Example: cObj = Function.safeDownCast(obj) . This is equivalent to dynamic_cast<Function*>(obj) in C++. Member Data Documentation ◆ _function SimTK::Function* OpenSim::Function::_function mutable protected The documentation for this class was generated from the following file: OpenSim/Common/Function.h OpenSim Function Generated on Thu Mar 21 2024 15:02:53 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/classOpenSim_1_1Function.html",
      "title": "API: OpenSim::Function Class Reference",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs",
        "classOpenSim_1_1Function.html"
      ],
      "content_type": "api",
      "position": 8,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "2780357a-2c3a-4509-ad24-f0ceb1b0a1a8",
    "document_id": "doc_58",
    "content": "Downloads Summary Summary Statistics Unique Users 1 Total Downloads File Downloads Links Unique Downloads 2 103,213 836,655 392,826 443,829 303,578 Unique Users 1 Total 3 Downloads 3 (non-documentation) Documentation 3 Links * OpenSim 100700 100141 4495 7342 OpenSim 4.5 17183 17122 710 OpenSim 4.4 18811 18750 782 OpenSim 4.3 11569 11529 586 OpenSim 4.2 5118 5092 294 OpenSim 4.1 14475 14428 652 OpenSim 4.0 15187 14271 1945 OpenSim 3.3 21343 21262 1788 OpenSim 3.2 6778 6734 828 OpenSim 3.1 3734 3703 491 OpenSim 3.0.1 1484 1440 312 OpenSim 3.0 2339 2297 487 OpenSim 2.4 4165 4116 562 493 OpenSim 2.2.1 1578 1439 702 OpenSim 2.2 1637 1444 794 OpenSim 2.1.0 0 0 OpenSim 2.0.2 1387 1191 825 OpenSim 2.0.1 948 877 504 OpenSim 2.0 513 481 184 OpenSim 1.9.1 1257 1217 453 OpenSim 1.8.1 1004 937 505 OpenSim 1.8 572 541 235 OpenSim 1.5.5 1834 1117 1248 7 OpenSim 1.5 478 462 226 OpenSim 1.1 742 709 355 OpenSim 1.0 453 420 226 OpenSim Source Code 6571 6444 2854 OpenSim 4.0 2303 2303 OpenSim 3.3 3301 3235 2274 OpenSim 3.2 931 885 369 OpenSim 3.1 499 466 205 OpenSim 3.0.1 212 189 80 OpenSim 3.0 428 402 194 OpenSim Models and Examples 23597 23138 11251 OpenSim 4.0 11270 11175 6188 OpenSim Models 3.3 7105 6811 4738 OpenSim Models 3.2 8300 8138 647 OpenSim Models 3.1 2587 2491 331 Github Source Code Repository 1053 1053 Github Master Branch 1053 1053 1 Downloads where user information was not gathered count as one user. May include hidden packages. 2 Includes both files and links. A file downloaded multiple times by the same user counts as one 3 Number of users that downloaded a file in this category * Number of users that clicked on a link (only tracked since June 2010) SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/reports/index.php?type=group&group_id=91&reports=reports",
      "title": "SimTK: OpenSim: Downloads Summary",
      "section": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Statistics:",
      "hierarchy": [
        "plugins",
        "reports",
        "index.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "dbb55634-0011-4c29-a414-852a5d4b4ae2",
    "document_id": "doc_47",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Choose a tracker and you can browse/edit/add items to it. Tracker Description Open Total Bugs Bug Tracking System 333 928 Features Feature Request Tracking System 138 245 Suggested Ideas Suggested Idea Tracking System 22 22 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/tracker/?group_id=91",
      "title": "SimTK: OpenSim: Features & Bugs",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "05965082-09e1-45d9-8d81-a0add319fd44",
    "document_id": "doc_101",
    "content": "Neuromuscular Models for the Predictive Treatment of Parkinson's Disease Share Follow Project Follow publicly Follow privately Unfollow See followers (6) List Map More info 945 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow This project aims to model and simulate the function of the brain and of the neuromuscular system as a whole, in order to explore new treatments of Parkinson's Disease. Download Latest Releases Saccade Simulator: SaccadeSimulator.zip License: Saccade Simulator NoTremor aims to provide patient specific computational models of the coupled brain and neuromuscular systems that will be subsequently used to improve the quality of analysis, prediction and progression of Parkinson’s disease. In particular, it aspires to establish the neglected link between brain modelling and neuromuscular systems that will result in a holistic representation of the physiology for PD patients. 124 downloads 2 forum posts 6 followers Last updated Sep 4, 2017 Project Statistics Join Mailing Lists Suggest Idea Chris Papapavlou Dimitar Stanev Konstantinos Moustakas People also viewed Evaluation of In Vivo Knee Load Predictions Using... EMG-informed Computed Muscle Control for Dynamic... Are subject-specific musculoskeletal... Spasticity model in OpenSim MB Knee: Multibody Models of the Human Knee Simulations of Crouch Gait Below-Knee Amputee Model Stiff-knee walking simulations See all An OpenSim plugin to minimize joint reaction forces and... Efficient Methods for Multi-Domain Biomechanical... A Visualization Tool for OpenSim Functional Electrical Stimulation... Multidimensional Cubic B-Spline Model of the Scapulothoracic Joint Dynamic Musculoskeletal Model of the... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/notremor",
      "title": "SimTK: Neuromuscular Models for the Predictive Treatment of Parkinson's Disease: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "notremor"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "fc519d43-d6fd-4691-bee8-bceef86fda26",
    "document_id": "doc_9",
    "content": "Protein Biocomputations complement experimental techniques to expand our understanding of proteins, molecules which carry out critical functions within our bodies and which have been associated with diseases such as Alzheimer's and cystic fibrosis. Featured projects Recently updated projects total projects 64 projects with downloads Search projects in this category News ForceBalance version 1.7.0 released! ForceBalance : Systematic Force Field Optimization Dec 3, 2019 OpenSim gets high marks as a multibody system simulator Simbody: Multibody Physics API Aug 3, 2015 Macromolecular Simulation Software Workshop featuring OpenMM OpenMM Jul 15, 2015 Publications SBMOpenMM: A Builder of Structure-Based Models for OpenMM P. Eastman, J. Swails, J. D. Chodera, R. T. McGibbon, Y. Zhao, K. A. Beauchamp, L.-P. Wang, A. C. Simmonett, M. P. Harrigan, C. D. Stern, R. P. Wiewiora, B. R. Brooks, and V. S. Pande. \"OpenMM 7: Rapid development of high performance algorithms for molecular dynamics.\" PLOS Comp. Biol. 13(7): e1005659. HTMD: High-Throughput Molecular Dynamics for Molecular Discovery Discussion THIS FORUM IS MOVING TO GITHUB! OpenMM Feb 24, 2025 Re: Help Needed with Drude Modeling for Molten Salts in OpenMM OpenMM Feb 19, 2025 Re: Combining AMD integrator with Langevin integrator OpenMM Feb 13, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=406&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "16c91bda-43a4-4024-befb-636b91ce66b1",
    "document_id": "doc_3",
    "content": "API 4.5 For C++ developers Overview This documentation is for people who want to extend the OpenSim libraries by, for example, writing a C++ plugin or creating new Components. Therefore, this site contains documentation for protected methods that you might need to implement. If you simply want to make use of the API in MATLAB or Python, then this documentation contains excessive information and you should check out the user API documentation. The table below represents the hierarchical structure of OpenSim. Each box represents a class utilized by the OpenSim API, and is built on top of (i.e., requires) the components underneath. For example, you can click on the \"Model Component\" block to see a list of model components, such as body, constraint, or joint. Click on any of the boxes to navigate to corresponding class description. Other specific classes of interest in OpenSim : OpenSim::Actuator OpenSim::Body OpenSim::Force OpenSim::Function OpenSim::Joint OpenSim::Muscle OpenSim::StatesTrajectory Classes of interest in Simbody: SimTK::Matrix_ SimTK::Vector_ SimTK::Vec SimTK::UnitVec SimTK::Rotation SimTK::MobilizedBody SimTK::SimbodyMatterSubsystem SimTK::State For documentation on the OpenSim Moco optimal control library, visit Moco . Generated on Thu Mar 21 2024 15:03:02 for API by 1.8.14",
    "metadata": {
      "source": "https://simtk.org/api_docs/opensim/api_docs/",
      "title": "API: Overview",
      "section": "",
      "hierarchy": [
        "api_docs",
        "opensim",
        "api_docs"
      ],
      "content_type": "api",
      "position": 0,
      "tags": [
        "api",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "dba90efa-54d3-4c21-871d-af1241285d84",
    "document_id": "doc_172",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53099477/Workshops+and+Events",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53099477",
        "Workshops+and+Events"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7e78abef-c7ff-4c1d-b7b6-fe113ff3b48a",
    "document_id": "doc_121",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53090155/Model+Editing",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53090155",
        "Model+Editing"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c67b2ee5-01f2-49a2-9bfb-69274b1b613e",
    "document_id": "doc_66",
    "content": "2017 Fall OpenSim Virtual Workshop Cost function sensitivity in predictive... Enhancing Accuracy and Reliability of Spinal Load... Finite element simulations of prosthesis socket... Flexing Computational Muscle: Modeling... How Robust is Human Gait to Calf Muscle Shortening? How Tendon Compliance Affects the Metabolic Cost... Marker registration method informed by anatomical... See all May Liu's Walking Simulations Multiple Speed Walking Simulations Muscle constitutive model with actin-titin binding... Muscle constitutive model with a tangent modulus... OpenSense model of motor variability for gait OpenSim Platform for Dynamic Simulation and Control of... Predictive Simulation of Loaded and Inclined... Quantifying uncertainty in inverse analyses... Simbody: Multibody Physics API Simulated Assistive Devices for Loaded Walking Simulating Ideal Assistive Devices to Reduce the... Theia3D to OpenSim: Utilities to fit an OpenSim model from... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/users/tkuchida",
      "title": "SimTK: Thomas Uchida",
      "section": "Thomas Uchida University of Ottawa Department of Mechanical Engineering Personal website Contact Member since May 16, 2012 Member of 21 projects Total forum posts: 1808 Last forum post: Mar 11, 2025 Projects Thomas Uchida is a member of the following projects:",
      "hierarchy": [
        "users",
        "tkuchida"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "f9b7f96f-6c8d-42bb-aef2-739f72acdd0a",
    "document_id": "doc_149",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/100139009/See+the+Work",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "100139009",
        "See+the+Work"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "0fb1b9b6-0639-42bd-82ed-0d20ec171c5c",
    "document_id": "doc_76",
    "content": "Analysis of arm swing during human walking Share Follow Project Follow publicly Follow privately Unfollow See followers (4) List Map More info 899 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Provides a simplified total body model for simulation of musculoskeletal movements. Download Latest Releases Arm swing data: Arm swing simulation data License: Arm swing data This project provides a simplified version of the UpperLowerBodySimple model from the ULB-project, which was adjusted with the purpose to decrease the run time of the simulations. The adjusted model was used to determine arm swing kinematics (with and without muscle excitations) during human walking, with arm movements not exceeding 70 degrees of anteflexion or abduction. However, the adjusted_ULB model can be used for modeling and simulating kinematics and kinetics of all neuromusculoskeletal systems. For an example of an arm swing simulation without muscle excitation we refer to the video below. 1,079 downloads 1 forum posts 4 followers Last updated Jun 3, 2014 Project Statistics Join Mailing Lists Suggest Idea Marije Goudriaan Ilse Jonkers Sjoerd Bruijn Jaap van Dieen Downloads The download 'arm swing simulation data' contains the adjusted UpperLowerBodySimple model(Adjusted_ULBmodel.osim) and all files needed to run forward simulations of two arm swing conditions (normal walking and walking with the arms swinging in-phase with legs) at three different walking speeds(2, 4 and 6 km/h). The files for the intermediary steps are included as well. See all Downloads People also viewed OpenSim Muscle contributions to mass center... Sam's Simulations Examining Muscle Forces during Sit to Stand Transfer... Evertor and invertor muscle co-activation... Chand's Simulations Full Body Model for use in Dynamic Simulations of... OpenSim Moco See all Dynamic Simulation of Movement Based on OpenSim and... EMG-informed Computed Muscle Control for Dynamic... Upper and Lower Body Model How much muscle strength is required to walk in... Dynamic Arm Simulator Multiple Speed Walking Simulations A three-dimensional musculoskeletal model of the dog SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/arm_swing/",
      "title": "SimTK: Analysis of arm swing during human walking: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "arm_swing"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "analysis",
        "intermediate"
      ]
    }
  },
  {
    "id": "e6f90a52-5530-4d8f-a594-f8d6bfec2994",
    "document_id": "doc_114",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089847/Introducing+OpenSim",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089847",
        "Introducing+OpenSim"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "9532e004-c598-4197-b1ff-59537bdeb693",
    "document_id": "doc_36",
    "content": "Following Projects To encourage communication and knowledge transfer about projects on SimTK, members can follow any number of projects. By following a project, you will receive updates and news relevant to the project. There are two types of project followers, public or private: Public follower: Others will see your name and profile in the list of project followers. By becoming a public follower, other members of SimTK may message you regarding your interest and involvement in the project. Private follower: Your name and profile will NOT be displayed in the list of followers. The number of private followers is displayed at the top of the follower list. To see the list of public followers on a project, click on the number next to the “Follow: SimTK” label. How to Follow In order to follow a project, you must be a member of SimTK. Use the drop-down menu next to the “Follow: SimTK” label in the top right of every project page to follow the project as a public or private follower or to unfollow the project. SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/plugins/following/follow-info.php",
      "title": "SimTK: Following",
      "section": "",
      "hierarchy": [
        "plugins",
        "following",
        "follow-info.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "e720e244-d434-47e2-a33b-db4e832cc699",
    "document_id": "doc_19",
    "content": "Shoulder Modeling The shoulder modeling community is interested in understanding and utilizing biomechanics knowledge of the shoulder and upper-extremity to advance clinical treatments and diagnoses, ergonomics, and sports performance. Featured projects Related communities Recently updated projects total projects 4 projects with downloads See all community projects Add project to community News New file added: ShoulderDatabaseV1.1.zip Delft Shoulder and Elbow Model Mar 20, 2015 Publications Seth A, Matias R, Veloso AP and Delp SL. A biomechanical model of the scapulothoracic joint to accurately capture scapular kinematics during shoulder movements. PLOS ONE. Saul KR, Hu X, Goehler CM, Daly M, Vidt ME, Velisar A, Murray WM. Benchmarking of dynamic simulation predictions in two software platforms using an upper limb musculoskeletal model. In press at Computer Methods in Biomechanics and Biomedical Engineering. DOI: 10.1080/10255842.2014.916698 Chadwick, E., Blana, D., Kirsch, R., & van den Bogert, A. (2014). Real-Time Simulation of Three-Dimensional Shoulder Girdle and Arm Dynamics. IEEE Transactions on Biomedical Engineering, 61(7), 1947–1956. doi:10.1109/TBME.2014.2309727 Discussion range of motion for Forearm pronation-supination Dynamic Arm Simulator Jul 2, 2024 Shoulder model personalization Public Forum Shoulder model personalization May 9, 2024 Thorax does not match the serratus anterior Dynamic Arm Simulator Oct 18, 2023 Administrators Ajay Seth Dimitra Blana Ricardo Matias Joy Ku SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/communityPage.php?cat=1002&sort=date&page=0&srch=&",
      "title": "SimTK: Community",
      "section": "",
      "hierarchy": [
        "category",
        "communityPage.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "eeaba80c-c97d-4df9-8742-3a3c8beffa86",
    "document_id": "doc_67",
    "content": "Neuromuscular Models Library Share Follow Project Follow publicly Follow privately Unfollow See followers (5) List Map More info 95 About Project summary Project statistics Project Activity Plots Geography of Use Forum Statistics Team members Forums About Project summary Project statistics Project Activity Plots Geography of Use Forum Statistics Team members Forums Make available a set of models developed by the Neuromuscular Biomechanics Lab at Stanford and collaborating colleagues. The library is no longer being maintained through this project. To find OpenSim models, you now have two options: 1) Visit the summary table on the OpenSim documentation pages ( http://simtk-confluence.stanford.edu:8080/display/OpenSim/Musculoskeletal+Models ) 2) Conduct a search on SimTK. Click here ( https://simtk.org/search/search.php?srch=opensim&type_of_search=soft ) and then narrow your search to \"models\" by checking the box on the left. ------------------------------------------ Welcome to the neuromuscular models library! The goal of this site is to provide a resource for students, researchers, and clinicians to access, use, test, and develop models. The majority of models in this library are for use with OpenSIM (which you can download free through simtk.org) and/or SIMM. Please take a look and enjoy. Please respect your fellow modelers. In using these models we ask that you respect the hard work of your fellow researchers by citing their work appropriately. When you go to the Download section you will be directed to individual project pages for each model which contain all of the files and documentation. Please carefully review the publications and cite the references in your future papers, presentations, grant applications, etc. Have a model to contribute? Do you have a model which you would like to make available through this library? Providing others with access to your models can stimulate future studies, provide a foundation for young researchers, and maximize the impact of your model. It’s easy to set up a project page to post your model. This will allow you to track who is using your model and be in contact with them. Please consider contributing! The project administrators can help you post your model, so please contact us if you would like to get started. 6 forum posts 5 followers Last updated May 4, 2016 Project Statistics Katherine Steele People also viewed Musculoskeletal Model of the NZW Rabbit Hindlimb Neuromusculoskeletal Modeling (NMSM) Pipeline An OpenSim plugin to minimize joint reaction forces and... Dynamic Simulation of Joints Using Multi-Scale... OpenSim Soccer Ball Kicking Example Muscle-actuated Simulation of Human Running Muscle contributions to mass center... Calibrated EMG-Informed Neuromusculoskeletal... See all Simbody: Multibody Physics API EMG-informed Computed Muscle Control for Dynamic... OpenSim Utilities for Gait and Movement Analysis Dynamic Arm Simulator How much muscle strength is required to walk in... Thoracolumbar spine and rib cage model in OpenSim Simplified OpenSim GUI SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website",
    "metadata": {
      "source": "https://simtk.org/projects/nmblmodels",
      "title": "SimTK: Neuromuscular Models Library: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmblmodels"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "b59c06d4-ad8d-482f-875d-b075ce47f8ec",
    "document_id": "doc_67",
    "content": "contributions to mass center... Calibrated EMG-Informed Neuromusculoskeletal... See all Simbody: Multibody Physics API EMG-informed Computed Muscle Control for Dynamic... OpenSim Utilities for Gait and Movement Analysis Dynamic Arm Simulator How much muscle strength is required to walk in... Thoracolumbar spine and rib cage model in OpenSim Simplified OpenSim GUI SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/nmblmodels",
      "title": "SimTK: Neuromuscular Models Library: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "nmblmodels"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c013954e-0940-4edf-a6fa-d2c2e91df399",
    "document_id": "doc_12",
    "content": "Volumetric & Time Series Models of Muscle Deformation Jul 24, 2020 OpenArm 2.0 data set released + scheduled for presentation at EMBC Berlin! OpenArm: Volumetric & Time Series Models of Muscle Deformation Jul 16, 2019 Publications The Neuromusculoskeletal Modeling Pipeline: MATLAB-based Model Personalization and Treatment Optimization Functionality for OpenSim Capacitive Sensing for Natural Environment Rehabilitation Monitoring Bruno L. S. Bedo, Alice Mantoan, Danilo S. Catelli, Willian Cruaud, MonicaReggiani & Mario Lamontagne (2021): BOPS: a Matlab toolbox to batch musculoskeletal data processing for OpenSim, Computer Methods in Biomechanics and Biomedical Engineering https://doi.org/10.1080/10255842.2020.1867978 Discussion Re: MTP Error: parseMuscleAnalysisCoordinates Mismatch Error Neuromusculoskeletal Modeling Pipeline Mar 24, 2025 Real-time OpenSim via IMUs for Full Body Kinematics Public Forum Real-time OpenSim via IMUs for Full Body Kinematics Mar 18, 2025 Re: What version of OpenSim works with CEINMS Calibrated EMG-Informed Neuromusculoskeletal Modelling Toolbox (CEINMS) Mar 13, 2025 SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/category/category.php?cat=411&sort=date&page=0&srch=&",
      "title": "SimTK: Project category",
      "section": "Experimental Analysis Computational tools extract meaningful information from noisy real-world experimental data, such as from single molecule experiments, mass spectroscopy, and gel electrophoresis Featured projects Recently updated projects total projects 58 projects with downloads Search projects in this category News Dog model A three-dimensional musculoskeletal model of the dog May 31, 2021 OpenArm Multisensor data set and muscle contour tracking code released + slated for presentation at ASB & BioRob! OpenArm:",
      "hierarchy": [
        "category",
        "category.php"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "cd38cdd7-8322-4c98-9924-20f63e50a67a",
    "document_id": "doc_49",
    "content": "OpenSim Share Follow Project Follow publicly Follow privately Unfollow See followers (313) List Map More info 91 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow News Trackers Displaying results 1‒25 out of 333 total. Displaying 10 25 50 100 1000 results. Submit new issue Advanced queries Simple Filtering and Sorting Build Query Assignee: Unassigned Joy Ku Ayman Habib Ajay Seth Jennifer Hicks Scott Delp Thomas Uchida Diane Bush Jacqueline Tran Carmichael Ong Matt Petrucci Nicholas Bianco Matt DeMers Shrinidhi KL Michael Sherman Apoorva Rajagopal Any State: Any Open Closed Deleted Order by: Id Priority Summary Open Date Last Modified Date Close Date Submitter Assignee # Votes # Voters % Votes Ascending Descending Id Summary Open Date Assigned to Submitted by 1563 Model behavior depends on ordering of Bodies in osim file * 2011-11-14 02:05 Ajay Seth B.J. Fregly 1849 New Millard Equilibrium Muscle Model Fails when Thelen2003 Muscle Model Works * 2013-04-12 19:59 Ajay Seth B.J. Fregly 2047 Scale - not using specified mass * 2014-10-24 00:00 Ajay Seth Katherine Steele 2004 Double-Clicked Marker Selection in Navigator Pane brings up incorrect marker in properties pane * 2014-04-09 19:57 Ayman Habib jimmy d 1445 Scale Tool outputting extra (unwanted) files * 2011-04-13 15:38 Ayman Habib Sam Hamner 1449 Error loading file when running RRA after creating setup file in GUI * 2011-04-14 19:24 Ayman Habib Sam Hamner 1452 Scale Defining Model Measurements * 2011-05-09 21:48 Ayman Habib Ajay Seth 1453 Reduced Rediduals Adjust model * 2011-05-09 21:52 Ayman Habib Ajay Seth 1515 Scale setup GUI does not load in Measurement Set file * 2011-08-16 22:55 Ayman Habib Marjolein van der Krogt 1458 \"choose external references...\" dialog in scale setup save doesn't do anything * 2011-05-20 22:55 Ayman Habib Edith Arnold 1459 output from GUI scale not going where it says it will * 2011-05-20 23:41 Ayman Habib Edith Arnold 1474 assign model in scale setup * 2011-06-15 20:55 Ayman Habib Glen Lichtwark 579 Experimental markers do not appear after scale * 2008-03-12 23:18 Ayman Habib Ajay Seth 1561 JAVA Error in GUI Scale Model Tool * 2011-11-12 19:20 Ayman Habib B.J. Fregly 1571 Cannot convert IAA setup file when GRF file cannot be located * 2011-11-22 18:53 Ayman Habib Sam Hamner 1305 OpenSim maintains ownership of states file written from failed CMC * 2010-08-06 23:27 Ayman Habib Ajay Seth 1641 IK Tool reports errors for markers not being tracked * 2012-03-22 23:47 Ajay Seth Sam Hamner 1437 keyword ALL does not work in Forward for actuator",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=322&group_id=91&func=browse",
      "title": "SimTK: OpenSim: Bugs",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "882fd3d4-2144-4a25-b876-a625de0c6e20",
    "document_id": "doc_49",
    "content": "2011-06-15 20:55 Ayman Habib Glen Lichtwark 579 Experimental markers do not appear after scale * 2008-03-12 23:18 Ayman Habib Ajay Seth 1561 JAVA Error in GUI Scale Model Tool * 2011-11-12 19:20 Ayman Habib B.J. Fregly 1571 Cannot convert IAA setup file when GRF file cannot be located * 2011-11-22 18:53 Ayman Habib Sam Hamner 1305 OpenSim maintains ownership of states file written from failed CMC * 2010-08-06 23:27 Ayman Habib Ajay Seth 1641 IK Tool reports errors for markers not being tracked * 2012-03-22 23:47 Ajay Seth Sam Hamner 1437 keyword ALL does not work in Forward for actuator list * 2011-03-25 18:01 Ajay Seth Edith Arnold 1642 RRA Tool causes OpenSim to hang if you close model before Tool * 2012-03-23 00:40 Ayman Habib Sam Hamner 1643 CMC is unable to run with a RigidTendonMuscle in the model * 2012-03-23 17:01 Ajay Seth Ajay Seth 1648 Ligaments do not report forces in ForceReporter * 2012-03-27 18:37 Ayman Habib Ayman Habib 1552 Problems with Manager class initialization * 2011-10-21 10:32 Ajay Seth yoonsang lee 1610 OpenSim fails to load a model if the file path contains a special character (ë) * 2012-02-06 15:21 Ayman Habib Ward Bartels 1623 \"opacity\" tag in DisplayGeometry is not being obeyed in the GUI * 2012-02-24 19:06 Ayman Habib Tim Dorn 1649 Toggle clamp to bounds display icon * 2012-03-28 20:56 Ayman Habib Jennifer Hicks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 next → * Denotes requests > 30 Days Old SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/tracker/?atid=322&group_id=91&func=browse",
      "title": "SimTK: OpenSim: Bugs",
      "section": "",
      "hierarchy": [
        "tracker"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "c1a60d79-10b5-449c-811c-eae8d6fe5475",
    "document_id": "doc_4",
    "content": "Enabling groundbreaking biomedical research via open access to high-quality simulation tools, accurate models, and the people behind them. 1914 projects 4312297 downloads 162849 members Join Us OpenMM An open-source toolkit for molecular simulation with extreme flexibility through custom forces and integrators and extreme performance through GPU acceleration... Learn more Mycoplasma genitalium Whole-Cell Model A detailed computational model of the entire life cycle of the bacterium Mycoplasma genitalium ... Learn more OpenSim State-of-the-art modeling and simulation software for advancing our understanding of movement and designing improved treatments for movement abnormalities... Learn more SimVascular Providing a complete pipeline for patient-specific modeling from medical image data to cardiovascular blood flow simulation and analysis... Learn more FEATURE Modeling and finding functional domains in proteins by analyzing the structures of functionally similar proteins using supervised machine learning algorithms... Learn more Previous Next Trending Projects Thoracolumbar spine and rib cage model in OpenSim The aim of this project is to provide detailed and well-validated musculoskeletal models of the thoracolumbar spine and rib cage, particularly for investigators with an interest studying musculoskeletal loading in the trunk. Total followers: 39 OpenSim Provide easy-to-use, extensible software for modeling, simulating, controlling, and analyzing the neuromusculoskeletal system. Downloads last week: 1,946 Forum posts last week: 13 Total followers: 319 New followers: 1 Total downloads: 836,655 Simulations of Crouch Gait Simulations of individuals with cerebral palsy who walk in a crouch gait . These simulations were used in analyses of (1) contributions to mass center accelerations, (2) impacts of muscle weakness, (3) magnitudes of tibiofemoral contact forces, and (4) evaluations of ankle foot orthoses during crouch gait. Downloads provide all supporting files for OpenSim simulations. Please see accompanying publications for more information. Downloads last week: 73 Total downloads: 15,099 Open Knee(s): Virtual Biomechanical Representations of the Knee Joint Open Knee(s) goals have been to provide free access to three-dimensional finite element representations of the knee joint and promote open development of knee models for collaborative testing and use. <B>Definitive Guide to Project and Its Outcomes</B> Open Knee(s): A Free and Open Source Library of Specimen-Specific Models and Related Digital Assets for Finite Element Analysis of the Knee Joint. Chokhandre S, Schwartz A, Klonowski E, Landis B, Erdemir A. Ann Biomed Eng. 2023 Jan;51(1):10-23. (<A HREF=\"https://doi.org/10.1007/s10439-022-0307 4-0\">https://doi.org/10.1007/s10439-022-03 074-0</A>) <B>Definitive Guide to Open Knee(s) Data</B> Specimen specific imaging and joint mechanical testing data for next generation virtual knees. Chokhandre S, Neumann EE, Nagle TF, Colbrunn RW, Flask CA, Colak C, Halloran J, Erdemir A. Data Brief. 2021 Jan 30;35:106824. (<A HREF=\"https://doi.org/10.1016/j.dib.2021.1068 24\">https://doi.org/10.1016/j.dib.2021.106 824</A>) <B>Database of Open Knee(s) Models</B> Under Downloads -> Data Share -> View -> OKS_models and at (<A HREF=\"https://doi.org/10.18735/b0zv-n395\" ;>https://doi.org/10.18735/b0zv-n395</A>) <B>Database of Open Knee(s) Data</B> Growing version under Downloads -> Data Share -> View -> Open Knees Data; permanent static version at (<A HREF=\"https://doi.org/10.18735/4e78-1311\" ;>https://doi.org/10.18735/4e78-1311</A>) Downloads last week: 223 Total followers: 47 Total downloads: 151,574 Reproducibility in simulation­-based prediction of natural knee mechanics This project aims for understanding the influence of modelers’ approaches and decisions (essentially their art) throughout the lifecycle of",
    "metadata": {
      "source": "https://simtk.org/",
      "title": "SimTK: Welcome",
      "section": "",
      "hierarchy": [
        "Root"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7f001fa6-cdb0-40c5-a077-5b23218be045",
    "document_id": "doc_4",
    "content": "Colbrunn RW, Flask CA, Colak C, Halloran J, Erdemir A. Data Brief. 2021 Jan 30;35:106824. (<A HREF=\"https://doi.org/10.1016/j.dib.2021.1068 24\">https://doi.org/10.1016/j.dib.2021.106 824</A>) <B>Database of Open Knee(s) Models</B> Under Downloads -> Data Share -> View -> OKS_models and at (<A HREF=\"https://doi.org/10.18735/b0zv-n395\" ;>https://doi.org/10.18735/b0zv-n395</A>) <B>Database of Open Knee(s) Data</B> Growing version under Downloads -> Data Share -> View -> Open Knees Data; permanent static version at (<A HREF=\"https://doi.org/10.18735/4e78-1311\" ;>https://doi.org/10.18735/4e78-1311</A>) Downloads last week: 223 Total followers: 47 Total downloads: 151,574 Reproducibility in simulation­-based prediction of natural knee mechanics This project aims for understanding the influence of modelers’ approaches and decisions (essentially their art) throughout the lifecycle of modeling and simulation. It will demonstrate the uncertainty of delivering consistent simulation predictions when the founding data to feed into models remain the same. The project site also aims to be a hub to provide an overview of resources for modeling & simulation of the knee joint. Funding is provided by the National Institute of Biomedical Imaging and Bioengineering, National Institutes of Health (Grant No. R01EB024573). Downloads last week: 165 Total downloads: 29,083 Upper Extremity Dynamic Model Provides the files associated with a dynamic model of the upper limb for use in SIMM or OpenSim. Total followers: 45 OpenCap OpenCap is a software package to estimate 3D human movement dynamics from smartphone videos. Forum posts last week: 13 OpenMM Zephyr OpenMM Zephyr provides a visual application for running GPU-accelerated molecular simulations. Downloads last week: 12,755 Total downloads: 1,248,055 Upper Extremity Kinematic Model Upper-extremity available for download along with accompanying publications. Total followers: 27 Total downloads: 11,355 OpenSim Moco OpenSim Moco solves optimal control problems with musculoskeletal models defined in OpenSim, using direct collocation. Forum posts last week: 5 SimVascular: Cardiovascular Modeling and Simulation Provides a platform for patient-specific cardiovascular modeling and simulation. Downloads last week: 137 Forum posts last week: 7 Total followers: 80 Total downloads: 52,046 Calibrated EMG-Informed Neuromusculoskeletal Modelling Toolbox (CEINMS) Provides an easy to use toolbox, compatible with OpenSim, for the estimation of the human lower extremity muscle and joint dynamics. Downloads last week: 75 Total followers: 41 Platform for Dynamic Simulation and Control of Movement based on OpenSim&MATLAB This project overcomes neuromusculoskeletal systems limitations of MATLAB®/Simulink® and robust design & control limitations of OpenSim through an interface between these two software packages that combines relevant strengths of each individual package. Total followers: 75 New followers: 1 SCONE: Open Source Software for Predictive Simulation SCONE is free and open-source software for <b>predictive simulation</b> of human and animal motion. Please visit the <a href=\"https://scone.software\">SCONE homepage</a> for more information, or <a href=\"https://simtk.org/frs/?group_id=1180&qu ot;>download SCONE</a> for <b>Windows</b>, <b>Linux</b> and <b>macOS</b>. Forum posts last week: 2 Total followers: 35 OpenRobotRehab: Data Sets & Platforms for Robot-Mediated Rehabilitation The OpenRobotRehab data sets and open-source software platforms are designed to enable study of human neuromechanical behavior when modified by rehabilitative robots. **NEW:** The OpenRobotRehab 1.0 release contains time-series data from 13 healthy and 2 post-stroke participants performing isometric upper-limb rehabilitation gaming tasks, including raw and processed surface electromyography (sEMG), force torque, and game",
    "metadata": {
      "source": "https://simtk.org/",
      "title": "SimTK: Welcome",
      "section": "",
      "hierarchy": [
        "Root"
      ],
      "content_type": "reference",
      "position": 1,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "7ca9acf0-1ee9-4057-8de8-fe8160e01658",
    "document_id": "doc_4",
    "content": "and open-source software for <b>predictive simulation</b> of human and animal motion. Please visit the <a href=\"https://scone.software\">SCONE homepage</a> for more information, or <a href=\"https://simtk.org/frs/?group_id=1180&qu ot;>download SCONE</a> for <b>Windows</b>, <b>Linux</b> and <b>macOS</b>. Forum posts last week: 2 Total followers: 35 OpenRobotRehab: Data Sets & Platforms for Robot-Mediated Rehabilitation The OpenRobotRehab data sets and open-source software platforms are designed to enable study of human neuromechanical behavior when modified by rehabilitative robots. **NEW:** The OpenRobotRehab 1.0 release contains time-series data from 13 healthy and 2 post-stroke participants performing isometric upper-limb rehabilitation gaming tasks, including raw and processed surface electromyography (sEMG), force torque, and game performance data, alongside analysis code and protocol details. New download files: 2 By Category Biological applications Cardiovascular system Cell Myosin Neuromuscular system Protein RNA Tissue Biocomputational focus Experimental analysis Image processing Network modeling and analysis Physics-based simulation Statistical analysis Visualization Communities OpenSim Shoulder Modeling SimVascular IMAG/MSM Consortium IMAG-MSM Public Dissemination & Education Working Group Biomechanics of Movement See all communities... Jobs See all job openings... News New Calibrated Knee Models and Dataset Validation of Subject-Specific Knee Models from In Vivo Measurements Mar 20, 2025 A new link, Knee Model and Optimization Software, has been added to release Initial Dataset Publication of S193761 Model. OpenSim Creator 0.5.21 is now available 🥳 OpenSim Creator Mar 3, 2025 It's a minor release that makes the installer ~5 MB smaller, adds support for HighDPI 3D rendering. SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/",
      "title": "SimTK: Welcome",
      "section": "",
      "hierarchy": [
        "Root"
      ],
      "content_type": "reference",
      "position": 2,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "1a7a2337-3d7c-449f-9713-3ad116410ca2",
    "document_id": "doc_88",
    "content": "How much muscle strength is required to walk in a crouch gait? Share Follow Project Follow publicly Follow privately Unfollow See followers (6) List Map More info 608 About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow About Project summary Project statistics Downloads Summary Project Activity Plots Geography of Use Forum Statistics Publications Team members Downloads Documents Forums Source Code Summary Browse source code Issues View trackers Bugs Bugs tracker Submit new Follow Features Features tracker Submit new Follow Suggested Ideas Suggested Ideas tracker Submit new Follow Use musculoskeletal modeling to determine how robost unimpaired and crouch gait are to weakness of individual muscle groups. Individuals with cerebral palsy (CP) who walk in a crouch gait often receive strength training as part of their therapy. An underlying assumption is that these individuals do not have adequate muscle strength to walk in an upright posture, and strengthening weak muscle groups will enable these individuals to improve their knee extension. However, outcomes from strength training programs for individuals with cerebral palsy and crouch gait are inconsistent. The purpose of this project is to determine how much strength is required to walk in a crouch gait and compare this to unimpaired gait. Identifying which muscle groups require more or less force to maintain a crouch gait versus an upright gait can provide guidance for designing effective strength training programs for individuals with CP who walk in a crouch gait. 0 downloads 3 forum posts 6 followers Last updated Feb 8, 2011 Project Statistics Join Mailing Lists Suggest Idea Katherine Steele Marjolein van der Krogt Scott Delp People also viewed EMG-informed Computed Muscle Control for Dynamic... Simulations of Crouch Gait Calibrated EMG-Informed Neuromusculoskeletal... Dynamic Arm Simulator Platform for Dynamic Simulation and Control of... Hip Musculoskeletal Model Efficient Methods for Multi-Domain Biomechanical... OpenArm: Volumetric & Time Series Models of Muscle... See all Simulating the effects of weakness and muscle... How Robust is Human Gait to Calf Muscle Shortening? Muscle-actuated Simulation of Human Running Simbody: Multibody Physics API OpenSim plugin to extract the muscle lines of action Muscle contributions to mass center... Dynamic Simulation of Movement Based on OpenSim and... SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/projects/crouch_strength/",
      "title": "SimTK: How much muscle strength is required to walk in a crouch gait?: Project Home",
      "section": "",
      "hierarchy": [
        "projects",
        "crouch_strength"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "6191f155-cd19-44fe-bd1c-11803773c1f6",
    "document_id": "doc_178",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/99450892/Design+and+Robotics",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "99450892",
        "Design+and+Robotics"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "771dc4b8-9b56-4f0a-b185-00fd5d938085",
    "document_id": "doc_115",
    "content": "Getting Started Download About OpenSim Installation Guide What's New in OpenSim 4.5? How to Contribute Overview of OpenSim Workflows Documentation User's Guide Scripting and Development for Matlab, Python, C++ Theory and Publications Doxygen Examples and Tutorials Introductory Examples Intermediate Examples Advanced Examples Troubleshooting Get Support via the Forum Best Practices FAQ Models, Data, & Utilities Musculoskeletal Models Motion and Simulation Data OpenSim Moco OpenCap AddBiomechanics Utilities and Extensions Teaching Hub Videos Courses Workshops and Events Teaching Materials See the Work Rehabilitation Orthopaedics Ergonomics Performance Design and Robotics Join the Community Sign up for Newsletter Meet the Team OpenSim Fellows",
    "metadata": {
      "source": "https://simtk-confluence.stanford.edu/wiki/spaces/OpenSim/pages/53089819/Installation+Guide",
      "title": "OpenSim Documentation - OpenSim",
      "section": "",
      "hierarchy": [
        "wiki",
        "spaces",
        "OpenSim",
        "pages",
        "53089819",
        "Installation+Guide"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  },
  {
    "id": "74ef65e8-2265-4aee-a423-54da5b541e61",
    "document_id": "doc_62",
    "content": "Jennifer Hicks Stanford University National Center for Simulation in Rehabilitation Research Contact Interests As the OpenSim R&D Manager, I am focused on guiding the development of OpenSim and facilitating its use in research and clinical settings around the world. Member since Sep 7, 2005 Member of 41 projects Total forum posts: 30 Last forum post: May 2, 2024 Projects Jennifer Hicks is a member of the following projects: 2017 Fall OpenSim Virtual Workshop 2018 Fall OpenSim Virtual Workshop Drop Landing Model Full Body Model for use in Dynamic Simulations of... How connecting the legs with a spring improves human... How Tendon Compliance Affects the Metabolic Cost... ME/BIOE 485 (Modeling and Simulation of Human... Mobilize Center Planning See all Modeling and Predicting Osteoarthritis... Muscle-actuated Simulation of Human Running Neuromuscular Models Library OpenCap OpenSense OpenSense: Validation of IMU-based estimates... OpenSim OpenSim Advanced User and Developer Workshop, August... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced User and Developer Workshop, March... OpenSim Advanced Users Workshop, April 28-30, 2010 OpenSim Advanced Users Workshop, August 12-14, 2009 OpenSim and NMS Physiome Workshop OpenSim Developer Jamboree - July 12-14, 2010 OpenSim Developer's Jamboree 2008 OpenSim Developers Jamboree - October 28-30, 2009 OpenSim for the Warrior Web OpenSim Moco OpenSim Motion and Simulation Data OpenSim Science Advisors OpenSim Soccer Ball Kicking Example OpenSim Utilities Predicting gait adaptations due to plantarflexor... Predictive Simulation of Loaded and Inclined... Predictive Simulation of Standing Long Jumps... Running in the wild: energetics explain ecological... Simulated Assistive Devices for Loaded Walking Simulating Ideal Assistive Devices to Reduce the... Simulation Labs utilizing OpenSim software Simulations of Crouch Gait Spasticity model in OpenSim Tibial forces in independently ambulatory children... Followed projects Jennifer Hicks is following the project below: OpenSim SimTK is maintained through Grant R01GM124443 01A1 from the National Institutes of Health (NIH). It was initially developed as part of the Simbios project funded by the NIH as part of the NIH Roadmap for Medical Research, Grant U54 GM072970. Our Pledge and Your Responsibility Feedback About Join Version 4.2.2. Website design by Viewfarm . Icons created by SimTK team using art by GraphBerry from www.flaticon.com under a CC BY 3.0 license. Forked from FusionForge 6.0.5. #FDF8E1 @light_yellow #F75236 @red #F5B563 @orange #81A5D4 @light_blue #5E96E1 @dark_blue #505050 @dark_grey #000000 @black #A7A7A7 @light_grey Feedback",
    "metadata": {
      "source": "https://simtk.org/users/jenhicks",
      "title": "SimTK: Jennifer Hicks",
      "section": "",
      "hierarchy": [
        "users",
        "jenhicks"
      ],
      "content_type": "reference",
      "position": 0,
      "tags": [
        "reference",
        "general",
        "intermediate"
      ]
    }
  }
]